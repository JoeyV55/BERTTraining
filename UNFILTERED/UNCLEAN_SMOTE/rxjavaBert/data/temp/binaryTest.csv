Utility,Network,Interpreter,Internationalization,Logic,Test,Input and Output,Application,corpus
1,0,0,0,0,0,1,0,merge of pull #125 for issue #87 operator takewhile manually merging https://githubcom/netflix/rxjava/pull/125 from @mairbek implementation of https://githubcom/netflix/rxjava/issues/87 done by @mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch ||
1,0,1,0,0,0,1,0,fixed bug in ranges fixed issue #164 [rxjava-pull-requests #3](https://netflixosscicloudbeescom/job/rxjava-pull-requests/3/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,"interval i have attempted to implement the ""interval"" operator (#55) here as far as i can see it seems to work this is based on the quite fresh work on schedulersit doesnt work with the `currentthread` or `newthread` schedulers i guess due to the simple `sleepingaction` it does work with a `scheduledexecutorservice` thoughfor testing this conveniently i also wrote a test scheduler with adjustable timelooking forward to any review comments [rxjava-pull-requests #83](https://netflixosscicloudbeescom/job/rxjava-pull-requests/83/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #84](https://netflixosscicloudbeescom/job/rxjava-pull-requests/84/) successthis pull request looks good || lets consider adding new method to the `scheduler```` javascheduleperiodically(action0 action long initialdelay long period timeunit unit) ```it would allow to leverage `scheduledexecutorservice#scheduleatfixedrate` for the `executorscheduler` for other schedulers we could use recursive action scheduling from pull request #229  || i agree `scheduleperiodically` would be helpful here || @jmhofer do you plan to work on this feature? im thinking about implementing buffer operator #16 and this one will be very helpful for me || ill have a look at it || maybe we should also combine all the longs and units into a timespan class? - it doesnt feel right to always have them as separate parameters || anyone know why net wouldnt have a `scheduleperiodically` concept? if we were to add that it would only really work with `scheduledexecutorservice` and thus most `scheduler` implementations would have to rely upon the generic `scheduledexecutorservice` that ive added in https://githubcom/netflix/rxjava/pull/235 called `genericscheduledexecutorservice`this suggests to me that it isnt the right solution to add another interface method as it seems very tied to a particular implementation cant this be achieved with recursive schedulers which now work after the changes you did in https://githubcom/netflix/rxjava/pull/229? || im curious about this:> it doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughit seems that this operator needs to be async and must default to using something like `schedulersthreadpoolforcomputation()`documentation at msdn (http://msdnmicrosoftcom/en-us/library/hh228911(vvs103)aspx) suggests that this defaults to using a thread-pool scheduler:> the following example code uses the interval operator to generate a sequence of long integers staring at zero each integer in the sequence is generated after the two second period has expired each integer is written to the console window along with the current time to show the period parameter in effect the generation of the integer sequence is scheduled to run on a thread from the net thread pool so the main thread is not blocked and can process the enter key being pressed to stop the intervalperhaps `newthreadscheduler` will work as of https://githubcom/netflix/rxjava/pull/235 because it now uses `genericscheduledexecutorservice` when a delay is passed in instead of `sleepingaction`what happens in net if someone tries to use `immediatescheduler` or `currentthreadscheduler`? anyone have access to net to try that? || > maybe we should also combine all the longs and units into a timespan class? - it doesnt feel right to always have them as separate parametersif were going to consider doing this then we should do it as part of https://githubcom/netflix/rxjava/pull/235 before i release another version since this would change the `schedulers` interfacejava itself always keeps the 2 separate though so perhaps the idiomatic thing to do in java is to keep them separate? i dont have a strong opinion on this one but the decision made now will last a very long time || actually net does have `scheduleperiodic` see here: https://rxcodeplexcom/sourcecontrol/changeset/view/e24677887e1727fb3b5dd614d996aa6d113b3834#rx/net/source/systemreactiveinterfaces/reactive/concurrency/ischedulerperiodiccsimho its useful to avoid recursive scheduling where the schedulers support this directly as well as to do the slightly messy recursive scheduling ourselves for other types of schedulers so that the user doesnt have to || ah interesting thanks for educating me on that || this doesnt look like its been integrated into observable but im going to merge as it looks useful to get this in  the testscheduler especially while interval continues getting work done || great thanks (this still needs a bit of work if/when we do periodic scheduling) || are you okay with me releasing current code on the master branch and then the rest of `interval` coming later?is there anything else about master branch as it stands that should be changed before i release? id like to do so today || thats alright with me || @benjchristensen now the `interval` operators in rxjava and rxnet have different behaviors when the scheduler is `currentthread`in rxnet the following codes``` c#            var o  observableinterval(timespanfrommilliseconds(100) schedulercurrentthread)            otake(5)subscribe(                x > consolewriteline(x)            )            otake(4)subscribe(                x > consolewriteline(x)            )            consolereadline()```output```012340123```in rxjava the following codes``` java            observable<long> o   observableinterval(100 timeunitmilliseconds                    schedulerscurrentthread())            otake(5)subscribe(new action1<long>() {                @override                public void call(long t1) {                    systemoutprintln(t1)                }            })            otake(4)subscribe(new action1<long>() {                @override                public void call(long t1) {                    systemoutprintln(t1)                }            })```output```01234```and the current thread is blocked at the first `subscribe`is it ok or the `interval` operator should not be used with `currentthread`? ||"
1,0,1,0,0,0,1,0,"interval i have attempted to implement the ""interval"" operator (#55) here as far as i can see it seems to work this is based on the quite fresh work on schedulersit doesnt work with the `currentthread` or `newthread` schedulers i guess due to the simple `sleepingaction` it does work with a `scheduledexecutorservice` thoughfor testing this conveniently i also wrote a test scheduler with adjustable timelooking forward to any review comments [rxjava-pull-requests #83](https://netflixosscicloudbeescom/job/rxjava-pull-requests/83/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #84](https://netflixosscicloudbeescom/job/rxjava-pull-requests/84/) successthis pull request looks good || lets consider adding new method to the `scheduler```` javascheduleperiodically(action0 action long initialdelay long period timeunit unit) ```it would allow to leverage `scheduledexecutorservice#scheduleatfixedrate` for the `executorscheduler` for other schedulers we could use recursive action scheduling from pull request #229  || i agree `scheduleperiodically` would be helpful here || @jmhofer do you plan to work on this feature? im thinking about implementing buffer operator #16 and this one will be very helpful for me || ill have a look at it || maybe we should also combine all the longs and units into a timespan class? - it doesnt feel right to always have them as separate parameters || anyone know why net wouldnt have a `scheduleperiodically` concept? if we were to add that it would only really work with `scheduledexecutorservice` and thus most `scheduler` implementations would have to rely upon the generic `scheduledexecutorservice` that ive added in https://githubcom/netflix/rxjava/pull/235 called `genericscheduledexecutorservice`this suggests to me that it isnt the right solution to add another interface method as it seems very tied to a particular implementation cant this be achieved with recursive schedulers which now work after the changes you did in https://githubcom/netflix/rxjava/pull/229? || im curious about this:> it doesnt work with the currentthread or newthread schedulers i guess due to the simple sleepingaction it does work with a scheduledexecutorservice thoughit seems that this operator needs to be async and must default to using something like `schedulersthreadpoolforcomputation()`documentation at msdn (http://msdnmicrosoftcom/en-us/library/hh228911(vvs103)aspx) suggests that this defaults to using a thread-pool scheduler:> the following example code uses the interval operator to generate a sequence of long integers staring at zero each integer in the sequence is generated after the two second period has expired each integer is written to the console window along with the current time to show the period parameter in effect the generation of the integer sequence is scheduled to run on a thread from the net thread pool so the main thread is not blocked and can process the enter key being pressed to stop the intervalperhaps `newthreadscheduler` will work as of https://githubcom/netflix/rxjava/pull/235 because it now uses `genericscheduledexecutorservice` when a delay is passed in instead of `sleepingaction`what happens in net if someone tries to use `immediatescheduler` or `currentthreadscheduler`? anyone have access to net to try that? || > maybe we should also combine all the longs and units into a timespan class? - it doesnt feel right to always have them as separate parametersif were going to consider doing this then we should do it as part of https://githubcom/netflix/rxjava/pull/235 before i release another version since this would change the `schedulers` interfacejava itself always keeps the 2 separate though so perhaps the idiomatic thing to do in java is to keep them separate? i dont have a strong opinion on this one but the decision made now will last a very long time || actually net does have `scheduleperiodic` see here: https://rxcodeplexcom/sourcecontrol/changeset/view/e24677887e1727fb3b5dd614d996aa6d113b3834#rx/net/source/systemreactiveinterfaces/reactive/concurrency/ischedulerperiodiccsimho its useful to avoid recursive scheduling where the schedulers support this directly as well as to do the slightly messy recursive scheduling ourselves for other types of schedulers so that the user doesnt have to || ah interesting thanks for educating me on that || this doesnt look like its been integrated into observable but im going to merge as it looks useful to get this in  the testscheduler especially while interval continues getting work done || great thanks (this still needs a bit of work if/when we do periodic scheduling) || are you okay with me releasing current code on the master branch and then the rest of `interval` coming later?is there anything else about master branch as it stands that should be changed before i release? id like to do so today || thats alright with me || @benjchristensen now the `interval` operators in rxjava and rxnet have different behaviors when the scheduler is `currentthread`in rxnet the following codes``` c#            var o  observableinterval(timespanfrommilliseconds(100) schedulercurrentthread)            otake(5)subscribe(                x > consolewriteline(x)            )            otake(4)subscribe(                x > consolewriteline(x)            )            consolereadline()```output```012340123```in rxjava the following codes``` java            observable<long> o   observableinterval(100 timeunitmilliseconds                    schedulerscurrentthread())            otake(5)subscribe(new action1<long>() {                @override                public void call(long t1) {                    systemoutprintln(t1)                }            })            otake(4)subscribe(new action1<long>() {                @override                public void call(long t1) {                    systemoutprintln(t1)                }            })```output```01234```and the current thread is blocked at the first `subscribe`is it ok or the `interval` operator should not be used with `currentthread`? ||"
1,0,0,0,0,0,1,0,"trying to extend the scheduler interface according to the comments at ive tried to extend the `scheduler` interface according to the discussion at issue #19 if i understand this correctly most of it can be done via the `abstractscheduler`i hope this helps please have a look [rxjava-pull-requests #85](https://netflixosscicloudbeescom/job/rxjava-pull-requests/85/) successthis pull request looks good || awesome looks like it doesnt break a `scheduler` interface i thought about two examples``` java        final scheduler scheduler  schedulerscurrentthread()        observable<integer> obs  observablecreate(new func1<observer<integer> subscription>() {            @override            public subscription call(final observer<integer> observer) {                return schedulerschedule(0 new func2<scheduler integer subscription>() {                    @override                    public subscription call(scheduler scheduler integer i) {                        if (i > 42) {                            observeroncompleted()                            return subscriptionsempty()                        }                        observeronnext(i)                        return schedulerschedule(i + 1 this)                    }                })            }        })        obssubscribe(new observer<integer>() {            @override            public void oncompleted() {                systemoutprintln(""completed"")            }            @override            public void onerror(exception e) {                systemoutprintln(""error"")            }            @override            public void onnext(integer args) {                systemoutprintln(args)            }        })```and``` java        final scheduler scheduler  schedulersthreadpoolforcomputation()        observable<integer> obs  observablecreate(new func1<observer<integer> subscription>() {            @override            public subscription call(final observer<integer> observer) {                return schedulerschedule(new booleansubscription() new func2<scheduler booleansubscription subscription>() {                    @override                    public subscription call(scheduler scheduler booleansubscription cancel) {                        if (cancelisunsubscribed()) {                            observeroncompleted()                            return subscriptionsempty()                        }                        observeronnext(42)                        try {                            threadsleep(1000)                        } catch (interruptedexception e) {                            eprintstacktrace()                        }                        schedulerschedule(cancel this)                        return cancel                    }                })            }        })        subscription subscribe  obssubscribe(new observer<integer>() {            @override            public void oncompleted() {                systemoutprintln(""completed"")            }            @override            public void onerror(exception e) {                systemoutprintln(""error"")            }            @override            public void onnext(integer args) {                systemoutprintln(args)            }        })        threadsleep(10000)        subscribeunsubscribe()        systemoutprintln(""unsubscribe"")        threadsleep(10000)```and they worked well for me || im wondering if the `scheduler` interface really needs all of these overloads?rx has 3 primary methods (the rest are extension methods that look like they do transformations)http://msdnmicrosoftcom/en-us/library/hh211963(vvs103)aspxthus the 2 key ones are:``` java<t> subscription schedule(t state func2<scheduler t subscription> action)<t> subscription schedule(t state func2<scheduler t subscription> action long duetime timeunit unit)```we dont have one with an explicit time to run only relative at this time || it appears the overloads all make sense  but again net is able to use extension methods to make the design much more elegant where only the main 3 are part of the interface and the rest come along for the rideit means we end up with a scheduler/abstractscheduler interface/abstract pairing to make this workshould we just make scheduler an abstract? im very tempted to do so because of the following problems:- adding methods to scheduler will be breaking changes requiring major version increments- people implementing schedulers will basically always have to also extend abstractscheduler or copy/paste all of those method overloadsor should be remove all but the main 3 methods from scheduler and put all the overloads as utility functions on the schedulers class instead?the precedent for using abstract (or concrete) classes instead of interfaces (which net then augments with extension methods) is already done - observable is a concrete class instead of interface for this very reasonall plugins are done as abstracts instead of interfaces for this reason as wellthoughts? || while reviewing and playing with this i considered some changes id like to propose i have submitted another pull request (https://githubcom/netflix/rxjava/pull/235) that builds on top of your work @jmhofer and includes the unit tests from @mairbek i would appreciate your thoughts on it and whether they are beneficial changes or just pedantic || merged manually via https://githubcom/netflix/rxjava/pull/235 || "
1,0,0,0,1,1,1,1,"trying to extend the scheduler interface according to the comments at ive tried to extend the `scheduler` interface according to the discussion at issue #19 if i understand this correctly most of it can be done via the `abstractscheduler`i hope this helps please have a look [rxjava-pull-requests #85](https://netflixosscicloudbeescom/job/rxjava-pull-requests/85/) successthis pull request looks good || awesome looks like it doesnt break a `scheduler` interface i thought about two examples``` java        final scheduler scheduler  schedulerscurrentthread()        observable<integer> obs  observablecreate(new func1<observer<integer> subscription>() {            @override            public subscription call(final observer<integer> observer) {                return schedulerschedule(0 new func2<scheduler integer subscription>() {                    @override                    public subscription call(scheduler scheduler integer i) {                        if (i > 42) {                            observeroncompleted()                            return subscriptionsempty()                        }                        observeronnext(i)                        return schedulerschedule(i + 1 this)                    }                })            }        })        obssubscribe(new observer<integer>() {            @override            public void oncompleted() {                systemoutprintln(""completed"")            }            @override            public void onerror(exception e) {                systemoutprintln(""error"")            }            @override            public void onnext(integer args) {                systemoutprintln(args)            }        })```and``` java        final scheduler scheduler  schedulersthreadpoolforcomputation()        observable<integer> obs  observablecreate(new func1<observer<integer> subscription>() {            @override            public subscription call(final observer<integer> observer) {                return schedulerschedule(new booleansubscription() new func2<scheduler booleansubscription subscription>() {                    @override                    public subscription call(scheduler scheduler booleansubscription cancel) {                        if (cancelisunsubscribed()) {                            observeroncompleted()                            return subscriptionsempty()                        }                        observeronnext(42)                        try {                            threadsleep(1000)                        } catch (interruptedexception e) {                            eprintstacktrace()                        }                        schedulerschedule(cancel this)                        return cancel                    }                })            }        })        subscription subscribe  obssubscribe(new observer<integer>() {            @override            public void oncompleted() {                systemoutprintln(""completed"")            }            @override            public void onerror(exception e) {                systemoutprintln(""error"")            }            @override            public void onnext(integer args) {                systemoutprintln(args)            }        })        threadsleep(10000)        subscribeunsubscribe()        systemoutprintln(""unsubscribe"")        threadsleep(10000)```and they worked well for me || im wondering if the `scheduler` interface really needs all of these overloads?rx has 3 primary methods (the rest are extension methods that look like they do transformations)http://msdnmicrosoftcom/en-us/library/hh211963(vvs103)aspxthus the 2 key ones are:``` java<t> subscription schedule(t state func2<scheduler t subscription> action)<t> subscription schedule(t state func2<scheduler t subscription> action long duetime timeunit unit)```we dont have one with an explicit time to run only relative at this time || it appears the overloads all make sense  but again net is able to use extension methods to make the design much more elegant where only the main 3 are part of the interface and the rest come along for the rideit means we end up with a scheduler/abstractscheduler interface/abstract pairing to make this workshould we just make scheduler an abstract? im very tempted to do so because of the following problems:- adding methods to scheduler will be breaking changes requiring major version increments- people implementing schedulers will basically always have to also extend abstractscheduler or copy/paste all of those method overloadsor should be remove all but the main 3 methods from scheduler and put all the overloads as utility functions on the schedulers class instead?the precedent for using abstract (or concrete) classes instead of interfaces (which net then augments with extension methods) is already done - observable is a concrete class instead of interface for this very reasonall plugins are done as abstracts instead of interfaces for this reason as wellthoughts? || while reviewing and playing with this i considered some changes id like to propose i have submitted another pull request (https://githubcom/netflix/rxjava/pull/235) that builds on top of your work @jmhofer and includes the unit tests from @mairbek i would appreciate your thoughts on it and whether they are beneficial changes or just pedantic || merged manually via https://githubcom/netflix/rxjava/pull/235 || "
1,0,0,1,1,1,1,1,implemented sample operation now that `operationinterval` is in `operationsample` (see  #74) was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation [rxjava-pull-requests #108](https://netflixosscicloudbeescom/job/rxjava-pull-requests/108/) successthis pull request looks good || we want methods on `observable` dont we? || sure i just completely forgot about that ill add them || [rxjava-pull-requests #113](https://netflixosscicloudbeescom/job/rxjava-pull-requests/113/) successthis pull request looks good ||
1,0,1,1,0,1,1,1,timestamp operation straightforward implementation of issue #93 based on `operationmap` (without the scheduler version as `map` doesnt take a scheduler yet either) [rxjava-pull-requests #109](https://netflixosscicloudbeescom/job/rxjava-pull-requests/109/) failurelooks like theres a problem with this pull request || the failing test has nothing to do with my changes - i guess its a sporadic test problem as theres not much difference between 10 and 30 milliseconds || this should also be added to `observable` shouldnt it? || [rxjava-pull-requests #112](https://netflixosscicloudbeescom/job/rxjava-pull-requests/112/) failurelooks like theres a problem with this pull request || my eclipse configuration also automatically added a lot of `@override` annotations i hope you dont mind otherwise i can remove them again of course || the @override annotations are fine - they are standard java they may be missing in some places because this project started with java 5 compliance and it had the annotations in less places than java 6  ||
1,0,1,1,1,1,1,1,improved scan reduce aggregate `scan` is currently restricted to accumulators of type `func2<t t t>` where `func2<r t r>` would be possible for initial values of type `r` this pull request tries to fix this by generalizing the `scan` implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized `reduce` tooalso `aggregate` is added as an alias for `reduce` (see #20) [rxjava-pull-requests #120](https://netflixosscicloudbeescom/job/rxjava-pull-requests/120/) successthis pull request looks good || [rxjava-pull-requests #121](https://netflixosscicloudbeescom/job/rxjava-pull-requests/121/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #122](https://netflixosscicloudbeescom/job/rxjava-pull-requests/122/) successthis pull request looks good || thank you for working on this  - `observable` had not had any changes done to it to expose the new `reduce` or `scan` methods so that should probably be added to this pull request- what names should we use on the public api?rxnet never used `reduce` it uses `aggregate` others call it fold accumulate etc (more here http://enwikipediaorg/wiki/fold_(higher-order_function))java 8 is using the `reduce` and `collector` names (http://downloadjavanet/lambda/b74/docs/api/java/util/stream/streamhtml) what names should we use and what aliases if any should we include in `observable`? || about `observable` - hmm seems that the changes got lost somehow ill go dig them out agai d about the names to use: imho rxjava should have the java 8 names as well as the orginial rxnet names || agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other? || ive had a look at the java 8 stream operations to me it looks like theres no explicit `scan` equivalent in java 8 or am i missing something?`collect` seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias `reduce` with `aggregate` and `scan` stays unaliased if thats okay  || that works for me we can always add more aliases if java 8 adds a `scan` equivalent || i plan on doing a release tomorrow (about 12 hours from now) if you want to try and have this ready for that || [rxjava-pull-requests #131](https://netflixosscicloudbeescom/job/rxjava-pull-requests/131/) successthis pull request looks good || as soon as this is in my `swing` branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this :) ||
1,0,0,0,0,0,1,0,"implemented the any operator this implements the operator `any` from #24 in all two variantshowever i encountered two problemsupdated: the online document http://msdnmicrosoftcom/en-us/library/hh211993(vvs103)aspx is wrong see my later discussio other question is if i add the `any` method to `rxobservable<t>` some unit tests will fail as the method `any` in  `rxobservable<t>` overrides the method `orgmockitomatchersany(javalangclass<t>)` in some unit tests (eg `rxsubjectsreplaysubject<t>`) do i need to use another method name or just modify the unit tests? now the `any` methods in `rxobservable<t>` are commented outthanks [rxjava-pull-requests #284](https://netflixosscicloudbeescom/job/rxjava-pull-requests/284/) successthis pull request looks good || i havent looked at the first question yet but on the second one well likely need to stop importing `orgmockitomatchers*` and call it directly `orgmockitomatchersany` || sorry that i missed the keyword `empty` in my description the first question is im not sure how to handle an `empty` observable sequence || [rxjava-pull-requests #285](https://netflixosscicloudbeescom/job/rxjava-pull-requests/285/) aborted || i tested the c# `any` today the environment is vs2010 net 40i found the description in my vs is `determines whether any element of an observable sequence satisfies a condition` this is totally different from the online document http://msdnmicrosoftcom/en-us/library/hh211993(vvs103)aspxi always did some tests for `any` here is the code:<pre>using systemusing systemcollectionsgenericusing systemlinqusing systemtextusing systemreactivelinqnamespace consoleapplication1{    class program    {        static void main(string[] args)        {            var any  observableempty<int>()any()            anysubscribe(                x > consolewriteline(""subscriber got "" + x) // subscriber got false            )            any  observablerange(1 5)any()            anysubscribe(                x > consolewriteline(""subscriber got "" + x) // subscriber got true            )                        any  observableempty<int>()any(                x > true            )            anysubscribe(                x > consolewriteline(""subscriber got "" + x) // subscriber got false            )            any  observablerange(1 5)any(                x > x > 3            )            anysubscribe(                x > consolewriteline(""subscriber got "" + x) // subscriber got true            )            any  observablerange(1 5)any(                x > x > 5            )            anysubscribe(                x > consolewriteline(""subscriber got "" + x) // subscriber got false            )            consolereadline()        }    }}</pre>here is the output:<pre>subscriber got falsesubscriber got truesubscriber got falsesubscriber got truesubscriber got false</pre>in summary  - if an observable sequence is empty `any` emits `false`- if one element of an observable sequence satisfies the condition `any` emits `true`- if all elements of an observable sequence do not satisfy the condition `any` emits `false` || i have implemented the correct any operator please take a look thanks! || [rxjava-pull-requests #286](https://netflixosscicloudbeescom/job/rxjava-pull-requests/286/) aborted || in scala we will probably use `isempty` instead of `any()` (negated) and `exists(somepredicate)` instead of `any(somepredicate)` you could use these names also in java to avoid confusion and name conflicts || @zsxwing i dont have time tonight but will definitely get to this in the near future thank you for getting involved! || "
1,0,1,1,0,1,1,1,implemented synchronize with lock hii implemented #84 to support that sending a lock to the `synchronize` operatori also found that there was a issue that `testmultithreadedwithnpe` and `testmultithreadedwithnpeinmiddle` might fail in some special situation when `onerror` is invoked before any `onnext` the last statement `assertequals(1 busyobservermaxconcurrentthreadsget())` in these methods will fail i also fixed this issue in the pull request [rxjava-pull-requests #313](https://netflixosscicloudbeescom/job/rxjava-pull-requests/313/) aborted || looks good thank you! ||
1,1,0,1,1,1,1,1,implemented the ignoreelements operator hii implemented the `ignoreelements` operator #54 please take a look thanks [rxjava-pull-requests #333](https://netflixosscicloudbeescom/job/rxjava-pull-requests/333/) successthis pull request looks good || can you rebase this with the changes to master so it can be cleanly merged again? with all the other changes this no longer cleanly mergesthank you @zsxwing for this and all the other pull requests i really appreciate your involvement in the project || i rebased the pull request now it should be able to merge to master directly || [rxjava-pull-requests #336](https://netflixosscicloudbeescom/job/rxjava-pull-requests/336/) successthis pull request looks good || [rxjava-pull-requests #337](https://netflixosscicloudbeescom/job/rxjava-pull-requests/337/) successthis pull request looks good ||
1,0,0,0,1,1,1,1,implemented the timeinterval operator hi this pr implemented the `timeinterval` operator #90 please take a look thanks [rxjava-pull-requests #370](https://netflixosscicloudbeescom/job/rxjava-pull-requests/370/) failurelooks like theres a problem with this pull request || looks good thanks @zsxwing  ||
1,0,0,0,1,1,1,1,implemented the amb operator hi this pr implemented the `amb` operator #22 i used varargs to support the array version and first-second version in one method so in my pr there are only two variants [rxjava-pull-requests #379](https://netflixosscicloudbeescom/job/rxjava-pull-requests/379/) failurelooks like theres a problem with this pull request || you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings (weve already had this with other operators) instead define an overload for 2 args 3 args 4 args  || yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs || [rxjava-pull-requests #382](https://netflixosscicloudbeescom/job/rxjava-pull-requests/382/) failurelooks like theres a problem with this pull request || thank you ||
1,0,0,0,0,0,1,0,"implemented the ""operator: min and minby"" and ""operator: max and maxby"" hi this pr implemented the `operator: min and minby` #63 and `operator: max and maxby` #61 every operator has 2 variants one for `comparable` another for `comparator` please take a look thanks! [rxjava-pull-requests #404](https://netflixosscicloudbeescom/job/rxjava-pull-requests/404/) successthis pull request looks good || `operationmin` and `operationmax` are exactly the same except that `<` and `>` are swapped cant you implement one in terms of the other? or create a general one which takes +1 or -1 to know whether we want `<` or `>`? || is the following solution ok?``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source -1)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source 1)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final long flag) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (flag * acccompareto(value) > 0) {                    return acc                }                return value            }        })    }````flag` must be `long` as `integermin_value  -1 * integermin_value` but we will have one multiplication for every `compareto`another solution is:``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source true)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source false)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final boolean ismin) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (ismin) {                    if (acccompareto(value) < 0) {                        return acc                    }                } else {                    if (acccompareto(value) > 0) {                        return acc                    }                }                return value            }        })    }```@samuelgruetter  do you have other better solution? || i like both of these two solutions with a slight preference for the first one -)nice catch with integermin_value :-)a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue: what if there are several minimal elements? does min return the first of them the last of them or is it unspecified? this should be documented || @samuelgruetter  thanks for your review i used the +1/-1 way to implement it and also updated the document || [rxjava-pull-requests #407](https://netflixosscicloudbeescom/job/rxjava-pull-requests/407/) successthis pull request looks good || looks good @zsxwing and thanks @samuelgruetter for the reviewsome nice use of generics in those signatures! ||"
1,0,0,0,0,0,1,0,"implemented the ""operator: min and minby"" and ""operator: max and maxby"" hi this pr implemented the `operator: min and minby` #63 and `operator: max and maxby` #61 every operator has 2 variants one for `comparable` another for `comparator` please take a look thanks! [rxjava-pull-requests #404](https://netflixosscicloudbeescom/job/rxjava-pull-requests/404/) successthis pull request looks good || `operationmin` and `operationmax` are exactly the same except that `<` and `>` are swapped cant you implement one in terms of the other? or create a general one which takes +1 or -1 to know whether we want `<` or `>`? || is the following solution ok?``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source -1)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source 1)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final long flag) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (flag * acccompareto(value) > 0) {                    return acc                }                return value            }        })    }````flag` must be `long` as `integermin_value  -1 * integermin_value` but we will have one multiplication for every `compareto`another solution is:``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source true)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source false)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final boolean ismin) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (ismin) {                    if (acccompareto(value) < 0) {                        return acc                    }                } else {                    if (acccompareto(value) > 0) {                        return acc                    }                }                return value            }        })    }```@samuelgruetter  do you have other better solution? || i like both of these two solutions with a slight preference for the first one -)nice catch with integermin_value :-)a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue: what if there are several minimal elements? does min return the first of them the last of them or is it unspecified? this should be documented || @samuelgruetter  thanks for your review i used the +1/-1 way to implement it and also updated the document || [rxjava-pull-requests #407](https://netflixosscicloudbeescom/job/rxjava-pull-requests/407/) successthis pull request looks good || looks good @zsxwing and thanks @samuelgruetter for the reviewsome nice use of generics in those signatures! ||"
1,0,0,0,0,0,1,0,bugfix: emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the `average` issue in #423 if an observable is empty `average` will emit an `illegalargumentexception` instead of `arithmeticexception` thanks! [rxjava-pull-requests #405](https://netflixosscicloudbeescom/job/rxjava-pull-requests/405/) successthis pull request looks good ||
1,0,0,1,1,1,1,1,bugfix: emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the `average` issue in #423 if an observable is empty `average` will emit an `illegalargumentexception` instead of `arithmeticexception` thanks! [rxjava-pull-requests #405](https://netflixosscicloudbeescom/job/rxjava-pull-requests/405/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,add contravariant for min and max hi this pr added  contravariant for min and max mentioned in #494 [rxjava-pull-requests #419](https://netflixosscicloudbeescom/job/rxjava-pull-requests/419/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,operators tomap and tomultimap again issue #96 and issue #97tomap: 3 overloadstomultimap: 4 overloadsadded groovy test to verify overloading [rxjava-pull-requests #438](https://netflixosscicloudbeescom/job/rxjava-pull-requests/438/) successthis pull request looks good || ah  this cant merge anymore because of other commits (probably the join operator on your other pr) can you rebase? ||
1,0,0,0,0,0,1,0,operation longcount issue #60straightforward version of the regular count() (however i would have implemented it differently so the constant boxing-unboxing could be avoided) [rxjava-pull-requests #524](https://netflixosscicloudbeescom/job/rxjava-pull-requests/524/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,"lock-free subscriptions - uniform naming of inner components: issue #592- lock-free approach to avoid deadlocks: issue #577- serialsubscriptionisunsubscribe added: issue #590remarks:- imo an unsubscribed single/serial/multiple subscription return subscriptionsempty() instead of null so unless the user put a null in there he/she shouldnt worry about null- there was a concurrency bug in @jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal -> mutate transitions it cannot return subscriptionsempty() since the rx contract is to return null also returning empty() when unsubscribed is ambiguous: has it been unsubscribed or has empty() been set by the client code ? || [rxjava-pull-requests #527](https://netflixosscicloudbeescom/job/rxjava-pull-requests/527/) successthis pull request looks good || good that you fixed the race condition in multipleassignementsubscription as well as the contract (it was unsubscribing the previous subscription although it shouldnt) || ive checked the rxnet sources:- singleassignmentdisposable returns defaultdisposableinstance- serialdisposabe returns null- refcountdisposable returns disposableempty- scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null? checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why `isunsubscribed()` is to be used to check the state || > it cannot return subscriptionsempty() since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real ""state"" is is isunsubscribed (and the properties might as well be write-only) || i think the disposable / subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the ""least astonishment"" principle || "
1,0,1,0,0,0,1,0,"replay additional overloads issue #71- added several overloads of the `replay` operator:   - limited buffer limited time window buffer+time   - scheduler overloads   - versions which perform a projection before the replay- added missing `multicast` overload [rxjava-pull-requests #548](https://netflixosscicloudbeescom/job/rxjava-pull-requests/548/) successthis pull request looks good || could you give me an explanation of what the ""selector"" does and why itsuseful and also what the version of replay that uses a subject factory isall about?  the javadocs are opaque to me and the msdn docs / intro-to-rxarent helpful eitheron thu dec 12 2013 at 12:53 pm cloudbees pull request builder plugin <notifications@githubcom> wrote:> rxjava-pull-requests #548https://netflixosscicloudbeescom/job/rxjava-pull-requests/548/success> this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/612#issuecomment-30460606> ## david m grossplp consulting || im not sure myself i think it allows transforming the subjects output without the danger of resubscribing to the uplink source i couldnt find any tests for them in the rxnet sources || "
1,0,0,0,0,0,1,0,buffer with observable boundary mentined in issue #653- 1 overload where the user can specify the capacity of the internal buffer [rxjava-pull-requests #647](https://netflixosscicloudbeescom/job/rxjava-pull-requests/647/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,zip with iterable removed old aggregator version and updated tests listed in #653 [rxjava-pull-requests #656](https://netflixosscicloudbeescom/job/rxjava-pull-requests/656/) successthis pull request looks good || these are instance methods none of our `zip` operators are at the instance level i would have thought wed add the `zip` overloads with `iterable` to match the existing static ones? || i went according to #653 where there was 2 zip overloads without strike-through || agreed on the overloads but they should be static correct? || no the intention was to chain them to an existing observable:``` javaobservablefrom(1 2 3)zip(arraysaslist(4 5 6) (a b) -> a * b)``` || makes sense wasnt sure as it was different than all the other zip methods thanks for confirming  ||
1,0,0,0,0,0,1,0,zip with iterable removed old aggregator version and updated tests listed in #653 [rxjava-pull-requests #656](https://netflixosscicloudbeescom/job/rxjava-pull-requests/656/) successthis pull request looks good || these are instance methods none of our `zip` operators are at the instance level i would have thought wed add the `zip` overloads with `iterable` to match the existing static ones? || i went according to #653 where there was 2 zip overloads without strike-through || agreed on the overloads but they should be static correct? || no the intention was to chain them to an existing observable:``` javaobservablefrom(1 2 3)zip(arraysaslist(4 5 6) (a b) -> a * b)``` || makes sense wasnt sure as it was different than all the other zip methods thanks for confirming  ||
1,0,0,0,0,0,1,0,issue #799 - commenting out the call to attachcallingthreadstack when co nstructing a compositeexception should i merge this manually into 017? ||
1,0,0,0,0,0,1,0,fixing the generics for merge and lift ive tracked down to two problems #858 the first is that lift wasnt quite right i changed the lift argument from `operator<r t>` to `operator<? extends r ? super t>`  unfortunately java wont let us hide that away in the `operator` class so we have to redeclare that everywhere in the debug hooks but its still better than the alternative of having to use the full `func1<? extends subscriber<? super r> ? super subscriber<? super t>>` everywherethe second problem was in the return type of merge `observable<t>`  because of operators like `merge(observable<? extends t> t1 observable<? extends t> t2)` the only thing that can be said for the return type is that it is also `observable<? extends t>` but at the moment it is returning `observable<t>`this pull request changes all of them and leads to some silly return values like```observable<string> a bobservable<? extends string> x  merge(a b)``` [rxjava-pull-requests #784](https://netflixosscicloudbeescom/job/rxjava-pull-requests/784/) failurelooks like theres a problem with this pull request || we should avoid return types such as `a<? extends b>` || [rxjava-pull-requests #787](https://netflixosscicloudbeescom/job/rxjava-pull-requests/787/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #788](https://netflixosscicloudbeescom/job/rxjava-pull-requests/788/) successthis pull request looks good || @akarnokd you were right the return type change wasnt necessary  ive reverted and rebased the branch to clean out all the mistakes || [rxjava-pull-requests #789](https://netflixosscicloudbeescom/job/rxjava-pull-requests/789/) successthis pull request looks good || i almost did a pr on this when i saw you now did the same thing as i but was it necessary to change the debugs as well? || yes there is a plugin hook inside lift that the debug plugin implements and spreads from there ||
1,0,0,0,1,1,1,1,fixing the generics for merge and lift ive tracked down to two problems #858 the first is that lift wasnt quite right i changed the lift argument from `operator<r t>` to `operator<? extends r ? super t>`  unfortunately java wont let us hide that away in the `operator` class so we have to redeclare that everywhere in the debug hooks but its still better than the alternative of having to use the full `func1<? extends subscriber<? super r> ? super subscriber<? super t>>` everywherethe second problem was in the return type of merge `observable<t>`  because of operators like `merge(observable<? extends t> t1 observable<? extends t> t2)` the only thing that can be said for the return type is that it is also `observable<? extends t>` but at the moment it is returning `observable<t>`this pull request changes all of them and leads to some silly return values like```observable<string> a bobservable<? extends string> x  merge(a b)``` [rxjava-pull-requests #784](https://netflixosscicloudbeescom/job/rxjava-pull-requests/784/) failurelooks like theres a problem with this pull request || we should avoid return types such as `a<? extends b>` || [rxjava-pull-requests #787](https://netflixosscicloudbeescom/job/rxjava-pull-requests/787/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #788](https://netflixosscicloudbeescom/job/rxjava-pull-requests/788/) successthis pull request looks good || @akarnokd you were right the return type change wasnt necessary  ive reverted and rebased the branch to clean out all the mistakes || [rxjava-pull-requests #789](https://netflixosscicloudbeescom/job/rxjava-pull-requests/789/) successthis pull request looks good || i almost did a pr on this when i saw you now did the same thing as i but was it necessary to change the debugs as well? || yes there is a plugin hook inside lift that the debug plugin implements and spreads from there ||
1,0,0,0,0,0,1,0,fixed replaysubject leak fix for issue #939 [rxjava-pull-requests #889](https://netflixosscicloudbeescom/job/rxjava-pull-requests/889/) successthis pull request looks good || i can confirm this fixes #939 for me thanks @akarnokd !this might in fact be the final nail in the coffin for any workarounds we used on android to prevent activities from leaking this is great || @benjchristensen do you think we could get this in for 0171 that would be fantastic it would simplify reasoning about requirements for android operators a lot since the use of `cache` and `replay` is quite common on android and some design decisions for `operatorobservefromandroidcomponent` were made purely due to the existence of this bug (no one actually thought to question the correctness of the underlying operator back then hah) ||
1,0,0,0,1,1,1,1,bugfix: chain subscription in timeoutsubscriber and serializedsubscriber this pr chains subscription in timeoutsubscriber  and serializedsubscriber found by @rbramw #951 thanks for your unit tests @rbramw [rxjava-pull-requests #905](https://netflixosscicloudbeescom/job/rxjava-pull-requests/905/) failurelooks like theres a problem with this pull request || i have no idea why `rxoperatorsoperationparallelmergetesttestnumberofthreadsonscheduledmerge` failed in my local machine it fails sometimes is it nondeterministic? || rebased || [rxjava-pull-requests #915](https://netflixosscicloudbeescom/job/rxjava-pull-requests/915/) successthis pull request looks good || thank you ||
1,0,0,0,0,0,1,0,operatordematerialize operator dematerializeissue #1060two notes:- since the dematerialize() is an instance method there is no correct type parametrization for the operator therefore i just used a raw version in the call- the original dematerialize could send out two oncompleted or an onerror followed by an oncompleted because the materialize() always adds an oncompleted after the raw events this affected operators due to unsafesubscribe this new version ensures this doesnt happen [rxjava-pull-requests #994](https://netflixosscicloudbeescom/job/rxjava-pull-requests/994/) successthis pull request looks good ||
1,0,0,0,1,1,1,1,operatordistinct operator distinctissue #1060i didnt port the variant with the custom key comparator because it has been decided to rely on `objectequals` and there were not exposed anyway [rxjava-pull-requests #995](https://netflixosscicloudbeescom/job/rxjava-pull-requests/995/) successthis pull request looks good ||
1,0,0,1,1,1,1,1,operatorgroupjoin operator groupjoinfor issue #1060maybe this could be moved to the new joins [rxjava-pull-requests #1006](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1006/) failurelooks like theres a problem with this pull request || is this better associated with rxjava-joins? ||
1,0,0,1,1,1,1,1,operatorsequenceequal operator sequenceequal#1060lightened the operator but note that notificationlite escaping an operator may cause undesired effects in other operators relying on notificationlite as well [rxjava-pull-requests #1032](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1032/) successthis pull request looks good ||
1,0,0,0,1,1,1,1,manual merge of several prs merging many prs that were conflictingheroic work by @akarnokd and @zsxwing on #1060 all unit tests are passing on my machine going to let this bake a while before a release other prs on still on their way  
1,0,0,0,0,0,1,0,add `replay` and `multicast` variants to rxscala this pr has some breaking changes:- change `def multicast[r >: t](subject: rxlangscalasubject[r]): (() > subscription observable[r])` to `def multicast[r >: t](subject: rxlangscalasubject[r]): connectableobservable[r]`- change `def replay: (() > subscription observable[t])` to `def replay: connectableobservable[t]`- remove `observableapply(int)`so its better to merge it at the next major release#1152 #1153/cc @headinthebox @samuelgruetter [rxjava-pull-requests #1072](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1072/) successthis pull request looks good || id like someone with better scala skills that me to review this please || ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable || [rxjava-pull-requests #1081](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1081/) successthis pull request looks good || [rxjava-pull-requests #1087](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1087/) successthis pull request looks good || is this reviewed and ready to go? it is conflicting against master so can you please rebase? || this is also conflicting against #1178 i would like to rebase it after #1178 is merged to master || waiting until #1210 is merged || already merged || [rxjava-pull-requests #1129](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1129/) successthis pull request looks good || should this wait until were ready to do 019? || i think this one can be merged since #1188 has already broken the api @headinthebox @samuelgruetter  do you mind it? || go for it ||
1,0,0,0,1,1,1,1,behavior subject time gap fix 2 based on discussions in #1181 ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue #658 and #1184a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach [rxjava-pull-requests #1095](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1095/) failurelooks like theres a problem with this pull request || wow this is quite the change :-) i need fresher eyes on this one so will come back to it thank you very much for tackling this! || this is non-trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for `behaviorsubject` and sharing the logic across all of the `subject` implsvery nice work ||
1,0,0,0,0,0,1,0,"swingscheduler: allow negative schedule fix for issue #1193 the new `scheduleperiodic` may calculate negative delay times if the next task was already due this change will allow negative timing on the swing scheduler indicating an immediate schedule [rxjava-pull-requests #1106](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1106/) failurelooks like theres a problem with this pull request || i suggest adding some comments in the `schedulerschedule` and `schedulescheduleperiodically` about negative timing eg ""negative delay time should be regarded as 0"" it would be helpful for anyone who wants to implement special `scheduler` || ive added extra comments || [rxjava-pull-requests #1109](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1109/) failurelooks like theres a problem with this pull request || "
1,0,0,1,0,1,1,0,executorscheduler to wrap an executor for issue #1219 (and #1206)this implementation should conform with the scheduler contract except it is not possible to avoid thread-hopping (dont worry the tasks execute serially but maybe not on the same physical thread)few open improvement possibilities:- usage of `mpsclinkedqueue` once available- a better performing subscription container for this kind of queue-drain task tracking instead of `compositesubscription`- ability to remove a `subscription` from a `compositesubscription` without it calling unsubscribe on the removed subscription á la `multipleassignmentsubscriptionset()` [rxjava-pull-requests #1170](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1170/) successthis pull request looks good || thanks @akarnokd for this looks good for a first cut the trade-offs (thread hopping) are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later ||
1,0,0,0,0,0,1,0,rename some operator* classes to onsubscribe* as per #1270 see discussion in issue #1270 numerous classes in the `rxoperator` package are not implementations of `operator` but are actually implementations of `onsubscribe` the classes have been renamed in this pull requestexcuse me not squashing commits looked complicated after doing a pull from upstream in the middle [rxjava-pull-requests #1187](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1187/) successthis pull request looks good ||
1,0,0,1,0,1,1,1,rename some operator* classes to onsubscribe* as per #1270 see discussion in issue #1270 numerous classes in the `rxoperator` package are not implementations of `operator` but are actually implementations of `onsubscribe` the classes have been renamed in this pull requestexcuse me not squashing commits looked complicated after doing a pull from upstream in the middle [rxjava-pull-requests #1187](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1187/) successthis pull request looks good ||
1,0,0,0,0,1,1,1,allow use of the returned subscription to cancel periodic scheduling the documentation for scheduleperiodically indicates that the returnedsubscription can be used to unsubscribe from the periodic action or tounschedule it if it has not been scheduled yet that was the case onlybefore the first action took place and it was then impossible tounsubscribe using the given subscription although unsubscribing theworker did workthis fixes #1344 [rxjava-pull-requests #1257](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1257/) successthis pull request looks good || this new version contains a fixed fix by @akarnokd || [rxjava-pull-requests #1258](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1258/) successthis pull request looks good || thank you ||
1,0,0,0,0,0,1,0,allow use of the returned subscription to cancel periodic scheduling the documentation for scheduleperiodically indicates that the returnedsubscription can be used to unsubscribe from the periodic action or tounschedule it if it has not been scheduled yet that was the case onlybefore the first action took place and it was then impossible tounsubscribe using the given subscription although unsubscribing theworker did workthis fixes #1344 [rxjava-pull-requests #1257](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1257/) successthis pull request looks good || this new version contains a fixed fix by @akarnokd || [rxjava-pull-requests #1258](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1258/) successthis pull request looks good || thank you ||
0,0,0,0,0,0,1,0,"fix the bug that flatmap swallows onerrornotimplementedexception fixed #1365not sure if any other place will swallow `onerrornotimplementedexception` or the fatal errors [rxjava-pull-requests #1292](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1292/) successthis pull request looks good || [rxjava-pull-requests #1293](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1293/) successthis pull request looks good || hi allim new here so i may be missing something but im afraid that this issue should not be closed just yetindeed it looks like there is still a problem if there is more than one flatmap in the chainhere is a unit test to reproduce the bug (i used the previous unit test that was added as part of this bugfix and simply added an additional flatmap stage) :```    @test(expected  onerrornotimplementedexceptionclass)    public void testsubscribewithoutonerror() {        observablejust(""a"" ""b"")        flatmap(s -> observablejust(s + ""1"" s + ""2""))        flatmap(s -> observableerror(new exception(""test"")))        foreach(systemout::println)    }```the output i get is nothing and no error eithershould i submit a new issue or can you reopen this one?thanks! || think the issue still exists there needs to be clear functionality by which exception can be cleanly trapped and rethrown if needed(user preference) to upper layersthanks || "
1,0,0,0,0,0,1,0,"fix the bug that flatmap swallows onerrornotimplementedexception fixed #1365not sure if any other place will swallow `onerrornotimplementedexception` or the fatal errors [rxjava-pull-requests #1292](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1292/) successthis pull request looks good || [rxjava-pull-requests #1293](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1293/) successthis pull request looks good || hi allim new here so i may be missing something but im afraid that this issue should not be closed just yetindeed it looks like there is still a problem if there is more than one flatmap in the chainhere is a unit test to reproduce the bug (i used the previous unit test that was added as part of this bugfix and simply added an additional flatmap stage) :```    @test(expected  onerrornotimplementedexceptionclass)    public void testsubscribewithoutonerror() {        observablejust(""a"" ""b"")        flatmap(s -> observablejust(s + ""1"" s + ""2""))        flatmap(s -> observableerror(new exception(""test"")))        foreach(systemout::println)    }```the output i get is nothing and no error eithershould i submit a new issue or can you reopen this one?thanks! || think the issue still exists there needs to be clear functionality by which exception can be cleanly trapped and rethrown if needed(user preference) to upper layersthanks || "
1,0,0,1,0,0,1,0,more consistent hooks for scheduler plugins  this is a rework of #1514 - deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault (i think these names are confusing)- added rxjavaschedulershook- ability to override entire schedulers from scratch- ability to decorate action0 before submission to schedulerthe main change from #1514 is the decoration of action0 instead of runnable  action0 is an improvement as all schedulers must handle these whereas not all schedulers handle runnables [rxjava-pull-requests #1473](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1473/) successthis pull request looks good || reviewed with @benjchristensen and merging ||
1,0,0,0,1,1,1,1,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in #1580 [rxjava-pull-requests #1510](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1510/) successthis pull request looks good || [rxjava-pull-requests #1511](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1511/) successthis pull request looks good ||
1,0,0,0,0,1,1,1,emptyobserver and testobserver - remove `emptyobserver` as it was confusing compared to `observersempty()` (fixes #1741)- make `testobserver` not throw `onerrornotimplemented` if a delegate is not provided (fixes #1571)  
1,0,0,0,1,1,1,1,emptyobserver and testobserver - remove `emptyobserver` as it was confusing compared to `observersempty()` (fixes #1741)- make `testobserver` not throw `onerrornotimplemented` if a delegate is not provided (fixes #1571)  
1,0,0,0,0,1,1,0,fixed test issuing non-serialized messages to the subject should resolve the test failure of #1972 when the main part of the test succeded an oncompleted was sent out from the main thread which was not serialized in respect to the onnext(1) issued from the worker thread therefore two replay was attempted sometimes at first the caughtup was seen false the replay was entered but the next instruction cleared the index causing the illegalstateexception failed in https://travis-ciorg/reactivex/rxjava/builds/44421756```rxsubjectsreplaysubjectboundedconcurrencytest > testreplaysubjectemissionsubscriptionrace failed    javalangnullpointerexception        at rxsubjectsreplaysubject$boundedstatereplayobserverfromindex(replaysubjectjava:628)        at rxsubjectsreplaysubject$boundedstatereplayobserver(replaysubjectjava:619)        at rxsubjectsreplaysubjectcaughtup(replaysubjectjava:430)        at rxsubjectsreplaysubjectoncompleted(replaysubjectjava:410)        at rxsubjectsreplaysubjectboundedconcurrencytesttestreplaysubjectemissionsubscriptionrace(replaysubjectboundedconcurrencytestjava:399)``` || thanks! forgot about the other test class ||
1,0,1,0,0,1,1,1,subscriberrequest should throw exception if negative request made as per discussion in #1956 and #2545 making a call to `subscriberrequest(n)` with negative n should throw an `illegalargumentexception`includes unit test i think the iae should be mentioned in requests javadoc || javadoc added || great! ||
1,0,0,0,0,0,1,0,optimized isunsubscribed check extracted isunsubscribed optimization from #2603```benchmark                                   (size)   mode   samples          1x        2603    rscomputationschedulerperfobserveon           1  thrpt         5   104110926  104707286rscomputationschedulerperfobserveon          10  thrpt         5   100723402  105825148rscomputationschedulerperfobserveon         100  thrpt         5    24609763   65571461rscomputationschedulerperfobserveon        1000  thrpt         5     3212434   13020027rscomputationschedulerperfobserveon       10000  thrpt         5      955002    1555493  rscomputationschedulerperfobserveon      100000  thrpt         5       96628     160218  rscomputationschedulerperfobserveon     1000000  thrpt         5        9508      16559  rscomputationschedulerperfsubscribeon         1  thrpt         5   114212000  114485516  rscomputationschedulerperfsubscribeon        10  thrpt         5   112376809  112270024  rscomputationschedulerperfsubscribeon       100  thrpt         5    88433002  104240739  rscomputationschedulerperfsubscribeon      1000  thrpt         5    31503640   64446984  rscomputationschedulerperfsubscribeon     10000  thrpt         5     3932988    8200048rscomputationschedulerperfsubscribeon    100000  thrpt         5      437626    1439069rscomputationschedulerperfsubscribeon   1000000  thrpt         5       43104     146385``` nice improvement  ||
1,0,0,0,0,0,1,0,observeon throughput enhancements squashed commits of #2773---further optimizations to `observeon`- using spscarrayqueue directly in observeon instead of `ringbuffer` to avoid the synchronization block- split tracking structure to serial (subscriptionlist) and timed (compositesubscription) in `eventloopsscheduler` which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark: (i7 920 window 7 x64 java 18u31 5x1s warmup 5x5s iteration)```benchmark      (size)         1x    1x error      this pr   this errorobserveon           1  162326012     2458085   166536559     3154174observeon          10  132471205     1857434   142517407     3734424 ++observeon         100   43282527     2145910   112238179     2270103 ++observeon        1000   11779482      173370    25726564      309193 ++observeon        2000    6756211       89196    12123276      276470 ++observeon        3000    4736893      253796     9342673      263667 ++observeon        4000    3661874       51359     7346015      123049 ++observeon       10000    1519282      108503     1546547       21885observeon      100000     151193        2569      156160        1974observeon     1000000      15373        1310       15660        0153subscribeon         1  161290037     2867882   164952259      797408subscribeon        10  151842821     2448734   147906491     4373682subscribeon       100  136418065     1773558   136889052     2362203subscribeon      1000   58389066     4559030    59482225     1372692subscribeon      2000   34089152     9318205    36581203     1264100subscribeon      3000   26712331     1265442    26519320     1319293subscribeon      4000   20118326     2018439    20163395      839709subscribeon     10000    8914213      677164     9059934      200158subscribeon    100000     958038       43349      965663       60708subscribeon   1000000      91849        2148       92706        1202```notes:- at `size  1` the throughput varies in a +/- 3000 range on each run and since the changes dont touch the scalar optimization there is no real improvement there- at `size  10000` my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on- at `size  100000` and `size  1000000` the throughput doubles if i introduce some extra delay (ie via sleep(1) or some extra work)- the benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput `subscribeon(1000000)` from 91 to 136 since it conflicts with #2772 anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well  
1,0,0,0,0,0,1,0,fixed window(time) to work properly with unsubscription added backpressure support to window(size skip)see #1880  
1,0,0,0,0,0,1,0,fix retry with predicate ignoring backpressure apparently we forgot about this operator the backpressure handling is a trivial case with `producerarbiter` ive also fixed some apparent code indentation errororiginally reported in #3128 with a test case which i didnt include due to its lengthy nature however i did run the test manually and both passed after the fix  
1,0,0,0,0,0,1,0,"remove unnecessary static modifier ps @benjchristensen @akarnokd sorry for large amount of simple pull requests im doing full code review of rxjava sources http://artemzincom/blog/rxjava-code-review-part-1/ and ill create prs and issues during this reviewill try to group changes by themes so it will be easy to review them looks like this adventure is going to be part of #3145! if it were only me id accept cosmetic changes such as this but history tells me not to  || @akarnokd why? sad that `javac` is not strict enough and allows such things we can add `checkstyle` with only java-lang rules and remove all these things from the code but last time i suggested to add `checkstyle` @benjchristensen was not very happy…i understand that rxjava is not ""my project"" and i cant just come and force you to use ""my codestyle"" (which is actually just standard java codestyle) so if you dont want to accept such changes — its okay ill stop doing such prs and will report only major issues || i like this pr too much im going to merge it ) || > i like this pr too much im going to merge it ):-) || "
1,0,0,0,0,1,1,1,1x: completable class to support valueless event composition + tests this is a backport of #3439 looks good should we annotate `@experimental` on all the public methods and operators?  || now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then || sounds good :+1:on sat dec 5 2015 01:38 david karnok notifications@githubcom wrote:> now the class annotation should indicate all methods are experimental if> individual methods get promoted we can add direct annotations then> > —> reply to this email directly or view it on github> https://githubcom/reactivex/rxjava/pull/3444#issuecomment-162167535 || since this adds to the api surface id like to get another like before merging || :+1:  || awesome thanks! ||
1,0,0,1,0,1,1,0,1x: add shorter rxjavaplugin class lookup approach this adds a new pattern and lookup method that lets the developer specify the custom plugins with shorter system property keys android is quite restrictive and allows only 31 charactersthe new pattern splits the target simple class name and its implementation into two separate system properties:```rxjavaplugin1classsimpleclassnamerxjavaplugin1implpathtoimplclass```the index tag (`1`) can be any string of your chosing:```rxjavapluginmykeyclasssimpleclassnamerxjavapluginmykeyimplpathtoimplclass```but make sure they are paired otherwise nothing will happenif there are multiple `class` entries with the same `simpleclassname` one of them will be chosen (depending on the walk order in `javautilproperties`)related issue #2835 :+1:  || updated: made strings local constants and using `length`˙instead of magic numbers plus if the default keying matches the properties is not traversed for an alternate specification || an alternative pattern could be this:```rxjavaplugin1simpleclassnameorgpackagenamingactualclass``` || i agree that if the plugin cannot be found we should crash the app  || updated the code to crash if the plugin implementation is missing || thanks! ||
1,0,0,0,0,1,1,1,"add takeuntil support in single as discussed in #3708this adds `takeuntil(observable)` and `takeuntil(single)` support in `single` it was mostly just adapting the logic from the existing `operatortakeuntil` and adjusting it for accepting a `single` and sending a `cancelattionexception` in the event of a submission from `other` prior to a terminal event in the source `single`any feedback is appreciated it this is my first time contributing an implementation to this project particularly wondering if its worth keeping both overloads or if the user should just coerce their `other` to one type or ther other also particularly looking for feedback on what information to include in the `cancellationexception` just noticed my ide swapped the wildcard imports for explicit ones let me know if i should revert that || yes please || just style issues otherwise lgtm :+1: || cc @akarnokd @artem-zinnatullin for the tests most of them are adapted from `operatortakeuntiltest`  it looks like these tests have two different styles (one with `testobservable` and the other with `subject`) i reused both of them here but would we maybe want to stick with one or the other? especially with single i think some now overlapalso if we stick with one style here should we update the style in `operatortakeuntiltest` as well to match?  || im not too keen on how the tests are named or what test framework objects you useplease squash your commits || squashed || :+1: || @zsxwing @stevegury any input? need another collaborator reviewmain points im wondering about:- should we only support one overload? if we support more than one should it support all three (including `completable`?)- should `takeuntil` test styles formalized looks like there are two styles right now judging by `operatortakeuntiltest`: subject-based and `testobservable`-based || :+1: yes i think it makes sense to had an override for `completable`regarding test styles i dont think its a big deal the best thing to do slowly convert all the tests to the new convention (ideally in separated commits that dont change the behavior) || > sending a cancelattionexception in the event of a submission from other prior to a terminal event in the source singlethis behavior is really confusing why not be same as observable? am i missing anything? || @akarnokd and i discussed it in #3708 `single` currently emits a `nosuchelementexception` if the stream is terminated prior to any event emission by signaling a `cancellationexception` we can at least signal to the subscriber if the error was due to `takeuntil` unsubscribing it or normal missing emissions || @hzsweers thanks for clarifying however i would expect `singletakeuntil` returns something that contains 0 or 1 item how about returning observable instead? then the semantics of `singletakeuntil` is `onnext{0 1} (oncompleted | onerror)` which is consistent with `observabletakeuntil` (`onnext{0 n} (oncompleted | onerror)`) || the operators should stay in the same type as long as they can and there are operators that simply cant behave the same as their counterpart in other reactive types if one wishes the `observabletakeuntil` behavior one can use toobservable()takeuntil() and get that behavior || > the operators should stay in the same type as long as they can and there are operators that simply cant behave the same as their counterpart in other reactive types if one wishes the observabletakeuntil behavior one can use toobservable()takeuntil() and get that behaviorif so i vote for `nosuchelementexception` as `cancellationexception` seems counterintuitive to me `cancellationexception` looks some codes cancel single (eg i call `unsubscribe` in some place) but here the error is that `singletakeuntil` returns something that is not `single` hence i would expect `nosuchelementexception` || thats fair but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved? i was of the impression that `onerror` was primarily for serious unexpected errors whereas this seems like not unexpected or seriousconsider the followingwith `nosuchelementexception`:``` javapublishsubject<integer> source  publishsubjectcreate()publishsubject<integer> until  publishsubjectcreate()sourcetake(1)tosingle()        takeuntil(untiltake(1)tosingle())        subscribe(                new action1<integer>() {                    @override                    public void call(integer integer) {                        systemoutprintln(""success"")                    }                }                new action1<throwable>() {                    @override                    public void call(throwable throwable) {                        systemoutprintln(""i dont know if it was due to unsubscribing or the source is misbehaving"")                    }                })untilonnext(1)```vs with `cancellationexception```` javapublishsubject<integer> source  publishsubjectcreate()publishsubject<integer> until  publishsubjectcreate()sourcetake(1)tosingle()        takeuntil(untiltake(1)tosingle())        subscribe(                new action1<integer>() {                    @override                    public void call(integer integer) {                        systemoutprintln(""success"")                    }                }                new action1<throwable>() {                    @override                    public void call(throwable throwable) {                        if (throwable instanceof cancellationexception) {                            systemoutprintln(""it was canceled"")                        } else {                            systemoutprintln(""source didnt emit"")                        }                    }                })untilonnext(1)```the example i gave in the issue is probably the best example for me we use something similar to this for lifecycle binding in android when the lifecycle ends it might unsubscribe this in the middle for a normal error we might show a generic ""an error occurred"" message in the event that its just the lifecycle ending we dont want to react that way and rather likely just want to do nothing at all or clean up resources im fine with not using `cancellationexception` but i think it would be useful to add a means of being able to differentiate between unsubscription reasons i thought about just specifying a message but felt that @akarnokds `cancellationexception` suggestion made it more clear || ill add an overload for `completable` as well and remove the old test style in the new tests here for now @stevegury just to be clear the ""new"" style would be the `subject`-based approach right? || @hzsweers i actually typed ""its a big deal"" but i was willing to say ""its **not** a big deal"" (i corrected my previous comment) i prefer the subject based approach but i am not strongly opinionated about thati still :+1: on the current implementation || > thats fair but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved?my point here is if singletakeuntil() returns a single that emits nothing it should be `misbehaved` rather than `unsubscribed` || i think ""cancellationexception"" is the clearer reaction here remember the problems around the observablesingle() and how it is a source of problem to find out exactly who didnt signal? here you know that if takeuntil is tripped and not some upstream machinery ends up being empty || > i think ""cancellationexception"" is the clearer reaction here remember the problems around the observablesingle() and how it is a source of problem to find out exactly who didnt signal? here you know that if takeuntil is tripped and not some upstream machinery ends up being emptywhat if we want to add other operator that may return something doesnt signal? if it also emits `cancellationexception` then we still cannot find out exactly who didnt signal so why not use `nosuchelementexception` to indicate all cases that didnt signal? || what about a subclass of `nosuchelementexception`? a `cancelednosuchelementexception` so to speak wouldnt break the downstream apis but still allows for the subscriber to differentiate || > what about a subclass of nosuchelementexception? a cancelednosuchelementexception so to speak wouldnt break the downstream apis but still allows for the subscriber to differentiatemaybe a more general question should we add special exceptions for different operators or we just use a general exception to indicate the same error? || i think people should be aware of the implications of operators they use would `compositeexception` possibly be precedent for this? || > i think people should be aware of the implications of operators they use would compositeexception possibly be precedent for this?compositeexception is fine and clear it indicates there are multiple errors thrown all classes in rxexceptions are well defined and its very easy to connect them with the bad cases i can just read the exception name and tell what my codes violate but for `cancellationexception` its hard to connect it with `takeuntil` especially people use some library that calls `takeuntil` internally in addition imo if i see `cancellationexception` my first thought is `futurecancel` is called somewhereif we can define clearly that when should throw cancellationexception/cancelednosuchelementexception(or whatever you propose) when should throw nosuchelementexception i wont be against that for now the confusing thing for me is that if a single doesnt signal i may receive cancellationexception or nosuchelementexception || im fine with either i think we could be clear in the documentation and subclassing would still allow downstream subscribers to treat it as a `nosuchelementexception` @akarnokd @stevegury thoughts? || added `takeuntil(completable)` support and standardized tests updated with a separate commit for easier reviewing let me know if you want me to squash againping @akarnokd @stevegury || :+1: || :+1:  || "
1,0,0,0,0,0,1,0,1x: add maxconcurrent parameter to concatmapeager relevant issue #3710 will you update this pr? || yes on it ! || i submitted a commit with your proposed changes sorry for the delay feel free to give me more comments/changes also i can squash if needed || :+1:dont squash this time github has now a new feature for the merge button where it offers squashing id like to test if it really squashes everything and the main just gets 1 commit || nothing critical :+1: // @akarnokd squashing on github works and it works especially great when author of the pr just commits on top of previous commits because github now remembers what code youve checked and what not and you can continue reviewing from previous point (doesnt work for me when pr is always squashed) || i have updated the pr do pr commits trigger github notifications ? (should i comment after i do an update ? ) || unfortunately no notification || 👍  ||
1,0,0,0,0,1,1,1,1x: add singleonerrorresumenext(func) closes #3440 closes #3731 closes #3472 (whoa 3 issues at a time!) @akarnokd fixed your comments btw should i add `@experimental` to these operators? || yes and copy over the experimental and since tags into the javadoc || :+1: there is this new like option but do you get a notification for them? || noon mon mar 14 2016 8:10 pm david karnok notifications@githubcom wrote:> [image: :+1:] there is this new like option but do you get a notification> for them?> > —> you are receiving this because you are subscribed to this thread> > reply to this email directly or view it on github:> https://githubcom/reactivex/rxjava/pull/3766#issuecomment-196578174 || :+1:  || :+1:  ||
1,0,0,1,0,0,1,0,1x: make defensive copy of the properties in rxjavaplugins possible solution to #3749 :+1:  ||
1,0,0,0,0,0,1,0,1x: add multi-other withlatestfrom operators add `withlatestfrom` operator version that can take 2 to n other sources and combine them with the main sourcerelated: #3779 👍  ||
1,0,0,0,0,0,1,0,1x: request rebatch operator this is a follow-up on #3964 but with a separate operator on `observable` 👍  || @abersnaze @stealthcode you had some use cases for this any objections? || the reuse of the observeon is interesting but couldnt it be done without the allocation of a queue? || if the downstream request is unbounded and the downstream has caught up then the queue can be skipped in this case `observeon` cant be reused anymore and a custom drain logic has to be implementedotherwise the upstream emissions have to be stored temporarily for an underrequesting downstream || 👍  || i know that @abersnaze still had reservations about this i think that this should not be using `observeon` || my concern is this - if @abersnaze implemented the batching functionality then why wouldnt we use that? the queue in observeon scheduling creates a layer of indirection that seems unnecessary  || remember this started out as a change to `observeon` to not ignore the `immediate` scheduler but people wanted this behavior exposed behind a proper name || thanks for reminding me of the context of this work it seems like we have 2 implementations for the same functionality i think @abersnaze and i agree that the 2 features of request batching and request valve type functionality could be composed however i think that using `observeon` for this functionality is not necessarily the best way to accomplish this  || i personally would be okay with either implementation i think `observeon` is a nice choice because of the request management but would prefer it more if there wasnt a queue but realistically i think the choice is fine also its interesting to note that users are gravitating more and more to taking direct control over the `requester-producer` interactions  || for example this pr does something similar but exactly n (could be modified to have optional 25%) and without a queue #3781  ||
1,0,0,0,0,0,1,0,1x: fix reset() shutting down everything other than the schedulers the reset shut down all the main schedulers and the helper pools causing the failure in #3993 @hzsweers you were right with the need for the instance-shutdown method minor nit rest of the code looks good 👍 nice catch sorry for the inadvertent bug and glad it was a relatively simple fix || 👍  || 👍  ||
1,0,0,0,0,0,1,0,1x: update dooneach(observer) javadoc fixes the documentation problem reported in #3721 nice improvement :+1: ||
1,0,0,1,0,1,1,0,1x: fix replaysubject anomaly around caughtup by removing that optimization adding the backpressure support to `replaysubject` exposed a race condition around the `caughtup` optimizationthe problem occurs when the source thread has caught up after `drain()` returned true but at the same time a concurrent `drain()` starts running (due to a subscribe() process finishing or requesting on top of the previous `longmax_value`) this concurrent drain may think the replay hasnt started yet (by finding `rpnode` null) or seeing that the buffer has more elements (that may get double emitted)the current solution is to remove this optimization until we come up with a correct optimizationrelated: #4028 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4051?srcpr) is **8049%**> merging [#4051](https://codecovio/gh/reactivex/rxjava/pull/4051?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **011%**``` diff@@                1x      #4051   diff @@  files           253        253            lines         16478      16469     -9     methods           0          0            messages          0          0            branches       2500       2491     -9   + hits          13244      13256    +12   + misses         2341       2331    -10   + partials        893        882    -11   ```> powered by [codecov](https://codecovio?srcpr) last updated by [535fb75788f3bd](https://codecovio/gh/reactivex/rxjava/compare/535fb75901bda3ba26edf5c79b0cbfef7a05580b788f3bd94a7756187ec32a870b6900d6c784454f) ||
1,0,0,1,0,0,1,0,2x: convert schedulersupport annotation to accept a string value closes #4052 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4053?srcpr) is **6958%**> merging [#4053](https://codecovio/gh/reactivex/rxjava/pull/4053?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **014%**``` diff@@                2x      #4053   diff @@  files           386        385     -1     lines         27579      27571     -8     methods           0          0            messages          0          0            branches       4476       4476          + hits          19151      19186    +35   + misses         6424       6381    -43     partials       2004       2004          ```> powered by [codecov](https://codecovio?srcpr) last updated by [113eeeb90dc0e6](https://codecovio/gh/reactivex/rxjava/compare/113eeeb2c3e732fce96945304b8a3e27cc3ea7cc90dc0e64f68c924870cc6bac9995405664b85c72) || i meant to include in the pr description that i removed the `single` value it was unused and the javadoc didnt make it clear as to what the exact usage would be anyway || no problem can be added later if necessary although `singlescheduler` is not (planned to be) a default for any operators right now ||
1,0,0,1,0,1,1,1,2x: fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups#4138#4109#4054 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) is **6920%**> merging [#4139](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **001%**``` diff@@                2x      #4139   diff @@  files           386        386            lines         27277      27277            methods           0          0            messages          0          0            branches       4410       4410          - hits          18879      18876     -3     misses         6508       6508          - partials       1890       1893     +3   ```> powered by [codecov](https://codecovio?srcpr) last updated by [13df09beb8242a](https://codecovio/gh/reactivex/rxjava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3eb8242a44298bfafb62118b075f91f390431f6f9) ||
1,0,0,0,0,1,1,1,1x: change completablesubscribe(onerror oncomplete) to (oncomplete onerror) closes #3851 closes #4137 actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like `subscribe(actionsempty() actionsempty())` will be ambiguous to the compilerthoughts? || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) is **8133%**> merging [#4140](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **004%**``` diff@@                1x      #4140   diff @@  files           257        257            lines         16811      16811            methods           0          0            messages          0          0            branches       2547       2547          + hits          13666      13673     +7   + misses         2243       2238     -5   + partials        902        900     -2   ```> powered by [codecov](https://codecovio?srcpr) last updated by [5c7475755723da](https://codecovio/gh/reactivex/rxjava/compare/5c747577e910b5eda657bc9f825914965fb2f1c455723da4b83365611d103a5e0971a198fcafbea1) || :+1: || dynamic languages have trouble with the two methods lets only have 1 method || 👍  ||
1,0,0,0,0,1,1,1,1x: change completablesubscribe(onerror oncomplete) to (oncomplete onerror) closes #3851 closes #4137 actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like `subscribe(actionsempty() actionsempty())` will be ambiguous to the compilerthoughts? || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) is **8133%**> merging [#4140](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **004%**``` diff@@                1x      #4140   diff @@  files           257        257            lines         16811      16811            methods           0          0            messages          0          0            branches       2547       2547          + hits          13666      13673     +7   + misses         2243       2238     -5   + partials        902        900     -2   ```> powered by [codecov](https://codecovio?srcpr) last updated by [5c7475755723da](https://codecovio/gh/reactivex/rxjava/compare/5c747577e910b5eda657bc9f825914965fb2f1c455723da4b83365611d103a5e0971a198fcafbea1) || :+1: || dynamic languages have trouble with the two methods lets only have 1 method || 👍  ||
1,0,0,0,0,0,1,0,dooneach - reduce allocations report to rxjavahooks as discussed in #4260 - call `rxjavahooksonerror` for secondary errors- reduced allocations (`actionsubscriber` -> `actionobserver` `operator` -> `onsubscribe`)- added 5 unit tests ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4262?srcpr) is 8441% (diff: 100%)> merging [#4262](https://codecovio/gh/reactivex/rxjava/pull/4262?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **002%**``` diff@@                1x      #4262   diff @@  files           267        268     +1     lines         17460      17477    +17     methods           0          0            messages          0          0            branches       2662       2662          + hits          14735      14753    +18     misses         1866       1866          + partials        859        858     -1   ```> powered by [codecov](https://codecovio?srcpr) last update [969d94c771d859](https://codecovio/gh/reactivex/rxjava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae771d859c701608a655c2b32e7fc4a0dc840a20e9?srcpr) || fixed actionsubscriber usage and removed empty test ta || :+1: ||
1,0,1,1,1,1,1,1,2x: move blocking operators into the base classes this pr removes the `blockingflowable` and `blockingobservable` classes and moves the blocking operators into the respective reactive classes and names prefixed with `blocking`in addition many of the mentions of `flowable` has been replaced with `observable` in `observable`related: #4366 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4371?srcpr) is 6858% (diff: 4966%)> merging [#4371](https://codecovio/gh/reactivex/rxjava/pull/4371?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**``` diff@@                2x      #4371   diff @@  files           443        449     +6     lines         32081      32123    +42     methods           0          0            messages          0          0            branches       5073       5080     +7   + hits          22015      22031    +16   - misses         7971       7996    +25   - partials       2095       2096     +1   ```> powered by [codecov](https://codecovio?srcpr) last update [a6bbf4658874f6](https://codecovio/gh/reactivex/rxjava/compare/a6bbf4630e9f3678ac56e96f9aa156f3d03ffc5658874f6d4cf044b1bfea05fea559df4a7efc4db8?srcpr) || lgtm 👍  ||
1,0,0,0,0,0,1,0,2x: fixes cleanups renames changes:- fix spelling mistakes- more consistent parameter naming scheme based on #1353 (but incomplete rc2)- fix bugs due to wrong variable naming- compact logic expressions- fix `completabledoafterterminate` not called the right time- `onerrorreturnvalue` renamed to `onerrorreturnitem`@davidmgross once this pr has been merged it would be great you submitted one that has `//todo` markers on those lines that need attention the naming scheme you suggested doesnt come intuitively to me so i may skip many of them without the markers ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4421?srcpr) is 6948% (diff: 7327%)> merging [#4421](https://codecovio/gh/reactivex/rxjava/pull/4421?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **003%**``` diff@@                2x      #4421   diff @@  files           454        454            lines         32372      32323    -49     methods           0          0            messages          0          0            branches       5214       5214          - hits          22482      22459    -23   + misses         7692       7662    -30   - partials       2198       2202     +4   ```> powered by [codecov](https://codecovio?srcpr) last update [35c8da6b05aa63](https://codecovio/gh/reactivex/rxjava/compare/35c8da6ca2f0c446d9e50d1c5507cc80e5ccb996b05aa630a9a8eda6007863512395b642cca98a62?srcpr) || :+1: ||
1,0,0,0,0,0,1,0,1x: single add dooneach really not that happy with `onnotificationcall(notification<t>createonnext(t))` do you guys have any other way of doing this? theres no way of creating a notification that has the `oncompleted` plus a value a new one could be introduced there though also the `dooneachsuccess` test feels clunkyalso why does single when using the `do` methods does the job by using an observable? and later converting it back to a single again is it due to the way single was implemented in 1x? with completable there is no converting of back and forth neededjavadoc will follow once we sorted out the few nits herefixes #4457 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4461?srcpr) is 8428% (diff: 100%)> merging [#4461](https://codecovio/gh/reactivex/rxjava/pull/4461?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **009%**``` diff@@                1x      #4461   diff @@  files           271        272     +1     lines         17607      17647    +40     methods           0          0            messages          0          0            branches       2684       2687     +3   + hits          14824      14874    +50   + misses         1923       1913    -10     partials        860        860          ```> powered by [codecov](https://codecovio?srcpr) last update [11343ae0ea399f](https://codecovio/gh/reactivex/rxjava/compare/11343ae031feb01d3d08ba5cd0e5f275ed798e680ea399fc6f8f3cab60a2baa3763882ac67d0fd77?srcpr) || ill continue this on monday and make all suggested changes || [exceptionstest#testonerrorexceptionisthrownfromsingledoonsuccess](https://githubcom/reactivex/rxjava/blob/11343ae031feb01d3d08ba5cd0e5f275ed798e68/src/test/java/rx/exceptions/exceptionstestjava#l288) fails although im not quite sure what the purpose of that test is also it seems a bit off to me can you give some insights there? || looks like removing the toobservabletosingle no longer wraps the subscriber into a safesubscriber and the test just crashes with a different exception || no exception is being thrown at all || can you single step the test? in the orginal dooneach it has throwiffatal an throworreport you missed btw || :+1: ||
1,0,0,0,0,0,1,0,rename asyncemitter to emitter as per discussion in #4577 renaming `asyncemitter` to `emitter` via deprecationthere is a catch though `completableemitter` is correctly named now and depends on `asyncemitter` via the method:``` java void setcancellation(asyncemittercancellable c)```when can we break the api of that class? :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4580?srcpr) is 8457% (diff: 9390%)> merging [#4580](https://codecovio/gh/reactivex/rxjava/pull/4580?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **021%**``` diff@@                1x      #4580   diff @@  files           272        274     +2     lines         17571      17807   +236     methods           0          0            messages          0          0            branches       2683       2727    +44   + hits          14822      15060   +238   + misses         1884       1880     -4   - partials        865        867     +2   ```> powered by [codecov](https://codecovio?srcpr) last update [646be2d44bf8a8](https://codecovio/gh/reactivex/rxjava/compare/646be2d18df9cd1537d81d22b24084049faa358144bf8a802743a3bfe46a097fc60bd4b6c36a3e89?srcpr) || thanks for review @akarnokd  i take it we have to wait for 13 to break the api of experimental `completableemitter`? || deleting experimental apis has to wait one patch version so 121 will have both and 122 can remove the asyncemitter || ok ill patch again once 121 is outon thu 22 sep 2016 21:25 david karnok notifications@githubcom wrote:> deleting experimental apis has to wait one patch version so 121 will> have both and 122 can remove the asyncemitter> > —> you are receiving this because you authored the thread> reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4580#issuecomment-248876158> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aata67zur0rwdcgqvuo3_lrakxmjql9yks5qsmwmgajpzm4kdwhj>  || /cc @jakewharton @artem-zinnatullin  || make the cancelable interfaces extend each other as wellon thu sep 22 2016 6:33 pm dave moten notifications@githubcom wrote:> ## _@davidmoten_ commented on this pull request> > in src/main/java/rx/asyncemitterjava> https://githubcom/reactivex/rxjava/pull/4580:> > >   */> >  @experimental> > +@deprecated> >  public interface asyncemitter<t> extends observer<t> {> > cannot extend emitter because of two versions of cancellable would break> existing asyncemitter use> > —> you are receiving this because you were mentioned> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4580 or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeetq3yk4zrtnoqttagmrnbm6eib0-ks5qswjpgajpzm4kdwhj>  || > make the cancelable interfaces extend each other as wellgood idea thanks || um i dont think its worth it juggling with inheritance of these interfaces straight after next release im just going to delete the deprecated stuff || ive added a `@deprecated` annotation to `completableemitter` let me know if you guys still want the interface inheritance business || forgot to move `cancellable` to `rxfunctions` thats done now || thanks for working this out! ||
1,0,0,1,0,1,1,0,"2x: evaluate schedule initialization via callable this implements the solution proposed in #4572 - to initialize the schedulers via a callable rather than directly via a value ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4585?srcpr) is 7817% (diff: 8888%)> merging [#4585](https://codecovio/gh/reactivex/rxjava/pull/4585?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **008%**``` diff@@                2x      #4585   diff @@  files           552        552            lines         36184      36297   +113     methods           0          0            messages          0          0            branches       5584       5602    +18   + hits          28255      28375   +120   + misses         5917       5912     -5   + partials       2012       2010     -2   ```> powered by [codecov](https://codecovio?srcpr) last update [24448b4a273507](https://codecovio/gh/reactivex/rxjava/compare/24448b47ed27b6ab951cf1ef573da900f8a46853a273507bc8d66c671b878b496f491f5e29f4c8b1?srcpr) || @akarnokd correct me if im wrong but in order to avoid the evaluation of the default scheduler instance when it is being overridden i still need to change the `oninit[single|io|new|computation]handler` signatures to be `function<callable<scheduler> scheduler>` as per -```    static volatile function<callable<scheduler> scheduler> oninitsinglehandler```otherwise the invocation of `initsinglescheduler` will cause the evaluation of the default value to pass it as a parameter to the overriding/transforming function: `oninitsinglehandler` || yes you still need `callable` as the indirection but the inner class will be evaluated only if `call` is actually invoked || ive added the remaining lazy initializationive also fairly aggressively enforced non-null in the associated functions for example:``` javapublic static scheduler initioscheduler(callable<scheduler> defaultscheduler) {    objecthelperrequirenonnull(defaultscheduler ""scheduler callable cant be null"")    callable<scheduler> scheduler> f  oninitiohandler    if (f  null) {        return callrequirenonnull(defaultscheduler)    }    return applyrequirenonnull(f defaultscheduler)}```however to me this seems slightly out of place / over the top is that enforcement necessary or should the resultant null scheduler be left unasserted and left to the eventual nullpointerexception when the scheduler is used? either way im happy to keep or remove that based upon review feedback || aggressive input validation is never over the top if you defer checkingthen the stacktrace tells you nothing about what actually caused the brokenstateon sun sep 25 2016 7:09 am peter tackage notifications@githubcomwrote:> ive added the remaining lazy initialization> > ive also fairly aggressively enforced non-null in the associated> functions for example:> > public static scheduler initioscheduler(callable<scheduler> defaultscheduler) {>     objecthelperrequirenonnull(defaultscheduler ""scheduler callable cant be null"")>     callable<scheduler> scheduler> f  oninitiohandler>     if (f  null) {>         return callrequirenonnull(defaultscheduler)>     }>     return applyrequirenonnull(f defaultscheduler)> }> > however to me this seems slightly out of place / over the top is that> enforcement necessary or should the resultant null scheduler be left> unasserted and left to the eventual nullpointerexception when the scheduler> is used? either way im happy to keep or remove that based upon review> feedback> > —> you are receiving this because you commented> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4585#issuecomment-249415736> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeeyulqrvk4zp6d5xx5vsnijqiam4xks5qtlzbgajpzm4kebru>  || @akarnokd all done as far as i am concerned do i need to anything else for this to be merged?  || i was waiting for you to settle with the implementation thanks for the contribution || "
1,0,0,1,0,1,1,0,2x signal npe observableamb flowableamb this pr addresses #4640 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4645?srcpr) is 7782% (diff: 6538%)> merging [#4645](https://codecovio/gh/reactivex/rxjava/pull/4645?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **<01%**``` diff@@                2x      #4645   diff @@  files           562        562            lines         36708      36724    +16     methods           0          0            messages          0          0            branches       5634       5636     +2   + hits          28564      28579    +15   - misses         6101       6103     +2   + partials       2043       2042     -1   ```> powered by [codecov](https://codecovio?srcpr) last update [d08266b27c29f8](https://codecovio/gh/reactivex/rxjava/compare/d08266bb95e8cddbb9ba5cf39afbe08e16525d1a27c29f8ff3917b5310cd3d52c1464a77951a3722?srcpr) ||
1,0,0,0,0,1,1,1,1x: fix subscribe(action1 [ action1]) to report isunsubscribed the lambda version didnt report `isunsubscribed()` as before because of the removal of the `safesubscriber` wrapping this pr makes sure it reports consistently againrepored in: #4715note that there is no `unsafesubscribe(singlesubscriber)` so a regular `subscribe(singlesubscriber)` by default wont report `isunsubscribed()  true` unless the implementation of `onsuccess` and `onerror` - controlled by the user - doesnt call `unsubscribe` on itself ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4716?srcpr) is 8409% (diff: 100%)> merging [#4716](https://codecovio/gh/reactivex/rxjava/pull/4716?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **<01%**``` diff@@                1x      #4716   diff @@  files           288        288            lines         17986      17987     +1     methods           0          0            messages          0          0            branches       2746       2745     -1   + hits          15125      15127     +2   - misses         1981       1983     +2   + partials        880        877     -3   ```> powered by [codecov](https://codecovio?srcpr) last update [1ac5834bdbd69f](https://codecovio/gh/reactivex/rxjava/compare/1ac583435308aa354a2f82101cb4815313f2cfd8bdbd69f6ce7e63d2e43e0fb360d321080b5adf2e?srcpr) || hi everyoneseems like `subscribe(singlesubscriber)` overload has the same problem because `singlejust(1)subscribe(new singlesubscriber<integer>(){})isunsubscribed()` returns `false`i checked version 122-snapshot in 120 it returns `true` as expected || @marwinxxii single has no notion of `safesinglesubscriber` and the internals got changed to improve performance therefore you are responsible calling `unsubscribe` in your implementation of `onsuccess` and `oncompleted` || sorry i missed this part in pr descriptionmay be this should be added to singlesubscriber documentation (or may be `singlesubscribe(singlesubscriber)`? || pr welcome to change the docs || done - #4769 ||
1,0,0,0,0,1,1,0,merge flowableemitterbackpressuremode into backpressurestrategy this is the implementation of #4727 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4729?srcpr) is 8991% (diff: 8222%)> merging [#4729](https://codecovio/gh/reactivex/rxjava/pull/4729?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **002%**``` diff@@                2x      #4729   diff @@  files           571        571            lines         37241      37276    +35     methods           0          0            messages          0          0            branches       5671       5678     +7   + hits          33494      33518    +24   - misses         2253       2263    +10   - partials       1494       1495     +1   ```> powered by [codecov](https://codecovio?srcpr) last update [f8b6fbd05d21cb](https://codecovio/gh/reactivex/rxjava/compare/f8b6fbd22db73160284ba43e3a3ead2b979a91a905d21cbad0314e0e4e7b1a3a2ecfea185589b2e1?srcpr) || i have implemented the changes from the code commentsill keep in mind to rely on code coverage in the futureshould i reply to the review comments directly ? || no need in this case looks good to me ||
1,0,0,0,0,0,1,0,subtle change in completables documentation for retrywhen small change as discussed in #4809 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4810?srcpr) is 9557% (diff: 100%)> merging [#4810](https://codecovio/gh/reactivex/rxjava/pull/4810?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **014%**``` diff@@                2x      #4810   diff @@  files           570        570            lines         36717      36717            methods           0          0            messages          0          0            branches       5554       5554          - hits          35148      35094    -54   - misses          645        670    +25   - partials        924        953    +29   ```> powered by [codecov](https://codecovio?srcpr) last update [106d004f8506aa](https://codecovio/gh/reactivex/rxjava/compare/106d00485a41b7cdd29ee0065c8e026a46729235f8506aaf7d0cb273b6f8e3d6d907521889d995e9?srcpr) ||
1,0,0,0,0,1,1,1,1x: completabledoafterterminate to run after onerror as well doafterterminate was intended to call the callback after either oncompleted or onerror but somehow missed that behavior in 1xrelated: #4822 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4830?srcpr) is 8413% (diff: 7142%)> merging [#4830](https://codecovio/gh/reactivex/rxjava/pull/4830?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **<01%**``` diff@@                1x      #4830   diff @@  files           287        287            lines         17852      17856     +4     methods           0          0            messages          0          0            branches       2704       2704          + hits          15021      15024     +3   + misses         1964       1963     -1   - partials        867        869     +2   ```> powered by [codecov](https://codecovio?srcpr) last update [bebdec6eb8f4fe](https://codecovio/gh/reactivex/rxjava/compare/bebdec6a52955ea478a992cebbd527364cb5b6a4eb8f4feccc00e797c21edfe3e33bc056e55a1e3f?srcpr) ||
1,0,0,0,0,1,1,0,2x: add maybeflatmapsingleelement returning maybe this pr adds the `maybeflatmapsingleelement()` operator that returns a `maybe` and completes if the source completes unlike `flatmapsingle` where the returned `single` signals `nosuchelementexception`related #4857 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4858?srcpr) is 9578% (diff: 100%)> merging [#4858](https://codecovio/gh/reactivex/rxjava/pull/4858?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **006%**``` diff@@                2x      #4858   diff @@  files           580        581     +1     lines         37174      37214    +40     methods           0          0            messages          0          0            branches       5600       5601     +1   + hits          35632      35646    +14   - misses          639        649    +10   - partials        903        919    +16   ```> powered by [codecov](https://codecovio?srcpr) last update [557aca3a94a307](https://codecovio/gh/reactivex/rxjava/compare/557aca3bed17d85df5bdee384d4d4adba03ea64ca94a307ab11339b09cb2e69a00a874dea532635f?srcpr) ||
1,0,0,0,0,1,1,1,2x: fix & update observablerepeatwhen and retrywhen (again) this pr fixes the `observablerepeatwhen` not completing properly if the handler completes in addition the `observableredo` has been split to `observableretrywhen` and `observablerepeatwhen` just like their `flowable` counterpart and are now they use a less convoluted algorithmrelated: #4909 i dont know why the travis-ci/push still shows up || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4911?srcpr) is 9564% (diff: 9843%)> merging [#4911](https://codecovio/gh/reactivex/rxjava/pull/4911?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**```diff@@                2x      #4911   diff @@  files           586        586            lines         37410      37446    +36     methods           0          0            messages          0          0            branches       5628       5625     -3   + hits          35791      35814    +23   - misses          671        695    +24   + partials        948        937    -11   ```> powered by [codecov](https://codecovio?srcpr) last update [5b6d1f8c7b4ccb](https://codecovio/gh/reactivex/rxjava/compare/5b6d1f8c8e9e4adc3fe31388811aa4876a5afba2c7b4ccb947a9ccf5380a789d312a156b6b2ac8b7?srcpr) ||
1,0,0,0,0,0,1,0,2x: fix testsubscriber/observer message texts fix the wrong messages in `testsubscriber` and `testobserver`related: #4920 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4921?srcpr) is 9555% (diff: 100%)> merging [#4921](https://codecovio/gh/reactivex/rxjava/pull/4921?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**```diff@@                2x      #4921   diff @@  files           586        586            lines         37446      37446            methods           0          0            messages          0          0            branches       5625       5625          - hits          35799      35781    -18   - misses          698        710    +12   - partials        949        955     +6   ```> powered by [codecov](https://codecovio?srcpr) last update [2332df23fe97c2](https://codecovio/gh/reactivex/rxjava/compare/2332df245545fae31c996f65c5aa1c50799d3be13fe97c2a8d5795acd1da2a187a8b009eb0231a1c?srcpr) ||
1,0,0,0,0,0,1,0,2x: change completable to completablesource changing `completable` to `completablesource` also found one other wrong spot that i fixed within this prfixes #4923 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4924?srcpr) is 9558% (diff: 100%)> merging [#4924](https://codecovio/gh/reactivex/rxjava/pull/4924?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **008%**```diff@@                2x      #4924   diff @@  files           586        586            lines         37446      37446            methods           0          0            messages          0          0            branches       5625       5625          - hits          35823      35792    -31   - misses          683        698    +15   - partials        940        956    +16   ```> powered by [codecov](https://codecovio?srcpr) last update [18752564489b35](https://codecovio/gh/reactivex/rxjava/compare/1875256f3c6a64f56c75585d8f1d00a8d506c68d4489b350fd272633a855c8cc3441166f232e5307?srcpr) ||
1,0,0,0,1,1,1,1,2x: fix timeout with fallback not cancelling the main source this pr fixes the lack of dispose/cancel call towards the upstream in the timed+fallback `timeout` operator versionin addition the selector version received similar unit tests to ensure they work properly (they did)related: #4944 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4945?srcpr) is 9557% (diff: 100%)> merging [#4945](https://codecovio/gh/reactivex/rxjava/pull/4945?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **003%**```diff@@                2x      #4945   diff @@  files           587        587            lines         37549      37551     +2     methods           0          0            messages          0          0            branches       5655       5655          - hits          35904      35891    -13   - misses          692        702    +10   - partials        953        958     +5   ```> powered by [codecov](https://codecovio?srcpr) last update [a9f1f4f983b6b0](https://codecovio/gh/reactivex/rxjava/compare/a9f1f4f151cecf3fcfc59fcf085fc9cac9223d08983b6b0cd8f671a181dbcd54d6cd68dd2981bb6c?srcpr) ||
1,0,0,0,0,1,1,0,"improve compose() generics resolves #4950i tested and built with the added tests on java 6 7 and 8 not sure if you want to keep them in before merging since theyre not really functional in nature just there to make sure they compile side-note: gets even better on java 8 which removes the need for a type argument at all in those examples!<img width""680"" alt""screen shot 2017-01-08 at 2 58 20 am"" src""https://cloudgithubusercontentcom/assets/1361086/21749199/d4cf405a-d54e-11e6-9e05-2cb6a3259b46png""> || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4972?srcpr) is 9563% (diff: 100%)> merging [#4972](https://codecovio/gh/reactivex/rxjava/pull/4972?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **010%**```diff@@                2x      #4972   diff @@  files           591        591            lines         37959      37959            methods           0          0            messages          0          0            branches       5756       5756          + hits          36264      36302    +38   + misses          721        698    -23   + partials        974        959    -15   ```> powered by [codecov](https://codecovio?srcpr) last update [d173b6da7b01f3](https://codecovio/gh/reactivex/rxjava/compare/d173b6d4f8713907f7a38e00da65c30abfb4a7e2a7b01f3939d872c5349c82e50c3ea4f4351ea6d8?srcpr) || thanks! || "
1,0,0,1,0,1,1,0,2x: dedicated singlezip implementation no dispose on all-success this adds a dedicated implementation for zipping `single`s (adapted from `maybezipx`)routing the original `zip` through `flowable` added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all (when converted to `flowable` `singleobserveronsuccess` becomes `subscriberonnext` + `oncomplete`) since there is only `onsuccess` and `onerror` in `single` there is no need to dispose the sources once all signalled their only `onsuccess`related: #5024 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/5027?srcpr) is 9559% (diff: 9924%)> merging [#5027](https://codecovio/gh/reactivex/rxjava/pull/5027?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **010%**```diff@@                2x      #5027   diff @@  files           609        611     +2     lines         39427      39538   +111     methods           0          0            messages          0          0            branches       6030       6051    +21   + hits          37731      37796    +65   - misses          738        757    +19   - partials        958        985    +27   ```> powered by [codecov](https://codecovio?srcpr) last update [d93ee2bddcbc3b](https://codecovio/gh/reactivex/rxjava/compare/d93ee2bbbb8d8c9949b546974c99032f60c3d09addcbc3be2f56b03f6296b98fdb63863906672b43?srcpr) ||
1,0,0,1,0,1,1,1,2x: fix maybeconcat() subscribe-after-cancel verify others this pr fixes `maybeconcatx` subscribing to the next source when the downstream cancelled the `flowable` sequence from its `onnext` this resulted in executing the subscription side-effects of the source to be immediately cancelled when it called `onsubscribe` on concats `maybeobserver`in addition tests were added to verify the other types dont have this kind of a problemrelated #5100  
1,0,0,0,0,1,1,0,2x: fix window(time size) not completing windows on timeout this pr fixes the operators `flowablewindow(time size)` and `observablewindow(time size)` to complete the current window if the time elapses before the size limit is reachedreported in #5104 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&elh1) report> merging [#5106](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `100%````diff@@             coverage diff             @@##               2x    #5106      +/-   ##+ coverage     956%   9567%   +006%     + complexity    5558     5556       -2       files          615      615                lines        39703    39705       +2       branches      5583     5583              + hits         37959    37986      +27     + misses         758      745      -13     + partials       986      974      -12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93vgltzwquamf2yq) | `8386% <100%> (+026%)` | `4 <ø> (ø)` | :x: || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvd1rpbwvklmphdme) | `8784% <100%> (+003%)` | `4 <ø> (ø)` | :x: || [a/io/reactivex/processors/serializedprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9tzxjpywxpemvkuhjvy2vzc29ylmphdme) | `9255% <ø> (-532%)` | `26% <ø> (-2%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `923% <ø> (-513%)` | `2% <ø> (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <ø> (-409%)` | `2% <ø> (ø)` | || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9729% <ø> (-217%)` | `2% <ø> (ø)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9393% <ø> (-203%)` | `4% <ø> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <ø> (-2%)` | `34% <ø> (-1%)` | || [activex/internal/disposables/disposablehelperjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrglzcg9zywjszuhlbhblci5qyxzh) | `9814% <ø> (-186%)` | `27% <ø> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9629% <ø> (-186%)` | `10% <ø> (-1%)` | ||  and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5106/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5106?srcpr&elfooter) last update [d9e2df9754cc86](https://codecovio/gh/reactivex/rxjava/compare/d9e2df90cb47caef6b32d4912a2c04b80d5f94f7754cc8634ed1197bf480ed31e8940e71031c0dd8?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,2x: fix observablecombinelatest to dispose eagerly this pr fixes `observablecombinelatest` to dispose the sources outside the serialization loop just like `flowablecombinelatest` does this allows cancellation even if the serialization loop is busy/blocking inside an `onnext` emissionin addition a unit test was added to `flowablecombinelatest` as wellreported in #5111 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&elh1) report> merging [#5114](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab6?srcpr&eldesc) will **decrease** coverage by `-007%`> the diff coverage is `100%````diff@@             coverage diff              @@##                2x    #5114      +/-   ##- coverage     9515%   9509%   -007%     - complexity     5561     5565       +4       files           620      620                lines         40011    40014       +3       branches       5632     5632              - hits          38072    38050      -22     - misses          920      944      +24     - partials       1019     1020       +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbwjpbmvmyxrlc3quamf2yq) | `9875% <100%> (+002%)` | `6 <ø> (ø)` | :x: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `8955% <ø> (-747%)` | `2% <ø> (ø)` | || [internal/disposables/arraycompositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvqxjyyxldb21wb3npdgveaxnwb3nhymxllmphdme) | `9285% <ø> (-715%)` | `15% <ø> (-1%)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8393% <ø> (-57%)` | `55% <ø> (ø)` | || [rnal/subscribers/singlepostcompletesubscriberjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvu2luz2xlug9zdenvbxbszxrlu3vic2nyawjlci5qyxzh) | `9487% <ø> (-513%)` | `14% <ø> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8738% <ø> (-421%)` | `56% <ø> (+1%)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% <ø> (-278%)` | `2% <ø> (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% <ø> (-278%)` | `2% <ø> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% <ø> (-262%)` | `2% <ø> (ø)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9407% <ø> (-223%)` | `9% <ø> (ø)` | ||  and [38 more](https://codecovio/gh/reactivex/rxjava/pull/5114/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5114?srcpr&elfooter) last update [a00ea070050275](https://codecovio/gh/reactivex/rxjava/compare/a00ea07a4d2ce409e8dbea66ddbca9c0a77ddab600502753f3828016b036c384f94283d9eebd240b?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,2x: fix timed replay-like components replaying outdated items the timed versions of `flowablereplay()` `replayprocessor` `observablereplay()` and `replaysubject` all replay outdated items to new subscribers and through the `getvalues()` and `size()` state-peeking methods similar to issue #3917 resolved via #4023the fix includes a node-walk for new subscribers that skips old entries some unit tests werent logically considering the emission pattern (ie items timed out shouldnt appear) and have been fixed as wellreported in #5139 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elh1) report> merging [#5140](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a03bf90c19e0eed80c677eb0e3071079220fd392?srcpr&eldesc) will **decrease** coverage by `-001%`> the diff coverage is `100%````diff@@             coverage diff              @@##                2x    #5140      +/-   ##- coverage     9596%   9596%   -001%     + complexity     5611     5601      -10       files           620      620                lines         39820    39850      +30       branches       5599     5603       +4     + hits          38215    38242      +27       misses          633      633              - partials        972      975       +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9876% <100%> (ø)` | `49 <0> (ø)` | :x: || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9009% <100%> (+032%)` | `17 <0> (ø)` | :x: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9711% <100%> (-022%)` | `51 <0> (ø)` | || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9696% <100%> (-114%)` | `18 <0> (ø)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <0%> (-667%)` | `17% <0%> (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% <0%> (-477%)` | `4% <0%> (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <0%> (-409%)` | `2% <0%> (ø)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% <0%> (-409%)` | `21% <0%> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% <0%> (-371%)` | `10% <0%> (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | ||  and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elfooter) last update [a03bf906377b58](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,1x: fix timed replay() not terminating when all items timeout the timed `replay()` operator didnt terminate a late subscriber if all the items timed out in the meantimerelated: #5139  
1,0,0,1,0,1,1,1,2x: fix replay()refcount() leaking items between connections this pr updates `observablereplay()` and `flowablereplay()` **for 2x** to not leak items between reconnections when run with `refcount()` the `replay()` operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data only a new `connect()` clears this data which may or may not happen since `refcount` ensures that there wont be any latecommers to an already completed connection (because it also drops its current subscribers on termination or when reaching zero) the `replay()` can be reset to an empty staterelated: #5172 #5181 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&elh1) report> merging [#5182](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/88c60b9a5b75b07fa23bac460b4a95f0a47bbeba?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%````diff@@             coverage diff             @@##                2x   #5182      +/-   ##- coverage     9604%     96%   -004%     - complexity     5655    5665      +10       files           621     621                lines         40320   40336      +16       branches       5610    5616       +6     + hits          38725   38726       +1     - misses          630     640      +10     - partials        965     970       +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `9871% <100%> (+006%)` | `7 <0> (ø)` | :x: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `9868% <100%> (+007%)` | `7 <0> (ø)` | :x: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9777% <100%> (-026%)` | `22 <4> (+3)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9069% <100%> (+007%)` | `21 <4> (+4)` | :white_check_mark: || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `8833% <0%> (-834%)` | `3% <0%> (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8497% <0%> (-467%)` | `56% <0%> (+1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% <0%> (-426%)` | `32% <0%> (-3%)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% <0%> (-4%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9253% <0%> (-374%)` | `2% <0%> (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | ||  and [33 more](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5182?srcpr&elfooter) last update [88c60b9c2f2435](https://codecovio/gh/reactivex/rxjava/compare/88c60b9a5b75b07fa23bac460b4a95f0a47bbebac2f2435b35c99f36210f85bdad5ac9c0f5004cc0?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: increase timeout on parallel & completable tests this pr increases the timeout on `completabletest` test methods and on `parallelflowabletestparallelismandprefetchasync`related: #5154 #5179 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elh1) report> merging [#5199](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/354a16d08bd55049c37f5928cb846a8127239738?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a````diff@@             coverage diff             @@##                2x   #5199      +/-   ##- coverage     9598%   959%   -008%     + complexity     5679    5673       -6       files           621     621                lines         40611   40611                branches       5632    5632              - hits          38982   38950      -32     - misses          648     671      +23     - partials        981     990       +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% <0%> (-82%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8678% <0%> (-661%)` | `60% <0%> (-2%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% <0%> (-568%)` | `31% <0%> (-4%)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9166% <0%> (-556%)` | `9% <0%> (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% <0%> (-462%)` | `27% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% <0%> (-458%)` | `2% <0%> (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% <0%> (-4%)` | `2% <0%> (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% <0%> (-358%)` | `2% <0%> (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9441% <0%> (-305%)` | `6% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9642% <0%> (-268%)` | `2% <0%> (ø)` | ||  and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elfooter) last update [354a16dd2b3845](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,0,1,1,1,1,1,2x: add resilient versions of parallel map() filter() & doonnext() this pr adds 2 new overloads to `parallelflowable` operators `map` `filter` and `doonnext` to enable per item error handling in case the main function fails with some exception```javaflowablerange(0 2)parallel(1)map(v -> 1 / v parallelfailurehandlingskip)sequential()test()assertresult(1)```the new `parallelfailurehandling` has some default enumeration values to handle the common cases in addition the `bifunction` overload allows bounded retries and/or conditional handling of failuresrelated: #5128 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&elh1) report> merging [#5202](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/21a7a0567a51193734e21b234fa3ed925e65d0ec?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `9842%````diff@@             coverage diff             @@##                2x   #5202      +/-   ##+ coverage     9594%   961%   +015%     - complexity     5677    5709      +32       files           621     625       +4       lines         40611   40991     +380       branches       5632    5675      +43     + hits          38963   39393     +430     + misses          666     627      -39     + partials        982     971      -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/operators/parallel/parallelfilterjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrmlsdgvylmphdme) | `9759% <100%> (ø)` | `6 <0> (ø)` | :arrow_down: || [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% <100%> (ø)` | `49 <6> (+6)` | :arrow_up: || [io/reactivex/parallel/parallelfailurehandlingjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgywlsdxjlsgfuzgxpbmcuamf2yq) | `100% <100%> (ø)` | `3 <3> (?)` | || [internal/operators/parallel/parallelfiltertryjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrmlsdgvyvhj5lmphdme) | `9826% <9826%> (ø)` | `6 <6> (?)` | || [ternal/operators/parallel/paralleldoonnexttryjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsrg9pbk5lehrucnkuamf2yq) | `9833% <9833%> (ø)` | `6 <6> (?)` | || [ex/internal/operators/parallel/parallelmaptryjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvstwfwvhj5lmphdme) | `9833% <9833%> (ø)` | `6 <6> (?)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <0%> (-409%)` | `2% <0%> (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | || [perators/flowable/flowablesequenceequalsinglejava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2vxdwvuy2vfcxvhbfnpbmdszs5qyxzh) | `9661% <0%> (-339%)` | `3% <0%> (ø)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9491% <0%> (-339%)` | `2% <0%> (ø)` | ||  and [46 more](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5202?srcpr&elfooter) last update [21a7a05dc08894](https://codecovio/gh/reactivex/rxjava/compare/21a7a0567a51193734e21b234fa3ed925e65d0ecdc0889412cd9e83d99ee935b7cf3017b9b45dfb9?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || sorry if this is not the correct place for this question however its relevant to the above featurei would like to have an error handler/on error callback but continue the processing or specify the number of retriescan the `parallelfailurehandling` enum be made into an interface instead? i see the enum instances are all used in the same way in all the `tryonnext` methods of the 3 operators (filter map and doonnext) the existing enums can maybe built-in handler instances something like:built-ins:```map(v -> 1 / v parallelfailurehandlingskip) //static instance```some customizable built-ins:```map(v -> 1 / v parallelfailurehandlingretry(5)) //retry 5 times before failing```user defined:```map(v -> 1 / v (retries err) -> { logerror(err) return parrallelfailurehandlingresultskip })```the return values could be `skip`/`ignore` `retry` `stop` `default(val)` or `error(ex)`or perhaps this is already do able using existing api? || please always check the available operators first before asking for a feature: http://reactivexio/rxjava/2x/javadoc/io/reactivex/parallel/parallelflowablehtml#map-ioreactivexfunctionsfunction-ioreactivexfunctionsbifunction-the enums are just convenience implementations of the bifunction variants of the operators ||
1,0,0,0,0,0,1,0,2x: fix images of firstelement flattenasx flatmapiterable this pr links in the new images from #5130 for previously misleading marble diagrams of the operators # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&elh1) report> merging [#5208](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ab0c59094d11142cea4fef70169f053e062d85ec?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a````diff@@             coverage diff             @@##               2x    #5208      +/-   ##- coverage     959%   9588%   -002%     + complexity    5678     5672       -6       files          621      621                lines        40611    40611                branches      5632     5632              - hits         38947    38941       -6     + misses         673      671       -2     - partials       991      999       +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <ø> (ø)` | `168 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9932% <ø> (ø)` | `131 <0> (ø)` | :arrow_down: || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9928% <ø> (+215%)` | `53 <0> (+2)` | :arrow_up: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <ø> (ø)` | `522 <0> (ø)` | :arrow_down: || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `9681% <ø> (ø)` | `57 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `506 <0> (ø)` | :arrow_down: || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9393% <0%> (-607%)` | `4% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `921% <0%> (-439%)` | `10% <0%> (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9333% <0%> (-334%)` | `3% <0%> (ø)` | ||  and [34 more](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5208?srcpr&elfooter) last update [ab0c59073e22cd](https://codecovio/gh/reactivex/rxjava/compare/ab0c59094d11142cea4fef70169f053e062d85ec73e22cd7615b6898a2d0de0bd558b3c9f3f25611?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ### plus unicastx:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/unicastprocessorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/unicastsubjectpng) || yes the default with is set to 640 and these new images are slightly bigger in their native form || thanks for the reviews guys! ||
1,0,0,0,0,1,1,1,2x: fix flowabletolist() onnext/cancel race this pr fixes the `nullpointerexception` that can happen because `cancel` nulls out the value and `onnext` simply dereferences that value in `flowabletolist`reported in #5246 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&elh1) report> merging [#5247](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7c95808f077537428f2ae80fffd15e2848a2de31?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5247/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree)```diff@@             coverage diff             @@##                2x   #5247      +/-   ##- coverage     9604%     96%   -005%     - complexity     5749    5750       +1       files           628     628                lines         41073   41075       +2       branches       5697    5698       +1     - hits          39450   39434      -16     - misses          636     659      +23     + partials        987     982       -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/operators/flowable/flowabletolistjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvg9maxn0lmphdme) | `9677% <100%> (+022%)` | `2 <0> (ø)` | :arrow_down: || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <0%> (-667%)` | `17% <0%> (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% <0%> (-656%)` | `2% <0%> (ø)` | || [/java/io/reactivex/subjects/serializedsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2vyawfsaxplzfn1ymply3quamf2yq) | `8947% <0%> (-632%)` | `26% <0%> (-1%)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8497% <0%> (-57%)` | `56% <0%> (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% <0%> (-462%)` | `27% <0%> (-1%)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <0%> (-409%)` | `2% <0%> (ø)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% <0%> (-4%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8854% <0%> (-397%)` | `62% <0%> (+1%)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% <0%> (-358%)` | `2% <0%> (ø)` | ||  and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&elfooter) last update [7c95808affef41](https://codecovio/gh/reactivex/rxjava/pull/5247?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,improve doondispose javadoc sorry for the earlier pr #5295 :/ this addresses the javadoc issues discussed in #5283- removes the note in `observabledoondispose` which claims its action would be called on terminal events- slightly adjusts the javadocs of the `maybe`/`single`/`completable` variants- adds `@throws` note to some `observable`/`single`/`maybe` `doondispose` as it was present in the `completable` variant # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elh1) report> merging [#5296](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5ab208308249f3387df62d1861ab04c75f0915de?srcpr&eldesc) will **increase** coverage by `015%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5296/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5296      +/-   ##+ coverage     9611%   9626%   +015%     - complexity     5750     5767      +17       files           628      628                lines         41085    41085                branches       5703     5703              + hits          39487    39551      +64     + misses          634      600      -34     + partials        964      934      -30```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `506 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% <ø> (ø)` | `112 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9932% <ø> (ø)` | `131 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <ø> (ø)` | `168 <0> (ø)` | :arrow_down: || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% <0%> (-358%)` | `2% <0%> (ø)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% <0%> (-278%)` | `2% <0%> (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% <0%> (-269%)` | `7% <0%> (ø)` | || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `9666% <0%> (-167%)` | `3% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9552% <0%> (-075%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8289% <0%> (-066%)` | `3% <0%> (ø)` | ||  and [33 more](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&elfooter) last update [5ab20836c6c8f4](https://codecovio/gh/reactivex/rxjava/pull/5296?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: add singleunsubscribeon() this pr adds the `singleunsubscribeon()` operatorrelated: #5300 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elh1) report> merging [#5302](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/db627720e5518845677dff536e6b0f2d9e5c2ea3?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5302/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5302      +/-   ##- coverage     9617%   9609%   -008%       complexity     5756     5756                files           628      629       +1       lines         41085    41112      +27       branches       5703     5705       +2     - hits          39514    39508       -6     - misses          613      629      +16     - partials        958      975      +17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9933% <100%> (ø)` | `132 <1> (+1)` | :arrow_up: || [internal/operators/single/singleunsubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvvbnn1ynnjcmlizu9ulmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <0%> (-667%)` | `17% <0%> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% <0%> (-509%)` | `10% <0%> (-1%)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <0%> (-409%)` | `2% <0%> (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% <0%> (-4%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9328% <0%> (-299%)` | `2% <0%> (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% <0%> (-295%)` | `23% <0%> (-1%)` | || [ex/internal/operators/maybe/maybetimeoutmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgltzw91de1hewjllmphdme) | `9558% <0%> (-295%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% <0%> (-29%)` | `2% <0%> (ø)` | ||  and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elfooter) last update [db62772506d8ee](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,0,1,0,2x: apply promotions for v21 this pr applies the promotions listed in #5243suggested review strategy:- check if the `@experimental` annotation has been removed or turned into `@beta`- check if the `<p>history: 20x` matches the original value of the updated `@since 20x` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&elh1) report> merging [#5307](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/475c05844e065776a6f347555e0f11fc5e3de546?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5307/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5307      +/-   ##- coverage     9609%   9602%   -007%     + complexity     5774     5768       -6       files           630      630                lines         41148    41146       -2       branches       5714     5714              - hits          39542    39512      -30     - misses          630      668      +38     + partials        976      966      -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% <ø> (-239%)` | `38 <0> (-1)` | || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `506 <0> (ø)` | :arrow_down: || [/java/io/reactivex/subscribers/testsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvvgvzdfn1ynnjcmlizxiuamf2yq) | `9927% <ø> (ø)` | `57 <0> (ø)` | :arrow_down: || [n/java/io/reactivex/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgfyywxszwwvugfyywxszwxgbg93ywjszs5qyxzh) | `100% <ø> (ø)` | `49 <0> (ø)` | :arrow_down: || [/main/java/io/reactivex/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgx1z2lucy9seephdmfqbhvnaw5zlmphdme) | `100% <ø> (ø)` | `146 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% <ø> (ø)` | `112 <0> (ø)` | :arrow_down: || [activex/exceptions/protocolviolationexceptionjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzxhjzxb0aw9ucy9qcm90b2nvbfzpb2xhdglvbkv4y2vwdglvbi5qyxzh) | `100% <ø> (ø)` | `1 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <ø> (ø)` | `168 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9933% <ø> (ø)` | `132 <0> (ø)` | :arrow_down: || [java/io/reactivex/subjects/completablesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvq29tcgxldgfibgvtdwjqzwn0lmphdme) | `948% <ø> (ø)` | `35 <0> (ø)` | :arrow_down: ||  and [61 more](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&elfooter) last update [475c0583fe0d2b](https://codecovio/gh/reactivex/rxjava/pull/5307?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,implement maybeswitchifempty(single) adds `maybeswitchifempty(single)` fixes #4544 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&elh1) report> merging [#5582](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/14bebc511b242d38f1956544a86265a6f48e489d?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `9736%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5582/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5582      +/-   ##- coverage     9615%   9613%   -003%     - complexity     5821     5825       +4       files           631      632       +1       lines         41421    41459      +38       branches       5739     5742       +3     + hits          39830    39858      +28     - misses          630      645      +15     + partials        961      956       -5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <100%> (ø)` | `169 <1> (+1)` | :arrow_up: || [rnal/operators/maybe/maybeswitchifemptysinglejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0evnpbmdszs5qyxzh) | `9722% <9722%> (ø)` | `2 <2> (?)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `7948% <0%> (-1881%)` | `2% <0%> (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% <0%> (-573%)` | `57% <0%> (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% <0%> (-527%)` | `20% <0%> (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9347% <0%> (-327%)` | `2% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% <0%> (-284%)` | `31% <0%> (-2%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% <0%> (-257%)` | `6% <0%> (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% <0%> (-197%)` | `17% <0%> (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% <0%> (-154%)` | `28% <0%> (-1%)` | ||  and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&elfooter) last update [14bebc54dadbb9](https://codecovio/gh/reactivex/rxjava/pull/5582?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || im only 50% convinced for the need of this overload || /cc @vanniktech @artem-zinnatullin  ||
1,0,0,0,0,0,1,0,2x: add a sentence to documentation of take() operator #5716 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&elh1) report> merging [#5718](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/da380362afe82b9b77b14952309a156cfda0a152?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5718/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5718      +/-   ##+ coverage     9623%   9627%   +003%     + complexity     5822     5821       -1       files           634      634                lines         41604    41604                branches       5761     5761              + hits          40039    40054      +15     - misses          624      625       +1     + partials        941      925      -16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <ø> (ø)` | `525 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `508 <0> (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% <0%> (-742%)` | `6% <0%> (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9247% <0%> (-216%)` | `9% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9565% <0%> (-164%)` | `2% <0%> (ø)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% <0%> (-154%)` | `28% <0%> (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `6028% <0%> (-142%)` | `32% <0%> (-1%)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9751% <0%> (-125%)` | `64% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9026% <0%> (-089%)` | `61% <0%> (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | ||  and [29 more](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&elfooter) last update [da380367299fe3](https://codecovio/gh/reactivex/rxjava/pull/5718?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: add marbles for observable (12/06) this pr adds some missing marbles to `observable`:- [concatmapcompletable](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapcompletableopng)- [concatmapdelayerror](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapdelayerroropng)- [concatmapeager](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapeageropng)- [concatmapeagerdelayerror](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapeagerdelayerroropng)- [concatmapiterable](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatmapiterableopng)- [doafternext](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/doafternextopng)- [dofinally](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/dofinallyopng)tracked in #5319 images in [comment](https://githubcom/reactivex/rxjava/issues/5319#issuecomment-349595094) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&elh1) report> merging [#5755](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/53d5a235f63ca143c11571cd538ad927c0f8f3ad?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5755/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5755      +/-   ##- coverage     9631%   9623%   -008%     + complexity     5840     5838       -2       files           634      634                lines         41650    41650                branches       5769     5769              - hits          40115    40083      -32     - misses          612      625      +13     - partials        923      942      +19```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `509 <0> (ø)` | :arrow_down: || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% <0%> (-625%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-381%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9298% <0%> (-351%)` | `11% <0%> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8627% <0%> (-327%)` | `2% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% <0%> (-284%)` | `31% <0%> (-2%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% <0%> (-278%)` | `3% <0%> (ø)` | || [ex/internal/subscriptions/subscriptionarbiterjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9tdwjzy3jpchrpb25bcmjpdgvylmphdme) | `9745% <0%> (-255%)` | `47% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% <0%> (-242%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% <0%> (-205%)` | `2% <0%> (ø)` | ||  and [25 more](https://codecovio/gh/reactivex/rxjava/pull/5755/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&elfooter) last update [53d5a2390ea02c](https://codecovio/gh/reactivex/rxjava/pull/5755?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
0,0,0,0,0,0,1,0,rename interface parameters #5762 signed-off-by: shaishavgandhi05 <shaishgandhi@gmailcom> # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&elh1) report> merging [#5766](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7ba9a3e04aeee3ab691002997e82e55fec40e495?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5766/graphs/treesvg?tokenwtcc2htjm2&width650&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5766      +/-   ##+ coverage     9624%   9628%   +003%     - complexity     5805     5809       +4       files           634      634                lines         41607    41607                branches       5770     5770              + hits          40046    40062      +16     + misses          622      617       -5     + partials        939      928      -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9033% <0%> (-435%)` | `2% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% <0%> (-25%)` | `2% <0%> (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% <0%> (-197%)` | `17% <0%> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `983% <0%> (-17%)` | `11% <0%> (ø)` | || [nal/operators/flowable/flowableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwrwfnzxiuamf2yq) | `971% <0%> (-116%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `921% <0%> (-088%)` | `10% <0%> (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% <0%> (-086%)` | `2% <0%> (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9667% <0%> (-067%)` | `48% <0%> (ø)` | || [ivex/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvssm9pbi5qyxzh) | `945% <0%> (-037%)` | `3% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (ø)` | `2% <0%> (ø)` | :arrow_down: ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/5766/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&elfooter) last update [7ba9a3e03f27ce](https://codecovio/gh/reactivex/rxjava/pull/5766?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || good work +1 ||
1,0,0,1,0,1,1,0,2x: add efficient mergewith(single|maybe|completable) overloads this pr adds specialized overloads to the `mergewith` operator in `flowable` and `observable`if accepted the marbles will be updated in a separate prrelated: #5350 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&elh1) report> merging [#5847](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/12c0e3011726b15fc34ebc4dd1a4c67589210898?srcpr&eldesc) will **increase** coverage by `009%`> the diff coverage is `9984%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5847/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&eltree)```diff@@            coverage diff             @@##               2x   #5847      +/-   ##+ coverage     964%   965%   +009%     - complexity    5834    5852      +18       files          640     646       +6       lines        41944   42608     +664       branches      5804    5906     +102     + hits         40438   41119     +681     + misses         582     576       -6     + partials       924     913      -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `532 <3> (+3)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `515 <3> (+3)` | :arrow_up: || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrou2luz2xllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [ors/observable/observablemergewithcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0aenvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [erators/flowable/flowablemergewithcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxroq29tcgxldgfibguuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% <991%> (ø)` | `2 <2> (?)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% <0%> (-625%)` | `2% <0%> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% <0%> (-541%)` | `9% <0%> (-1%)` | ||  and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5847/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&elfooter) last update [12c0e306bd71c9](https://codecovio/gh/reactivex/rxjava/pull/5847?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || conflict resolved there was an expected merge conflict with the `concatwith` pr as they both touched the same test file ||
1,0,0,0,0,0,1,0,2x: add flowableconcatmap{maybesingle}{delayerror} operators this pr adds operators that allow concatenating a mapped sequence of `maybe`s or `single`s with or without delaying their errors:- `concatmapmaybe` (+1 overload with prefetch)- `concatmapmaybedelayerror` (+2 overloads with error mode and prefetch)- `concatmapsingle` (+1 overload with prefetch)- `concatmapsingledelayerror` (+2 overloads with error mode and prefetch)they are in the same pr as the `single` variants implementation is practically the `maybe` implementation minus the `oncomplete` casetheir marbles will be updated in a separate proriginally requested in #4853 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&elh1) report> merging [#5872](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/84004a617557946f9f64f7f362f0dcbe0b798530?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5872/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5872      +/-   ##+ coverage     9654%   9657%   +003%     - complexity     5862     5885      +23       files           647      650       +3       lines         42766    43156     +390       branches       5933     5994      +61     + hits          41289    41679     +390     - misses          568      572       +4     + partials        909      905       -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `553 <12> (+14)` | :arrow_up: || [ternal/operators/mixed/flowableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwtwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% <0%> (-527%)` | `20% <0%> (-1%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% <0%> (-278%)` | `3% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% <0%> (-257%)` | `6% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% <0%> (-214%)` | `5% <0%> (ø)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% <0%> (-197%)` | `17% <0%> (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% <0%> (-167%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% <0%> (-142%)` | `3% <0%> (ø)` | ||  and [27 more](https://codecovio/gh/reactivex/rxjava/pull/5872/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&elfooter) last update [84004a6303e77a](https://codecovio/gh/reactivex/rxjava/pull/5872?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,2x: fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two `observable` methods and adds a trap method to `objecthelper` to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in (eclipses) problems windowreplaces #6012 resolves #6013 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elh1) report> merging [#6014](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5f1ce20a1159a8464bfae2d8b2106039ac520eb2?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6014/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree)```diff@@             coverage diff             @@##                2x   #6014      +/-   ##+ coverage     9828%   983%   +002%     - complexity     6161    6162       +1       files           659     659                lines         44522   44519       -3       branches       6201    6201              + hits          43757   43763       +6     + misses          233     227       -6     + partials        532     529       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `539 <0> (ø)` | :arrow_down: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `100% <100%> (ø)` | `22 <1> (+1)` | :arrow_up: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-323%)` | `9% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9468% <0%> (-194%)` | `2% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% <0%> (-154%)` | `28% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% <0%> (-131%)` | `2% <0%> (ø)` | ||  and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elfooter) last update [5f1ce203689fe5](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,add marble diagrams to the singledelay method here are marbles for `delay` operator in #5788please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&elh1) report> merging [#6076](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c8a98520ee38152d8acce56bdb0a9e9127ccf7cc?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6076/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6076      +/-   ##+ coverage     9826%   9827%   +<01%     - complexity     6192     6193       +1       files           666      666                lines         44806    44806                branches       6206     6206              + hits          44028    44031       +3     - misses          236      237       +1     + partials        542      538       -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <ø> (ø)` | `146 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% <0%> (-458%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `913% <0%> (-435%)` | `2% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% <0%> (-278%)` | `56% <0%> (-2%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% <0%> (-16%)` | `3% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% <0%> (-142%)` | `3% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-12%)` | `2% <0%> (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% <0%> (-12%)` | `67% <0%> (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% <0%> (-073%)` | `2% <0%> (ø)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6076/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&elfooter) last update [c8a9852627af51](https://codecovio/gh/reactivex/rxjava/pull/6076?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || pr is updated with representation of error events || ive updated colors please take a look when you have time thanks! || https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaypnghttps://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelayepnghttps://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelayspnghttps://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysepng || thanks updated ||
1,0,0,0,0,0,1,0,add marble diagram for singlehide operator this should complete `hide` operator in #5788please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i wasnt sure if i should represent somehow that `disposable` is hidden as well if so can you please tell me how to represent that on marble? # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&elh1) report> merging [#6077](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c8a98520ee38152d8acce56bdb0a9e9127ccf7cc?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6077/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6077      +/-   ##+ coverage     9826%   9826%   +<01%       complexity     6192     6192                files           666      666                lines         44806    44806                branches       6206     6206              + hits          44028    44029       +1     - misses          236      237       +1     + partials        542      540       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <ø> (ø)` | `146 <0> (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <0%> (-225%)` | `60% <0%> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9744% <0%> (-171%)` | `11% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% <0%> (-139%)` | `57% <0%> (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% <0%> (-107%)` | `3% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% <0%> (-094%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9489% <0%> (-073%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8658% <0%> (-064%)` | `3% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6077/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&elfooter) last update [c8a98521c179ae](https://codecovio/gh/reactivex/rxjava/pull/6077?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i dont get it why is ci failing ive run tests locally and i dont get that error which ci is reporting || sometimes ci is a bit noisy and some of our millisecond-level tests can fail ive restarted the build ||
1,0,0,0,0,0,1,0,add marbles for singlefrom operators here are marbles for `fromcallable` `frompublisher` and `fromobservable` operators from #5788 marble for `fromcallable`![fromcallable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/fromcallablepng)marble for `frompublisher`![frompublisher](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/frompublisherpng)marble for `fromobservable`![fromobservable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/fromobservablepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&elh1) report> merging [#6087](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/97ebd2c0ba3d1505631b844d2ff5000944be2ae6?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6087/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6087      +/-   ##- coverage     9825%   9818%   -007%     + complexity     6197     6192       -5       files           667      667                lines         44858    44858                branches       6211     6211              - hits          44076    44046      -30     - misses          239      259      +20     - partials        543      553      +10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <100%> (ø)` | `146 <1> (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `90% <0%> (-71%)` | `6% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% <0%> (-314%)` | `59% <0%> (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% <0%> (-257%)` | `2% <0%> (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-216%)` | `9% <0%> (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% <0%> (-205%)` | `2% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-164%)` | `2% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% <0%> (-16%)` | `3% <0%> (ø)` | ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6087/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&elfooter) last update [97ebd2cb647e7c](https://codecovio/gh/reactivex/rxjava/pull/6087?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: several more completable marbles (7/19b) this pr adds a couple of more marble diagrams to `completable` (#5789):#### subscribeon![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesubscribeonpng)#### unsubscribeon![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableunsubscribeonpng)#### tosingle tosingledefault![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletosinglepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletosingledefaultpng)#### toflowable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletoflowablepng)#### tomaybe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabletomaybepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&elh1) report> merging [#6098](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/8b9740840f21d131595dac2115241b1f739b03f2?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6098/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6098      +/-   ##- coverage     9827%   9825%   -003%     - complexity     6194     6197       +3       files           667      667                lines         44862    44862                branches       6213     6213              - hits          44087    44078       -9     - misses          232      234       +2     - partials        543      550       +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% <ø> (ø)` | `117 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% <0%> (-589%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9033% <0%> (-387%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% <0%> (-321%)` | `5% <0%> (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-216%)` | `9% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-12%)` | `2% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% <0%> (-082%)` | `3% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% <0%> (-07%)` | `56% <0%> (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9794% <0%> (-069%)` | `10% <0%> (-1%)` | ||  and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6098/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&elfooter) last update [8b97408f0b83c7](https://codecovio/gh/reactivex/rxjava/pull/6098?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: fix marble of maybeflatmap events to maybesource fix the marble diagram of the event-mapping [`maybeflatmap`](http://reactivexio/rxjava/2x/javadoc/io/reactivex/maybehtml#flatmap-ioreactivexfunctionsfunction-ioreactivexfunctionsfunction-javautilconcurrentcallable-) operator:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapmmmpng)tracked in: #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elh1) report> merging [#6155](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a16f63fa9030dc7ed4a5b9e2b8c948e02d92e557?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6155/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eltree)```diff@@             coverage diff             @@##               2x    #6155      +/-   ##+ coverage     982%   9822%   +001%     + complexity    6198     6197       -1       files          667      667                lines        44857    44857                branches      6213     6213              + hits         44053    44059       +6     + misses         259      255       -4     + partials       545      543       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <ø> (ø)` | `171 <0> (ø)` | :arrow_down: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-272%)` | `2% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9361% <0%> (-266%)` | `3% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% <0%> (-181%)` | `42% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9281% <0%> (-131%)` | `2% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elfooter) last update [a16f63fcee20b9](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,"2x: explain null observer/subscriber error reports in detail from rxjavaplugins this pr is related to issue [#6172](https://githubcom/reactivex/rxjava/issues/6172)with these changes all reactive types will emit detailed error message when `onsubscribe` hook installed using rxjavaplugins returns null `observer/subscriber`:**observable**> ""the rxjavapluginsonsubscribe hook returned a null observer please check the handler provided to rxjavapluginssetonobservablesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins""**flowable**> the rxjavapluginsonsubscribe hook returned a null flowablesubscriber please check the handler provided to rxjavapluginssetonflowablesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**single**> the rxjavapluginsonsubscribe hook returned a null singleobserver please check the handler provided to rxjavapluginssetonsinglesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**maybe**> the rxjavapluginsonsubscribe hook returned a null maybeobserver please check the handler provided to rxjavapluginssetonmaybesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**completable**> the rxjavapluginsonsubscribe hook returned a null completableobserver please check the handler provided to rxjavapluginssetoncompletablesubscribe for invalid null returns further reading: https://githubcom/reactivex/rxjava/wiki/plugins**note :** there was no null check on `observer` returned from `rxjavapluginsonsubscribe(this observer)` method call in `completable`s subscribe() method so ive added it in this pr is that fine?  # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&elh1) report> merging [#6175](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ba7bbb497d43a1353a3e5f81b0887b26bf4cadfb?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6175/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6175      +/-   ##- coverage     9823%   9822%   -002%     - complexity     6196     6199       +3       files           667      667                lines         44879    44880       +1       branches       6214     6214              - hits          44089    44085       -4     + misses          253      252       -1     - partials        537      543       +6```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `566 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <100%> (ø)` | `171 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% <100%> (ø)` | `117 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `541 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <100%> (ø)` | `146 <0> (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-216%)` | `9% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% <0%> (-171%)` | `2% <0%> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9787% <0%> (-171%)` | `11% <0%> (ø)` | ||  and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6175/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&elfooter) last update [ba7bbb4894bb48](https://codecovio/gh/reactivex/rxjava/pull/6175?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
1,0,0,0,0,0,1,0,"2x: fix refcount termination-reconnect race this pr modifies the `refcount` operator (in both `flowable` and `observable` types) to avoid certain termination-reconnection racesthe original race could happen when the refcounted source terminated at the same time as new observers arrived leaving those new observers hanging as they practically joined a dying connection and got possibly undercut by the `dispose` callthe change involve a new internal interface `resettableconnection` that will allow resetting the connection object inside the connectable source if it is equal to the connection object known by the initiator of the original `connect` callfixes #6185 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&elh1) report> merging [#6187](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/2e566fbc34e47de59cf76d862e5bfb631e36215c?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6187/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6187      +/-   ##- coverage     9826%   9824%   -002%     - complexity     6197     6203       +6       files           667      667                lines         44880    44888       +8       branches       6214     6218       +4       hits          44100    44100              - misses          245      251       +6     - partials        535      537       +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9511% <100%> (+061%)` | `20 <1> (-3)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9917% <100%> (+054%)` | `20 <1> (-3)` | :arrow_down: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% <100%> (ø)` | `27 <0> (+5)` | :arrow_up: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% <100%> (ø)` | `27 <0> (+5)` | :arrow_up: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-672%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <0%> (-225%)` | `60% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% <0%> (-214%)` | `5% <0%> (ø)` | ||  and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6187/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&elfooter) last update [2e566fb05ac5d1](https://codecovio/gh/reactivex/rxjava/pull/6187?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks for the fix @akarnokd and the report @bernhardreu a release in the next couple of weeks with this change would be very welcome (`share` is a critical path for me) /cc @superevensteven @philipgroom || @davidmoten sure #6194 || @akarnokd this seems to fix the issue for `replay()refcount()` but im seeing the same test fail intermittently with `publish()refcount()` (aka `share()`):```    @test    fun `test refcount race conditions`() {        for (i in 0 until 10_000) {            val observable  observablejust(1)publish()refcount()            val observer1  observable                subscribeon(schedulersio())                test()            val observer2  observable                subscribeon(schedulersio())                test()            observer1                withtag(""observer1 $i"")                awaitdone(5 timeunitseconds)                assertresult(1)            observer2                withtag(""observer2 $i"")                awaitdone(5 timeunitseconds)                assertresult(1)        }    }```the actual failure is obviously unpredictable due to the race conditions but it usually fails pretty early  in this case it failed at `i14`:```javalangassertionerror: value count differs expected: 1 [1] but was: 0 [] (latch  1 values  0 errors  0 completions  0 timeout! disposed! tag  observer2 14)expected :1 [1] actual   :0 [] (latch  1 values  0 errors  0 completions  0 timeout! disposed! tag  observer2 14)``` || @jhansche it is possible one of the observers connect right between onnext and oncomplete thus it may not receive the value however they should both complete no timeout i put in a fresh issue #6501 and will investigate further tomorrow || "
1,0,0,0,0,0,1,0,#6195 fix flowablereduce(bifunction) javadoc empty source does not signal nosuchelementexceptionresolves #6195 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&elh1) report> merging [#6197](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c7d91c68ef8011f9d753111a8c839297850aeb66?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6197/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6197      +/-   ##+ coverage     9822%   9824%   +001%     - complexity     6197     6205       +8       files           667      667                lines         44888    44888                branches       6218     6218              + hits          44091    44099       +8     + misses          253      249       -4     + partials        544      540       -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <ø> (ø)` | `566 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9084% <0%> (-523%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% <0%> (-205%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9275% <0%> (-097%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% <0%> (-082%)` | `2% <0%> (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9741% <0%> (-033%)` | `6% <0%> (ø)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6197/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&elfooter) last update [c7d91c6d2f1ca3](https://codecovio/gh/reactivex/rxjava/pull/6197?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,change error message in observablefromarray changed the error message when an element at position i is null to what was suggested in #6460 could you please update these locations as well? https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l129https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l159https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l212https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/internal/operators/flowable/flowablefromarrayjava#l242 || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&elh1) report> merging [#6461](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/c04cfb8366534560e045f86201c05991763e1643?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6461/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6461      +/-   ##+ coverage     9826%   9828%   +001%     + complexity     6294     6292       -2       files           675      675                lines         45173    45173                branches       6246     6246              + hits          44391    44400       +9     + misses          246      237       -9       partials        536      536```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [internal/operators/flowable/flowablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbufycmf5lmphdme) | `9491% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [rnal/operators/observable/observablefromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzyb21bcnjhes5qyxzh) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8758% <0%> (-85%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9179% <0%> (-299%)` | `2% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-239%)` | `2% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% <0%> (-193%)` | `29% <0%> (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% <0%> (-107%)` | `3% <0%> (ø)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9597% <0%> (-101%)` | `10% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% <0%> (-094%)` | `2% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6461/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&elfooter) last update [c04cfb8fa8abac](https://codecovio/gh/reactivex/rxjava/pull/6461?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || sure its done ||
1,0,0,1,0,1,1,1,remove redundant methods from sample(observable) resolves: #6468 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&elh1) report> merging [#6469](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/deeb14150ac21ad8c7b38c1ac692be487375faf5?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6469/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6469      +/-   ##+ coverage     9826%   9829%   +003%     + complexity     6295     6291       -4       files           675      675                lines         45173    45159      -14       branches       6246     6244       -2     + hits          44388    44390       +2     + misses          247      240       -7     + partials        538      529       -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/operators/flowable/flowablesamplepublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxluhvibglzagvylmphdme) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [ors/observable/observablesamplewithobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvdpdghpynnlcnzhymxllmphdme) | `9868% <100%> (-012%)` | `3 <0> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% <0%> (-242%)` | `2% <0%> (ø)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% <0%> (-193%)` | `29% <0%> (-1%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% <0%> (-142%)` | `3% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% <0%> (-139%)` | `57% <0%> (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% <0%> (-12%)` | `67% <0%> (-1%)` | ||  and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6469/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&elfooter) last update [deeb141308f7d0](https://codecovio/gh/reactivex/rxjava/pull/6469?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || could you also check `flowablesample(flowable)`? || > could you also check `flowablesample(flowable)`?ill check into it || done with the `flowablesample` ||
1,0,0,1,0,1,1,1,3x: connectableflowable/connetableobservabe redesign this pr changes the connectable api to have a specific `reset` method to reset a terminated connectable source as part of the official apiin 2x when `publish()` terminated it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call `connect()` again (see #6501) however `replay()` did not reset itself thus late consumers got the cached events however a reconnect started the sequence and new consumers may have missed itemsin 3x this two corner cases have been fixed by the introduction of `reset()` both `publish` and `replay` now remain in their terminated state until `reset` is called if the connection is disposed it will automatically reset their state just like before the state transitions are as follows:1 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `reset()` -> **fresh**2 **fresh** -> `connect()` -> **running** -> `dispose()` -> **fresh**3 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `dispose()` -> **fresh**4 **fresh** -> `connect()` -> **running** -> `oncomplete()`/`onerror()` -> **terminated** -> `connect()` -> **running**this does resolve the race condition with `publish()refcount()` described in #6501in addition there are some changes to `flowablepublish()`s behavior:it no longer keeps consuming the upstream if there are no subscribers this implies if the source terminates while there are unconsumed items in the internal buffer those will be available for observation*i have no strong preference on this property and in comparison `observablepublish` drops items because there is no backpressure buffer in its implementation*upstream errors are not reported to the `rxjavapluginsonerror` handler when if there are no subscribers but have to be observed via a subscriber*because terminal events are available until `reset` now we cant know really if there is going to be a subscriber or not however it might be possible to detect the no-consumer case upon an error and still report it when `reset` or `dispose` is called*resolves #5628resolves #5899 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elh1) report> merging [#6519](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/583c4e71fd7bedd73b05d382a429e1be588e39a3?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `9535%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6519/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree)```diff@@             coverage diff             @@##               3x    #6519      +/-   ##- coverage     982%   9817%   -003%     - complexity    6245     6247       +2       files          675      675                lines        45051    45011      -40       branches      6225     6211      -14     - hits         44241    44189      -52     - misses         275      283       +8     - partials       535      539       +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [o/reactivex/observables/connectableobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2ywjszxmvq29ubmvjdgfibgvpynnlcnzhymxllmphdme) | `100% <ø> (ø)` | `12 <0> (ø)` | :arrow_down: || [va/io/reactivex/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzmxvd2fibgvzl0nvbm5ly3rhymxlrmxvd2fibguuamf2yq) | `100% <ø> (ø)` | `12 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `565 <0> (ø)` | :arrow_down: || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `100% <100%> (+53%)` | `18 <18> (+7)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `540 <1> (ø)` | :arrow_down: || [ernal/operators/observable/observablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlzknvdw50lmphdme) | `100% <100%> (ø)` | `24 <0> (-4)` | :arrow_down: || [/internal/operators/flowable/flowablerefcountjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvmq291bnquamf2yq) | `100% <100%> (ø)` | `24 <0> (-4)` | :arrow_down: || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9837% <40%> (-026%)` | `20 <1> (ø)` | || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9435% <40%> (-059%)` | `20 <1> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9655% <9632%> (+034%)` | `18 <17> (+7)` | :arrow_up: ||  and [33 more](https://codecovio/gh/reactivex/rxjava/pull/6519/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&elfooter) last update [583c4e736a8733](https://codecovio/gh/reactivex/rxjava/pull/6519?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,"3x: remove `test` from `testxxx` method names create a validator fix #6518- [x] create validator- [x] automatically rename methods ""testxxx"" to ""xxx"" (analog to [fixlicenseheaders](https://githubcom/reactivex/rxjava/blob/3x/src/test/java/io/reactivex/validators/fixlicenseheadersjava) check)- [x] rename methods # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&elh1) report> merging [#6525](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/de4ce93d91426bfc20c986287b39bc168d524e46?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6525/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6525      +/-   ##+ coverage     9816%   9819%   +003%     + complexity     6251     6248       -3       files           675      675                lines         45011    45011                branches       6211     6211              + hits          44183    44199      +16     + misses          286      280       -6     + partials        542      532      -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9316% <0%> (-513%)` | `2% <0%> (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9275% <0%> (-194%)` | `2% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% <0%> (-139%)` | `57% <0%> (-1%)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% <0%> (-106%)` | `2% <0%> (ø)` | || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% <0%> (-085%)` | `3% <0%> (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% <0%> (-082%)` | `2% <0%> (ø)` | || [reactivex/internal/queue/spsclinkedarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0xpbmtlzefycmf5uxvldwuuamf2yq) | `9682% <0%> (-08%)` | `38% <0%> (-1%)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9936% <0%> (-064%)` | `64% <0%> (-1%)` | || [x/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcc5qyxzh) | `8763% <0%> (-053%)` | `3% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6525/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&elfooter) last update [de4ce93aa405f6](https://codecovio/gh/reactivex/rxjava/pull/6525?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i was doing a massive set of changes to the test files myself so it would be great you rolled back the renames kept the validator code but not fail when violations are found ill merge in #6526 then just the validator then we can enable the offline/ci failure mode and fix the names in a fresh pr || i added `@ignore` annotation for now and removed a commit with the actual renamingi will open a new pr when #6526 and this one are merged ||"
1,0,0,1,0,1,1,1,3x: add concatmap with scheduler guaranteeing where the mapper runs this pr adds an overload to `concatmap` and `concatmapdelayerror` in both `flowable` and `observable` which makes sure the `mapper` function is always executed on a dedicated schedulerby default `concatmap` may execute the `mapper` function on various threads: the subscribing thread the upstream thread generating the items to be mapped or the thread where the generated inner source terminates these overloads remove this kind of uncertaintythe implementation is a copy of the original concatmap instead of an extension so that optimizations for the non-scheduled variants still work without extra overheadoverloads to the `concatmap{single|maybe|completable}` and `concatmap{single|maybe|completable}delayerror` *may be added* in a separate pr laterresolves #6447 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elh1) report> merging [#6538](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/94ae79572715d5e6f9d6e63d906069d72990f1ba?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9886%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6538/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eltree)```diff@@             coverage diff             @@##               3x    #6538      +/-   ##+ coverage     982%   9827%   +007%     - complexity    6198     6214      +16       files          680      682       +2       lines        44976    45505     +529       branches      6202     6288      +86     + hits         44168    44722     +554     + misses         259      248      -11     + partials       549      535      -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `575 <3> (+3)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `550 <3> (+3)` | :arrow_up: || [ators/observable/observableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcfnjagvkdwxlci5qyxzh) | `9882% <9882%> (ø)` | `4 <4> (?)` | || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwu2nozwr1bgvylmphdme) | `9883% <9883%> (ø)` | `4 <4> (?)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8936% <0%> (-426%)` | `9% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% <0%> (-16%)` | `3% <0%> (ø)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% <0%> (-113%)` | `6% <0%> (ø)` | ||  and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elfooter) last update [94ae79500ce78b](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,3x: remove buffer/window with supplier & onexceptionresumenext this pr removes 3 kinds of operators that had no noticeable use bases or use cases on their own in the past years- `buffer(supplier [ supplier])`- `window(supplier [ int])`- `onexceptionresumenext(<source>)`resolves #6554 resolves #6555 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elh1) report> merging [#6564](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/71945f3b5f0cb4dcb358172b749710c7d32cb96e?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6564/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6564      +/-   ##+ coverage     9819%   9819%   +<01%     + complexity     6199     6181      -18       files           682      678       -4       lines         45461    44886     -575       branches       6290     6212      -78     - hits          44640    44076     -564     - misses          268      274       +6     + partials        553      536      -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `565 <0> (-5)` | :arrow_down: || [al/operators/observable/observableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9urxjyb3jozxh0lmphdme) | `100% <100%> (ø)` | `2 <1> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `540 <0> (-5)` | :arrow_down: || [ternal/operators/flowable/flowableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt25fcnjvck5lehquamf2yq) | `100% <100%> (ø)` | `2 <1> (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-523%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% <0%> (-25%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-239%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% <0%> (-219%)` | `2% <0%> (ø)` | ||  and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elfooter) last update [71945f3caeba3a](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,3x: remove buffer/window with supplier & onexceptionresumenext this pr removes 3 kinds of operators that had no noticeable use bases or use cases on their own in the past years- `buffer(supplier [ supplier])`- `window(supplier [ int])`- `onexceptionresumenext(<source>)`resolves #6554 resolves #6555 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elh1) report> merging [#6564](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/71945f3b5f0cb4dcb358172b749710c7d32cb96e?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6564/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6564      +/-   ##+ coverage     9819%   9819%   +<01%     + complexity     6199     6181      -18       files           682      678       -4       lines         45461    44886     -575       branches       6290     6212      -78     - hits          44640    44076     -564     - misses          268      274       +6     + partials        553      536      -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `565 <0> (-5)` | :arrow_down: || [al/operators/observable/observableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9urxjyb3jozxh0lmphdme) | `100% <100%> (ø)` | `2 <1> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `540 <0> (-5)` | :arrow_down: || [ternal/operators/flowable/flowableonerrornextjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt25fcnjvck5lehquamf2yq) | `100% <100%> (ø)` | `2 <1> (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-523%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% <0%> (-25%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-239%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `927% <0%> (-219%)` | `2% <0%> (ø)` | ||  and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6564/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&elfooter) last update [71945f3caeba3a](https://codecovio/gh/reactivex/rxjava/pull/6564?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,fix issue #6576 - observableblockingsubscribe compares blockingobserverterminated with wrong object fix #6576  compare with `v` instead of `o` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&elh1) report> merging [#6577](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a38268c738af7ae1ca50dc4af2bfbb5713361411?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6577/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6577      +/-   ##+ coverage     9821%   9822%   +<01%     - complexity     6184     6186       +2       files           678      678                lines         44900    44900                branches       6211     6211              + hits          44099    44101       +2     - misses          263      268       +5     + partials        538      531       -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rators/observable/observableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszujsb2nraw5nu3vic2nyawjllmphdme) | `9714% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `913% <0%> (-145%)` | `2% <0%> (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9645% <0%> (-13%)` | `6% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-12%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9565% <0%> (-109%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% <0%> (-107%)` | `5% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% <0%> (-094%)` | `2% <0%> (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9924% <0%> (-076%)` | `3% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6577/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&elfooter) last update [a38268c92c8fdd](https://codecovio/gh/reactivex/rxjava/pull/6577?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel/dispose call to the plugin error handler (ie becoming undeliverable excptions)in addition the terminal event/error delivery has been unified in many other operators so that the terminal-indicator exception is never leakedthere will be a separate pr about cleaning up the `addthrowable` usage cases (#6611)fixes: #6587 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elh1) report> merging [#6612](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/28e24dc23b35d92cc9710ebc05bf69f2e0d69879?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `979%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6612/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6612      +/-   ##- coverage     9817%   9815%   -002%     - complexity     6180     6186       +6       files           678      678                lines         44910    44771     -139       branches       6214     6172      -42     - hits          44091    43947     -144     - misses          275      279       +4     - partials        544      545       +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrou2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [ava/io/reactivex/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1nlcmlhbgl6zwrpynnlcnzlci5qyxzh) | `100% <100%> (ø)` | `27 <1> (ø)` | :arrow_down: || [ators/observable/observableflatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9571% <100%> (-024%)` | `2 <0> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9907% <100%> (-093%)` | `2 <0> (ø)` | || [va/io/reactivex/internal/util/atomicthrowablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9bdg9tawnuahjvd2fibguuamf2yq) | `100% <100%> (ø)` | `23 <15> (+15)` | :arrow_up: || [lowable/flowableflatmapcompletablecompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcenvbxbszxrhymxlq29tcgxldgfibguuamf2yq) | `9615% <100%> (-024%)` | `3 <0> (ø)` | || [ternal/operators/mixed/flowableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwtwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: ||  and [59 more](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elfooter) last update [28e24dc822145d](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || nice ||
1,0,0,0,0,1,1,0,3x: avoid using systemgetproperties() due to security restrictions change the code in the `schedulerpoolfactory` to use `systemgetproperty` directly also fix property names to `rx3` as now both v2 and v3 could run togetherfixes #6636 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elh1) report> merging [#6637](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/97790c6112810197c1d418a17da79c2a839d3e8b?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6637/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eltree)```diff@@             coverage diff             @@##                3x   #6637      +/-   ##+ coverage     9816%   982%   +003%     - complexity     6182    6195      +13       files           678     678                lines         44801   44806       +5       branches       6177    6177              + hits          43981   44002      +21     + misses          278     276       -2     + partials        542     528      -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava3/internal/schedulers/computationschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0nvbxb1dgf0aw9uu2nozwr1bgvylmphdme) | `9753% <ø> (ø)` | `14 <0> (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <ø> (ø)` | `540 <0> (ø)` | :arrow_down: || [xjava3/internal/schedulers/newthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl05ld1rocmvhzfnjagvkdwxlci5qyxzh) | `100% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: || [va/io/reactivex/rxjava3/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zy2hlzhvszxjzl1njagvkdwxlcnmuamf2yq) | `100% <ø> (ø)` | `11 <0> (ø)` | :arrow_down: || [x/rxjava3/internal/schedulers/singleschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1npbmdszvnjagvkdwxlci5qyxzh) | `9294% <ø> (ø)` | `15 <0> (ø)` | :arrow_down: || [tivex/rxjava3/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0lvu2nozwr1bgvylmphdme) | `8936% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `565 <1> (ø)` | :arrow_down: || [ava3/internal/schedulers/schedulerpoolfactoryjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlclbvb2xgywn0b3j5lmphdme) | `100% <100%> (ø)` | `19 <6> (+6)` | :arrow_up: || [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `100% <100%> (ø)` | `11 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8819% <0%> (-625%)` | `2% <0%> (ø)` | ||  and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elfooter) last update [97790c62e7246d](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ok ||
1,0,0,0,0,0,1,0,3x: add missing marble diagams to single add (hopefully) all remaining missing marble diagrams to `single`resolves #5788![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleconcatarrayeagerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerroripng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerrorppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerror2png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerror3png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlemergedelayerror4png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleunsafecreatepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleusingpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleusingbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlewrappng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecachepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecastpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptiontpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptiontspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledooneventpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockinggetpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleliftpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecontainsfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlecontainspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorresumewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonterminatedetachpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryf2png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrynpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrynfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretrywhenpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribeccpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribec2png)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlesubscribewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletakeuntilcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletakeuntilspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletakeuntilppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletimeoutsbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleunsubscribeonpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletestpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singletestbpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptionppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptionopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptionspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledelaysubscriptioncpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singledematerializepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&elh1) report> merging [#6668](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/cb7ff83a2444731dd7eca4760e9410a6c2980b6d?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6668/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&eltree)```diff@@             coverage diff             @@##               3x    #6668      +/-   ##+ coverage     981%   9812%   +001%       complexity    6187     6187                files          677      677                lines        44682    44682                branches      6169     6169              + hits         43837    43843       +6     + misses         303      299       -4     + partials       542      540       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <ø> (ø)` | `148 <0> (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% <0%> (-635%)` | `2% <0%> (ø)` | || [rxjava3/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvuxvldwvecmfpbk9ic2vydmvylmphdme) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9114% <0%> (-209%)` | `2% <0%> (ø)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9861% <0%> (-139%)` | `57% <0%> (-1%)` | || [reactivex/rxjava3/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1vuawnhc3rqcm9jzxnzb3iuamf2yq) | `988% <0%> (-12%)` | `67% <0%> (-1%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9197% <0%> (-083%)` | `19% <0%> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9436% <0%> (-071%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9749% <0%> (+027%)` | `3% <0%> (ø)` | :arrow_down: ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6668/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&elfooter) last update [cb7ff83ecfedfd](https://codecovio/gh/reactivex/rxjava/pull/6668?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,3x: fix self-see references some comments - some `@see` should point to the other party (plain <-> `delayerror`)- add a few `@see` to the nearby operators- comments no longer apply in `blockingxmostrecent` source code- add a comment from #6728 to `actiondisposable`replaces #6728  
1,0,0,0,0,0,1,0,3x: update singlezip marble diagrams (4 cases) related #5788-----![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlezipipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlezipnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleziparraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlezipwithpng)  
1,0,1,0,0,0,1,0,add functionalinterface annotations resolves #6768 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elh1) report> merging [#6773](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/6ba932c9a3752c6d85d65bd2292c3a47cab64fd6?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6773/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eltree)```diff@@             coverage diff             @@##               3x    #6773      +/-   ##+ coverage     982%   9821%   +<01%     - complexity    6183     6190       +7       files          681      681                lines        44776    44776                branches      6164     6164              + hits         43973    43977       +4     + misses         280      279       -1     + partials       523      520       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9366% <0%> (-282%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9047% <0%> (-239%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% <0%> (-105%)` | `2% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% <0%> (-095%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9665% <0%> (-084%)` | `3% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% <0%> (-084%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9416% <0%> (-073%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `936% <0%> (-059%)` | `2% <0%> (ø)` | || [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3duaw1lzc5qyxzh) | `9662% <0%> (-057%)` | `5% <0%> (ø)` | ||  and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elfooter) last update [6ba932c23ad4b9](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,3x: [java 8] add autocloseable <-> disposable conversions nicen docs add `disposablesfromautocloseable` and `disposablestoautocloseable` methods improve javadocs stylingresolves #6772resolves #6777 you could also do```javainterface disposable extends autocloseable {  boolean isdisposed()  void dispose()  default void close() {    dispose()  }}``` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elh1) report> merging [#6780](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8d41cc5801eecac4acc38eee7adcee642de24385?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6780/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6780      +/-   ##+ coverage     9822%   9826%   +003%     - complexity     6236     6241       +5       files           688      689       +1       lines         45041    45053      +12       branches       6193     6193              + hits          44243    44270      +27     + misses          280      273       -7     + partials        518      510       -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ctivex/rxjava3/disposables/runnabledisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9sdw5uywjszurpc3bvc2fibguuamf2yq) | `100% <ø> (ø)` | `3 <0> (ø)` | :arrow_down: || [eactivex/rxjava3/disposables/futuredisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9gdxr1cmveaxnwb3nhymxllmphdme) | `100% <ø> (ø)` | `6 <0> (ø)` | :arrow_down: || [x/rxjava3/disposables/autocloseabledisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9bdxrvq2xvc2vhymxlrglzcg9zywjszs5qyxzh) | `100% <100%> (ø)` | `3 <3> (?)` | || [eactivex/rxjava3/disposables/actiondisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9by3rpb25eaxnwb3nhymxllmphdme) | `100% <100%> (ø)` | `3 <1> (+1)` | :arrow_up: || [/io/reactivex/rxjava3/disposables/disposablesjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9eaxnwb3nhymxlcy5qyxzh) | `100% <100%> (ø)` | `10 <2> (+2)` | :arrow_up: || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% <0%> (-25%)` | `2% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% <0%> (-182%)` | `3% <0%> (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% <0%> (-114%)` | `3% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6780/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&elfooter) last update [8d41cc5b5e6b61](https://codecovio/gh/reactivex/rxjava/pull/6780?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive tried `disposable extends autocloseable` before and ended up with hundreds of warnings about unclosed resources id rather keep them separate ||
1,0,0,1,1,1,1,1,diamond operators in unit tests flowable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal/operators/flowable there is one test fail in completabletestrepeatnormal  but diamond is not the cause there is last stack entry: javalangassertionerror: expected:<6> but was:<5>	at orgjunitassertfail(assertjava:88)this pr is part of  #6767 issue resolving  
1,0,0,0,0,1,1,1,3x: xprocessoroffer to throw npe immediately make `offer` throw a `nullpointerexception` immediately instead of turning it into an error signal in addition have `multicastprocessoroffer` throw an `illegalstateexception` if called when the processor is in fusion moderesolves #6794 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elh1) report> merging [#6799](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3d00eb188bad1d49aa058e896ad9d1b5026eba7d?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6799/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6799      +/-   ##- coverage     9821%   9817%   -005%       complexity     6375     6375                files           711      711                lines         46217    46214       -3       branches       6329     6330       +1     - hits          45393    45370      -23     - misses          298      309      +11     - partials        526      535       +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9802% <100%> (+144%)` | `49 <4> (-2)` | :arrow_down: || [reactivex/rxjava3/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1b1ymxpc2hqcm9jzxnzb3iuamf2yq) | `100% <100%> (ø)` | `42 <4> (-1)` | :arrow_down: || [activex/rxjava3/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl011bhrpy2fzdfbyb2nlc3nvci5qyxzh) | `9868% <100%> (+132%)` | `84 <4> (+1)` | :arrow_up: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% <0%> (-1966%)` | `2% <0%> (ø)` | || [observable/observablewindowsubscribeinterceptjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93u3vic2nyawjlsw50zxjjzxb0lmphdme) | `875% <0%> (-125%)` | `4% <0%> (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9285% <0%> (-318%)` | `2% <0%> (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9181% <0%> (-273%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9114% <0%> (-261%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% <0%> (-182%)` | `3% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% <0%> (-175%)` | `2% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elfooter) last update [3d00eb1482bd2b](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: [java 8] add flattenstreamasx to maybe/single add- `maybeflattenstreamasflowable`- `maybeflattenstreamasobservable`- `singleflattenstreamasflowable`- `singleflattenstreamasobservable`related #6776(in addition adjust the validators to appreciate the new patterns)marbles:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasflowablempng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasobservablempng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasflowablespng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flattenstreamasobservablespng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&elh1) report> merging [#6805](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/79f8e6dde6446b1aa33c146eaedbb958086daf56?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6805/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6805      +/-   ##- coverage     9827%   9822%   -006%     - complexity     6372     6381       +9       files           711      715       +4       lines         46243    46496     +253       branches       6329     6371      +42     + hits          45446    45670     +224     - misses          282      299      +17     - partials        515      527      +12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <ø> (ø)` | `553 <0> (ø)` | :arrow_down: || [a3/internal/jdk8/maybeflattenstreamasflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l01hewjlrmxhdhrlbln0cmvhbufzrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [/internal/jdk8/maybeflattenstreamasobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l01hewjlrmxhdhrlbln0cmvhbufzt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <100%> (ø)` | `179 <2> (+2)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `153 <2> (+2)` | :arrow_up: || [3/internal/jdk8/singleflattenstreamasflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1npbmdszuzsyxr0zw5tdhjlyw1bc0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [internal/jdk8/singleflattenstreamasobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1npbmdszuzsyxr0zw5tdhjlyw1bc09ic2vydmfibguuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% <0%> (-826%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% <0%> (-556%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6805/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&elfooter) last update [79f8e6df455cd2](https://codecovio/gh/reactivex/rxjava/pull/6805?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,3x: fix flowableflatmap not canceling the inner sources on outer error the outer `onerror` did not cancel the inner sources the `observable` variant works correctly but both received an unit test to verify the behavior2x will be fixed in a separate prrelated #6825 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&elh1) report> merging [#6826](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/84677c56097c5cc3d1880165e092925d794e3e42?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6826/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6826      +/-   ##- coverage     9827%   9826%   -001%     - complexity     6378     6383       +5       files           715      715                lines         46482    46485       +3       branches       6371     6373       +2       hits          45678    45678              - misses          285      287       +2     - partials        519      520       +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [3/internal/operators/flowable/flowableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwlmphdme) | `9008% <100%> (+008%)` | `4 <0> (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% <0%> (-826%)` | `2% <0%> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% <0%> (-634%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8968% <0%> (-318%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9302% <0%> (-117%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% <0%> (-086%)` | `2% <0%> (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% <0%> (-064%)` | `6% <0%> (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `8996% <0%> (-034%)` | `3% <0%> (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9741% <0%> (ø)` | `6% <0%> (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9281% <0%> (+082%)` | `19% <0%> (ø)` | :arrow_down: ||  and [10 more](https://codecovio/gh/reactivex/rxjava/pull/6826/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&elfooter) last update [84677c5b74203d](https://codecovio/gh/reactivex/rxjava/pull/6826?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,3x: add maybe/single/completable blockingsubscribe add the missing `blockingsubscribe` methods to `maybe` `single` and `completable` for symmetry with `flowable` and `observable`usually wed like to avoid blocking but now that project loom (preview) transparently turns latch-based awaiting into suspension inside virtual threads they will act as free interop operators for exiting the reactive world into the continuation worldrelated: #6852marbles:#### maybe![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribeccpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribeccapng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeblockingsubscribeopng)#### single![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribecpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribeccpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleblockingsubscribeopng)#### completable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribeapng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribeacpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableblockingsubscribeopng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&elh1) report> merging [#6862](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/49f1a6d0f0540d6b98e2c11d70ad54ff0c4bc18f?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6862/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6862      +/-   ##- coverage     9828%   9824%   -004%     - complexity     6380     6413      +33       files           715      716       +1       lines         46524    46664     +140       branches       6387     6396       +9     + hits          45726    45845     +119     - misses          282      296      +14     - partials        516      523       +7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava3/internal/observers/blockingmultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvqmxvy2tpbmdndwx0au9ic2vydmvylmphdme) | `100% <100%> (ø)` | `23 <4> (+4)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <100%> (ø)` | `183 <5> (+5)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `124 <4> (+4)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `155 <4> (+4)` | :arrow_up: || [nal/observers/blockingdisposablemultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvqmxvy2tpbmdeaxnwb3nhymxltxvsdglpynnlcnzlci5qyxzh) | `100% <100%> (ø)` | `20 <20> (?)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% <0%> (-635%)` | `2% <0%> (ø)` | || [java3/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjlu2luz2xlt2jzzxj2zxiuamf2yq) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9487% <0%> (-342%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% <0%> (-261%)` | `2% <0%> (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% <0%> (-247%)` | `50% <0%> (ø)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6862/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&elfooter) last update [49f1a6d4ae6b1b](https://codecovio/gh/reactivex/rxjava/pull/6862?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,3x: add completableonerrorresumewith this pr adds the missing `completableonerrorresumewith` present in the rest of the base classesalso marbles for `maybeonerrorresumenext` and `maybeonerrorresumewith` have been updatedrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableonerrorresumewithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorresumenextpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorresumewithpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elh1) report> merging [#6868](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/ad1840b1b591206e5eeb10c07b1b126fbbac3560?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6868/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6868      +/-   ##+ coverage     9828%   9831%   +002%     - complexity     6429     6432       +3       files           719      719                lines         46744    46746       +2       branches       6401     6401              + hits          45944    45958      +14     + misses          283      278       -5     + partials        517      510       -7```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `185 <0> (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `125 <1> (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% <0%> (-1198%)` | `2% <0%> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% <0%> (-106%)` | `3% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% <0%> (-084%)` | `2% <0%> (ø)` | || [al/operators/observable/observablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93vgltzwquamf2yq) | `9612% <0%> (-065%)` | `4% <0%> (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9559% <0%> (-063%)` | `3% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6868/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&elfooter) last update [ad1840b0ad2a1e](https://codecovio/gh/reactivex/rxjava/pull/6868?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: add single/completable retryuntil + marbles `retryuntil` was missing from `single` and `completable`added marble for `maybe` as wellrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetryuntilpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elh1) report> merging [#6869](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/320a675ec124cde872124d3bafd685e6a8998d0a?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6869/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6869      +/-   ##+ coverage     9825%   9829%   +004%     - complexity     6430     6433       +3       files           719      719                lines         46746    46750       +4       branches       6401     6401              + hits          45929    45953      +24     + misses          293      283      -10     + partials        524      514      -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `185 <0> (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `126 <1> (+1)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `158 <1> (+1)` | :arrow_up: || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% <0%> (-247%)` | `50% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% <0%> (-211%)` | `3% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% <0%> (-181%)` | `16% <0%> (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtdwjzy3jpymvpbi5qyxzh) | `9661% <0%> (-17%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9439% <0%> (-141%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9518% <0%> (-107%)` | `5% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9531% <0%> (-105%)` | `2% <0%> (ø)` | ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elfooter) last update [320a675fab5b58](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,0,1,1,1,1,1,3x: add singleoftype add `oftype` to `single` already available to the other non-empty base typesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleoftypepng)in addition diagrams for `maybefilter` and `maybeoftype` have been updated:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybefilterpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeoftypepng)related: #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elh1) report> merging [#6876](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/8c85f5a52115b419beeb84b0e2dc9bb4aa6bcd0f?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6876/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eltree)```diff@@             coverage diff             @@##                3x   #6876      +/-   ##+ coverage     9822%   983%   +007%     - complexity     6525    6527       +2       files           733     733                lines         47052   47054       +2       branches       6425    6425              + hits          46216   46255      +39     + misses          305     289      -16     + partials        531     510      -21```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `199 <0> (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `171 <1> (+1)` | :arrow_up: || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% <0%> (-114%)` | `3% <0%> (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% <0%> (-091%)` | `2% <0%> (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `959% <0%> (-082%)` | `2% <0%> (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9676% <0%> (-065%)` | `6% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9625% <0%> (-054%)` | `5% <0%> (ø)` | || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9622% <0%> (+031%)` | `3% <0%> (ø)` | :arrow_down: ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6876/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&elfooter) last update [8c85f5a51380db](https://codecovio/gh/reactivex/rxjava/pull/6876?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,3x: add missing startwith overloads add missing ( ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) ) `startwith` overloads source \ other | f | o | m | s | c |--|--|--|--|--|--|flowable | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)observable | ![absent](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_offpng) | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)| ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)maybe | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)single | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng)completable | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![add](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_halfpng) | ![present](https://rawgithubcom/wiki/reactivex/rxjava/images/checkmark_onpng)related #6852![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowablestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observablestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlestartwithcpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithmpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablestartwithspng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&elh1) report> merging [#6885](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/78c70d6a5365cb8db532d23397d5a0b4c114b72a?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6885/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6885      +/-   ##- coverage     9829%   9825%   -005%     - complexity     6550     6563      +13       files           735      735                lines         47165    47201      +36       branches       6432     6432              + hits          46359    46375      +16     - misses          290      298       +8     - partials        516      528      +12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `591 <3> (+3)` | :arrow_up: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <100%> (ø)` | `209 <5> (+5)` | :arrow_up: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `136 <2> (+2)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `187 <5> (+5)` | :arrow_up: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <100%> (ø)` | `561 <3> (+3)` | :arrow_up: || [vex/rxjava3/internal/operators/maybe/maybeambjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvbbwiuamf2yq) | `9696% <0%> (-304%)` | `10% <0%> (-1%)` | || [a/io/reactivex/rxjava3/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9taw5nbgvtdwjqzwn0lmphdme) | `9753% <0%> (-247%)` | `37% <0%> (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% <0%> (-211%)` | `3% <0%> (ø)` | || [a3/internal/subscribers/innerqueuedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zdwjzy3jpymvycy9jbm5lclf1zxvlzfn1ynnjcmlizxiuamf2yq) | `9607% <0%> (-197%)` | `18% <0%> (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% <0%> (-171%)` | `2% <0%> (ø)` | ||  and [23 more](https://codecovio/gh/reactivex/rxjava/pull/6885/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&elfooter) last update [78c70d69ca388c](https://codecovio/gh/reactivex/rxjava/pull/6885?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: swap maybeflatmapsingle and maybeflatmapsingleelement resolves #6878dropped the old `maybeflatmapsingle` and replaced it with `maybeflatmapsingleelement` hmm for xflatmaptestmaybesingle if i replace `flatmapsingle()tosingle()` with `tosingle()flatmap()` then the test will pass || the test checks if disposing while in the function the returned `single` never gets subscribed to and thus no error is signaled to the downstream or the global error handler put an `@ignore` on it for now and ill look into the operator tomorrow || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&elh1) report> merging [#6891](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b3516b2fbf76643d4fce2bb077de64deaf959f90?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6891/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6891      +/-   ##+ coverage     9826%   9826%   +<01%     + complexity     6596     6593       -3       files           741      740       -1       lines         47334    47293      -41       branches       6432     6430       -2     - hits          46511    46473      -38     - misses          301      302       +1     + partials        522      518       -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <100%> (ø)` | `208 <1> (-1)` | :arrow_down: || [3/internal/operators/maybe/maybeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% <0%> (-826%)` | `2% <0%> (ø)` | || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% <0%> (-339%)` | `25% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `927% <0%> (-261%)` | `2% <0%> (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9482% <0%> (-259%)` | `6% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% <0%> (-086%)` | `2% <0%> (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% <0%> (-064%)` | `6% <0%> (ø)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9714% <0%> (-041%)` | `50% <0%> (ø)` | ||  and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6891/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&elfooter) last update [b3516b2ccc3afb](https://codecovio/gh/reactivex/rxjava/pull/6891?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: reenable xflatmaptestmaybesingle add missing single operators reenable the `xflatmaptestmaybesingle` and make sure all flatmap variants behave the same when the flow is cancelled/disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at allresolves #6892while adding the extra tests i noticed two `flatmap` variant is missing from `single`:- a combiner of the original and inner success item: `flatmap(function<t single<u>> bifunction<t u r>)`- a notification-type mapper: `flatmap(function<t single<r>> function<throwable single<r>>)`![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapcombinerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmapnotificationpng)lastly the same combiner variant for `maybe` received a marble diagram too:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapcombinerpng)related #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elh1) report> merging [#6893](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f1a795da0d4cdfb3133206ad8e3887bdb8ba948b?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6893/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6893      +/-   ##+ coverage     9825%   9829%   +004%     - complexity     6590     6599       +9       files           740      742       +2       lines         47293    47399     +106       branches       6430     6443      +13     + hits          46468    46593     +125     + misses          300      292       -8     + partials        525      514      -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `208 <0> (ø)` | :arrow_down: || [3/internal/operators/maybe/maybeflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [rnal/operators/maybe/maybeflatmapnotificationjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvgbgf0twfwtm90awzpy2f0aw9ulmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `190 <2> (+2)` | :arrow_up: || [ernal/operators/single/singleflatmappublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbqdwjsaxnozxiuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [al/operators/single/singleflatmapnotificationjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbob3rpzmljyxrpb24uamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [rnal/operators/single/singleflatmapbiselectorjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbcavnlbgvjdg9ylmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [ternal/operators/mixed/maybeflatmapobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvtwf5ymvgbgf0twfwt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [nternal/operators/mixed/maybeflatmappublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvtwf5ymvgbgf0twfwuhvibglzagvylmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [ernal/operators/mixed/singleflatmapobservablejava](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwl4zwqvu2luz2xlrmxhde1hce9ic2vydmfibguuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: ||  and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6893/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&elfooter) last update [f1a795d56cd9dd](https://codecovio/gh/reactivex/rxjava/pull/6893?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,3x: fix replay() not resetting when the connection is disposed disposing a `replay()`-based connectable should reset the operator to its fresh state this was supposed to happen but the relevant code changes were not enabled the pr fixes this for both `flowable` and `observable`-based implementationsthe `publish`-based connectables work as intendedfixes #6920 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elh1) report> merging [#6921](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/042dee38fc9b1655f68a2296ee94035ba5e6efa1&eldesc) will **decrease** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6921/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6921      +/-   ##- coverage     9965%   9965%   -001%     + complexity     6670     6669       -1       files           742      742                lines         47217    47220       +3       branches       6367     6367                hits          47055    47055              - misses           48       50       +2     - partials        114      115       +1     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% <000%> (-459%)` | `200% <000%> (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% <000%> (-239%)` | `200% <000%> (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% <000%> (-233%)` | `200% <000%> (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9585% <000%> (-208%)` | `200% <000%> (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% <000%> (-136%)` | `200% <000%> (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% <000%> (-108%)` | `2100% <000%> (-100%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% <000%> (-095%)` | `200% <000%> (ø%)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `9817% <000%> (ø)` | `300% <000%> (ø%)` | :arrow_up: || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9968% <000%> (+031%)` | `300% <000%> (ø%)` | :arrow_up: || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbty2hlzhvszxiuamf2yq) | `9960% <000%> (+039%)` | `400% <000%> (ø%)` | :arrow_up: ||  and [7 more](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elfooter) last update [042dee332f5dbb](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,update image urls to non-transparent version updated image urls to use non-transparent ones as per #6883resolves #6883 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elh1) report> merging [#6944](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a2128ae70dc98410d3b009943cd46f1b0e73049b&eldesc) will **increase** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6944/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eltree)```diff@@            coverage diff            @@##                3x    #6944   +/-   ##  coverage     9963%   9964%           - complexity     6666     6667    +1       files           742      742             lines         47220    47220             branches       6367     6367           + hits          47049    47051    +2     + misses           54       50    -4     - partials        117      119    +2     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `10000% <ø> (ø)` | `14000 <000> (ø)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `10000% <ø> (ø)` | `59500 <000> (ø)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `10000% <ø> (ø)` | `21400 <000> (ø)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `10000% <ø> (ø)` | `56500 <000> (ø)` | || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `10000% <ø> (ø)` | `19600 <000> (ø)` | || [activex/rxjava3/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9mbg93ywjszxmvq29ubmvjdgfibgvgbg93ywjszs5qyxzh) | `10000% <ø> (ø)` | `1200 <000> (ø)` | || [operators/flowable/blockingflowablemostrecentjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvqmxvy2tpbmdgbg93ywjszu1vc3rszwnlbnquamf2yq) | `10000% <ø> (ø)` | `200 <000> (ø)` | || [ernal/operators/flowable/blockingflowablenextjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvqmxvy2tpbmdgbg93ywjszu5lehquamf2yq) | `9836% <ø> (ø)` | `200 <000> (ø)` | || [ators/observable/blockingobservablemostrecentjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9cbg9ja2luz09ic2vydmfibgvnb3n0umvjzw50lmphdme) | `10000% <ø> (ø)` | `200 <000> (ø)` | || [l/operators/observable/blockingobservablenextjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9cbg9ja2luz09ic2vydmfibgvozxh0lmphdme) | `9836% <ø> (ø)` | `200 <000> (ø)` | ||  and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elfooter) last update [a2128ae96573bc](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks the new v3 images load in properly || glad to help ||
1,0,0,1,0,1,1,1,"3x: fix scheduled tasks fatal exception behavior fatal exceptions may be lost with scheduled direct & scheduled periodic direct tasks because `futuretask` simply treats them as exceptional outcomes for regular tasks [scheduledrunnable](https://githubcom/reactivex/rxjava/blob/3x/src/main/java/io/reactivex/rxjava3/internal/schedulers/scheduledrunnablejava#l67) already avoids rethrowing fatal errors as it would go nowherethis pr adds this behavior to the direct runnable tasksresolves #6954 > this will halt the application when stack overflow:i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the `scheduleperiodicallydirect` should end || > > this will halt the application when stack overflow:> > i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the `scheduleperiodicallydirect` should endi am sorry i think i made a mistake when simplifies #748 case the key point is when stackoverflowerror ocurrs calling error hander without throw may cause stack full again that is also why i selected a complex approach ill check it  || > > this will halt the application when stack overflow:> > i dont understand as far as i know calling the uncaught exception handler on android kills your app on desktop such calls do nothing but the repetition of the `scheduleperiodicallydirect` should endhi akarnokd sorry to the above mistakepersonally  i think this approach has some flaws1 - this approach means well catch fatal exceptions instead of throwing it through the call stack but the functions on the call stack may need this exception to clean/stop itself for example this change will make periodic tasks unable to stop (at least on desktop or server):    @test // fail    public void periodictaskshouldstoponerror() throws exception {        atomicinteger repeatcount  new atomicinteger()        new computationscheduler()scheduleperiodicallydirect(new runnable() {            @override            public void run() {                repeatcountincrementandget()                if (true) {                    throw new outofmemoryerror()                }            }        } 0 500 timeunitmilliseconds)        threadsleep(1000 * 3)        assertequals(1 repeatcountget())    }2 - to solve the above problem we need to rethrow the exception after rxjavapluginsonerror() or make rxjavapluginsonerror() to throw after calling the uncaughtexceptionhandler of the thread this actullay makes some exceptions to be handled more than once and i think it will make things more and more complex as we solve those cases one by one3 - if we are able to check exceptions in the future as #6954 mentioned (and jdk has given us all we need) exception handing in rxjava will be simpler and easier as we do elsewhere: make rxjavapluginsonerror() handle/propagate the exception and continue the work or make rxjavapluginsonerror() throws and exceptions go through the stack to do whatever clean/stop needed and finally to the uncaughtexceptionhandler of the thread  || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&elh1) report> merging [#6956](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b47783e3186f83be6a87257a2d13c9619bccaa42&eldesc) will **increase** coverage by `001%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6956/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6956      +/-   ##+ coverage     9964%   9965%   +001%     - complexity     6667     6668       +1       files           742      742                lines         47228    47248      +20       branches       6369     6369              + hits          47059    47084      +25     + misses           51       50       -1     + partials        118      114       -4     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `10000% <10000%> (ø)` | `1100 <000> (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `10000% <10000%> (ø)` | `1000 <000> (ø)` | || [java3/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0luc3rhbnrqzxjpb2rpy1rhc2suamf2yq) | `10000% <10000%> (ø)` | `2000 <000> (ø)` | || [ternal/schedulers/scheduleddirectperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfblcmlvzgljvgfzay5qyxzh) | `10000% <10000%> (ø)` | `200 <000> (ø)` | || [java3/internal/schedulers/scheduleddirecttaskjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzerpcmvjdfrhc2suamf2yq) | `10000% <10000%> (ø)` | `200 <000> (ø)` | || [rxjava3/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlzfj1bm5hymxllmphdme) | `10000% <10000%> (ø)` | `3000 <000> (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% <000%> (-459%)` | `200% <000%> (ø%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9154% <000%> (-353%)` | `200% <000%> (ø%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9800% <000%> (-200%)` | `3400% <000%> (-100%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9805% <000%> (-098%)` | `600% <000%> (ø%)` | ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6956/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&elfooter) last update [b47783e48bf526](https://codecovio/gh/reactivex/rxjava/pull/6956?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || disposing the periodic task on error may be a little tricky workaround 1 - the periodic futuretask is canceled asynchronously until periodicdirecttasksetfuture is done this may cause the periodic task to run some more rounds before actually stop the following test almost cant success on my laptop:    @test    public void periodictaskshouldstoponerror() throws interruptedexception {        try {            // suppress log            rxjavapluginsseterrorhandler((e) -> {})            countdownlatch latch  new countdownlatch(1000)            atomicinteger assertcount  new atomicinteger()            for (int i  0 i < 1000 i++) {                new thread(new runnable() {                    @override                    public void run() {                        try {                            periodictaskshouldstoponerroronce()                        } catch (assertionerror e) {                            eprintstacktrace()                            assertcountincrementandget()                        } catch (exception e) {                        } finally {                            latchcountdown()                        }                    }                })start()            }            latchawait()            assertequals(0 assertcountget())        } finally {            rxjavapluginsreset()        }    }    private void periodictaskshouldstoponerroronce() throws exception {        atomicinteger repeatcount  new atomicinteger()        schedulerscomputation()scheduleperiodicallydirect(new runnable() {            @override            public void run() {                repeatcountincrementandget()                if (true) {                    throw new outofmemoryerror()                }            }        } 0 1 timeunit oseconds)        threadsleep(200)        assertequals(1 repeatcountget())    }2 - i wonder whether we should route interruptiblerunnables & booleanrunnables errors to rxjavapluginsonerror() as well if not i have to handle errors both in rxjavapluginsonerror() and threads uncaught exception handlers when schedulers are involved errors may be pass to either of the two 3 - my original pr was actually intending to make things easy for my team: we only need to set an error handle via rxjavapluginsseterrorhandler which prints a log for not-a-matter error and rethrow for fatal erros and every thing goes fine however maybe i could replace all schedulers with rxjavapluginssetxxxschedulerhandler without change the main stream though i think my original pr simplifies implemetation of the main stream without side effect as i could see  || 1 looks like the periodic task should be crashed nonetheless2 yes task wrapper behavior should be consistent across3 ""make things easy for my team"" - thats why i encourage people to write their own hooks and components to workaround very specific corner cases || > 2 yes task wrapper behavior should be consistent acrosswould you like to do this in this pr or later? || great that fixed all corner cases i could seebut i wonder whether calling rxjavapluginsonerror(ex) (calling uncaught exception handler) in the middle of exception throw chain is good and intuitional a little tricky as i seeif youd have a look on #6955 the original pr it requires no more change than this one handling future related erros in one place and not calling uncaught exception handler in the middle of exception throw chain it should pass all tests in this pr as well without modification :) || "
1,0,0,1,1,1,1,1,suppress undeliverableexception handling in tests (#6987) i used a junit testrule to suppress handling of undeliverableexception for test methods annotated with @suppressundeliverable this approach is coarser than the suggested approach (it suppresses the handling of all undeliverableexceptions for the entire annotated test method)i thought this approach was clean but i can switch to the suggested approach if preferredi added @suppressundeliverable to most tests that were logging undeliverableexceptions with the test method in the stack trace this may be more suppression than was required so just let me knowfixes #6987 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elh1) report> merging [#6996](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3f386be351eb7c62379d124a2f65894a9961e604&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6996/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6996      +/-   ##- coverage     9957%   9951%   -006%     + complexity     6670     6667       -3       files           742      742                lines         47270    47270                branches       6373     6373              - hits          47070    47042      -28     - misses           92      107      +15     - partials        108      121      +13     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% <000%> (-509%)` | `2600% <000%> (-100%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% <000%> (-459%)` | `200% <000%> (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% <000%> (-233%)` | `200% <000%> (ø%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% <000%> (-186%)` | `3900% <000%> (-100%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9858% <000%> (-142%)` | `300% <000%> (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9773% <000%> (-130%)` | `600% <000%> (ø%)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9887% <000%> (-113%)` | `600% <000%> (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% <000%> (-086%)` | `2100% <000%> (ø%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9658% <000%> (-086%)` | `200% <000%> (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9761% <000%> (-080%)` | `200% <000%> (ø%)` | ||  and [6 more](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elfooter) last update [3f386be2021748](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! ||
1,0,0,1,0,1,1,1,2x: introduce property rx2scheduleruse- otime (#7154) fixes #7169 @akarnokd  i had to create a new `schedulertest` class because on the 2x branch the package did not match the package of `scheduler` therefore i could not access the field (package-private) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elh1) report> merging [#7170](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eldesc) (2c46d3e) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f31aed36fd9d47edf0177164c54c64d4dc28c818?eldesc) (f31aed3) will **increase** coverage by `008%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7170/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #7170      +/-   ##+ coverage     9818%   9826%   +008%     - complexity     6345     6349       +4       files           677      677                lines         45553    45557       +4       branches       6342     6342              + hits          44724    44765      +41     + misses          263      254       -9     + partials        566      538      -28     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `10000% <ø> (ø)` | `1100 <000> (ø)` | || [src/main/java/io/reactivex/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2nozwr1bgvylmphdme) | `10000% <10000%> (ø)` | `1300 <400> (+200)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `9610% <000%> (-260%)` | `600% <000%> (ø%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <000%> (-225%)` | `6000% <000%> (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% <000%> (-145%)` | `200% <000%> (ø%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% <000%> (-139%)` | `5700% <000%> (-100%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <000%> (-106%)` | `300% <000%> (ø%)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% <000%> (-086%)` | `200% <000%> (ø%)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `9665% <000%> (-056%)` | `300% <000%> (ø%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9924% <000%> (ø)` | `300% <000%> (ø%)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elfooter) last update [f31aed32c46d3e](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,0,3x: add onsubscribe hook to parallelflowable operators parallel operators were missing an `rxjavapluginsonsubscribe` hookresolves #7190 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&elh1) report> merging [#7191](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&eldesc) (5e33ef0) into [3x](https://codecovio/gh/reactivex/rxjava/commit/abecb9aa882dbeffa08e9d7b42040ff6d2fbdebb?eldesc) (abecb9a) will **decrease** coverage by `004%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7191/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #7191      +/-   ##- coverage     9958%   9953%   -005%     - complexity     6754     6756       +2       files           747      747                lines         47350    47374      +24       branches       6367     6382      +15     + hits          47153    47155       +2     - misses           91      101      +10     - partials        106      118      +12     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `10000% <10000%> (ø)` | `1600 <200> (ø)` | || [3/internal/operators/parallel/parallelcollectjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb2xszwn0lmphdme) | `10000% <10000%> (ø)` | `700 <300> (ø)` | || [internal/operators/parallel/parallelconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxdb25jyxrnyxauamf2yq) | `10000% <10000%> (ø)` | `500 <300> (ø)` | || [ternal/operators/parallel/paralleldoonnexttryjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxeb09utmv4dfryes5qyxzh) | `10000% <10000%> (ø)` | `600 <400> (ø)` | || [a3/internal/operators/parallel/parallelfilterjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx0zxiuamf2yq) | `10000% <10000%> (ø)` | `600 <400> (ø)` | || [internal/operators/parallel/parallelfiltertryjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgawx0zxjucnkuamf2yq) | `10000% <10000%> (ø)` | `600 <400> (ø)` | || [3/internal/operators/parallel/parallelflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf0twfwlmphdme) | `10000% <10000%> (ø)` | `500 <300> (ø)` | || [al/operators/parallel/parallelflatmapiterablejava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgbgf0twfwsxrlcmfibguuamf2yq) | `10000% <10000%> (ø)` | `500 <300> (ø)` | || [internal/operators/parallel/parallelfromarrayjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgcm9tqxjyyxkuamf2yq) | `10000% <10000%> (ø)` | `500 <300> (ø)` | || [rnal/operators/parallel/parallelfrompublisherjava](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxgcm9tuhvibglzagvylmphdme) | `10000% <10000%> (ø)` | `400 <200> (ø)` | ||  and [24 more](https://codecovio/gh/reactivex/rxjava/pull/7191/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&elfooter) last update [abecb9ada2db04](https://codecovio/gh/reactivex/rxjava/pull/7191?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||

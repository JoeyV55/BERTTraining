Util,Network,Interpreter,i18n,Logic,Test,IO,App,corpus
1,0,0,0,0,0,1,0,implemented sequenceequal operator fixes issue #76since there is no direct analogue of `iequalitycomparer` in java `func2<t t boolean>` has been used nice and great use of the zip operator! || thank you again @mairbek  ||
1,0,1,0,0,1,1,1,merge of pull #125 for issue #87 operator takewhile manually merging https://githubcom/netflix/rxjava/pull/125 from @mairbek implementation of https://githubcom/netflix/rxjava/issues/87 done by @mairbek ive run the unit tests locally and reviewed the code while doing the manual merge looks good so merging into master branch ||
1,0,1,0,0,1,1,1,implemented toiterable operation for issue #18this would allow to implement other blocking methods like `single` `lastordefault` next this looks good merging ||
1,0,0,0,0,0,1,0,fixed bug in ranges fixed issue #164 [rxjava-pull-requests #3](https://netflixosscicloudbeescom/job/rxjava-pull-requests/3/) successthis pull request looks good ||
1,0,1,0,0,0,1,0,fixed bug in ranges fixed issue #164 [rxjava-pull-requests #3](https://netflixosscicloudbeescom/job/rxjava-pull-requests/3/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,"reimplementation of concat improved handling of observable<observable<t >>the old version required all of the observable<t>s to be generated and bufferedbefore the concat could begin  if the outer observable was asynchronous itemscould be dropped (test added)  the new version passes the test and does thebest job i could (after examining several possible strategies) of achievingclear and consistent semantics in accordance with the principle of leastsurprise(my attempt to fix issue #202) [rxjava-pull-requests #45](https://netflixosscicloudbeescom/job/rxjava-pull-requests/45/) aborted || there is another issue with this implementation  the countdown latch will always block the calling thread which is not desirable  anything that returns an observable should never be blocking  rx is meant to support composition of operations and allows each operation to run concurrently || while reviewing this i started playing with the unit tests and added 2 new ones i also made them use inorderverify so they ensure correct ordering ive pasted it below so you can merge into your branch instead of me complicating the merge with another branch the tests pass pass except `testconcatunsubscribe` which deadlocks it does this because a list<observable> wont return the subscription asynchronously so it cant unsubscribe meanwhile a countdownlatch is waiting for the change to trigger and the two latches end up waiting on each otheri havent thought through enough yet to determine if there is a way to solve that or if the unit test is just testing the wrong thing and thus a bad testthe comment above from @billy about countdownlatch originated from a discussion between him and i - but while reviewing this it is probably the right approachi was playing with other approaches that are purely non-blocking while retaining the correct concat sequential behavior but they all seem to require either:- another wrapping thread- stealing work from one of the child observable threads and making it do work that is queued on the others  and that seems like a bad idea even though it can be hacked to ""work"" but it does so in a way that is very unexpected and thus not something i want to pursue- queueing all onnext values which could be a bad memory issue  and also means we eagerly subscribe which is not what we wantmy biggest issue right now is that concat(o1 o2) is a very common usage but that results in list<observable> which will be blocking and unsubscribe doesnt workill think through this more but id appreciate your thoughts on how to handle `testconcatunsubscribe` ``` java    public static class unittest {        @test        public void testconcat() {            @suppresswarnings(""unchecked"")            observer<string> observer  mock(observerclass)            final string[] o  { ""1"" ""3"" ""5"" ""7"" }            final string[] e  { ""2"" ""4"" ""6"" }            final observable<string> odds  observabletoobservable(o)            final observable<string> even  observabletoobservable(e)            @suppresswarnings(""unchecked"")            observable<string> concat  observablecreate(concat(odds even))            concatsubscribe(observer)            verify(observer times(7))onnext(anystring())        }        @test        public void testconcatwithlist() {            @suppresswarnings(""unchecked"")            observer<string> observer  mock(observerclass)            final string[] o  { ""1"" ""3"" ""5"" ""7"" }            final string[] e  { ""2"" ""4"" ""6"" }            final observable<string> odds  observabletoobservable(o)            final observable<string> even  observabletoobservable(e)            final list<observable<string>> list  new arraylist<observable<string>>()            listadd(odds)            listadd(even)            observable<string> concat  observablecreate(concat(list))            concatsubscribe(observer)            verify(observer times(7))onnext(anystring())        }        @test        public void testconcatunsubscribe() {            final countdownlatch callonce  new countdownlatch(1)            final countdownlatch oktocontinue  new countdownlatch(1)            final testobservable<string> w1  new testobservable<string>(""one"" ""two"" ""three"")            final testobservable<string> w2  new testobservable<string>(callonce oktocontinue ""four"" ""five"" ""six"")            @suppresswarnings(""unchecked"")            observer<string> aobserver  mock(observerclass)            @suppresswarnings(""unchecked"")            observable<string> concat  observablecreate(concat(w1 w2))            systemoutprintln(""before subscribe"")            subscription s1  concatsubscribe(aobserver)            systemoutprintln(""after subscribe"")            try {                //block main thread to allow observable ""w1"" to complete and observable ""w2"" to call onnext once                systemoutprintln(""before callonceawait"")                callonceawait()                systemoutprintln(""after callonceawait"")                s1unsubscribe()                systemoutprintln(""after s1unsubscribe"")                //unblock the observable to continue                oktocontinuecountdown()                systemoutprintln(""after countdown"")                w1tjoin()                w2tjoin()            } catch (exception e) {                eprintstacktrace()                fail(egetmessage())            }            inorder inorder  inorder(aobserver)            inorderverify(aobserver times(1))onnext(""one"")            inorderverify(aobserver times(1))onnext(""two"")            inorderverify(aobserver times(1))onnext(""three"")            inorderverify(aobserver times(1))onnext(""four"")            inorderverify(aobserver never())onnext(""five"")            inorderverify(aobserver never())onnext(""six"")            inorderverify(aobserver times(1))oncompleted()        }        @test        public void testmergeobservableofobservables() {            @suppresswarnings(""unchecked"")            observer<string> observer  mock(observerclass)            final string[] o  { ""1"" ""3"" ""5"" ""7"" }            final string[] e  { ""2"" ""4"" ""6"" }            final observable<string> odds  observabletoobservable(o)            final observable<string> even  observabletoobservable(e)            observable<observable<string>> observableofobservables  observablecreate(new func1<observer<observable<string>> subscription>() {                @override                public subscription call(observer<observable<string>> observer) {                    // simulate what would happen in an observable                    observeronnext(odds)                    observeronnext(even)                    observeroncompleted()                    return new subscription() {                        @override                        public void unsubscribe() {                            // unregister  will never be called here since we are executing synchronously                        }                    }                }            })            observable<string> concat  observablecreate(concat(observableofobservables))            concatsubscribe(observer)            verify(observer times(7))onnext(anystring())        }        /**         * simple concat of 2 asynchronous observables ensuring it emits in correct order         */        @suppresswarnings(""unchecked"")        @test        public void testsimpleasyncconcat() {            observer<string> observer  mock(observerclass)            testobservable<string> o1  new testobservable<string>(""one"" ""two"" ""three"")            testobservable<string> o2  new testobservable<string>(""four"" ""five"" ""six"")            observableconcat(o1 o2)subscribe(observer)            try {                // wait for async observables to complete                o1tjoin()                o2tjoin()            } catch (exception e) {                throw new runtimeexception(""failed waiting on threads"")            }            inorder inorder  inorder(observer)            inorderverify(observer times(1))onnext(""one"")            inorderverify(observer times(1))onnext(""two"")            inorderverify(observer times(1))onnext(""three"")            inorderverify(observer times(1))onnext(""four"")            inorderverify(observer times(1))onnext(""five"")            inorderverify(observer times(1))onnext(""six"")        }        /**         * test an async observable that emits more async observables         */        @suppresswarnings(""unchecked"")        @test        public void testnestedasyncconcat() throws exception {            observer<string> observer  mock(observerclass)            final testobservable<string> o1  new testobservable<string>(""one"" ""two"" ""three"")            final testobservable<string> o2  new testobservable<string>(""four"" ""five"" ""six"")            final testobservable<string> o3  new testobservable<string>(""seven"" ""eight"" ""nine"")            final countdownlatch allowthird  new countdownlatch(1)            final atomicreference<thread> parent  new atomicreference<thread>()            observable<observable<string>> observableofobservables  observablecreate(new func1<observer<observable<string>> subscription>() {                @override                public subscription call(final observer<observable<string>> observer) {                    final booleansubscription s  new booleansubscription()                    parentset(new thread(new runnable() {                        @override                        public void run() {                            try {                                // emit first                                if (!sisunsubscribed()) {                                    systemoutprintln(""emit o1"")                                    observeronnext(o1)                                }                                // emit second                                if (!sisunsubscribed()) {                                    systemoutprintln(""emit o2"")                                    observeronnext(o2)                                }                                // wait until sometime later and emit third                                try {                                    allowthirdawait()                                } catch (interruptedexception e) {                                    observeronerror(e)                                }                                if (!sisunsubscribed()) {                                    systemoutprintln(""emit o3"")                                    observeronnext(o3)                                }                            } catch (exception e) {                                observeronerror(e)                            } finally {                                systemoutprintln(""done parent observable"")                                observeroncompleted()                            }                        }                    }))                    parentget()start()                    return s                }            })            observablecreate(concat(observableofobservables))subscribe(observer)            // wait for parent to start            while (parentget()  null) {                threadsleep(1)            }            try {                // wait for first 2 async observables to complete                while (o1t  null) {                    threadsleep(1)                }                systemoutprintln(""thread1 started  waiting for it to complete "")                o1tjoin()                while (o2t  null) {                    threadsleep(1)                }                systemoutprintln(""thread2 started  waiting for it to complete "")                o2tjoin()            } catch (exception e) {                throw new runtimeexception(""failed waiting on threads"" e)            }            inorder inorder  inorder(observer)            inorderverify(observer times(1))onnext(""one"")            inorderverify(observer times(1))onnext(""two"")            inorderverify(observer times(1))onnext(""three"")            inorderverify(observer times(1))onnext(""four"")            inorderverify(observer times(1))onnext(""five"")            inorderverify(observer times(1))onnext(""six"")            // we shouldnt have the following 3 yet            inorderverify(observer never())onnext(""seven"")            inorderverify(observer never())onnext(""eight"")            inorderverify(observer never())onnext(""nine"")            // we should not be completed yet            verify(observer never())oncompleted()            verify(observer never())onerror(any(exceptionclass))            // now allow the third            allowthirdcountdown()            try {                while (o3t  null) {                    threadsleep(1)                }                // wait for 3rd to complete                o3tjoin()            } catch (exception e) {                throw new runtimeexception(""failed waiting on threads"" e)            }            inorderverify(observer times(1))onnext(""seven"")            inorderverify(observer times(1))onnext(""eight"")            inorderverify(observer times(1))onnext(""nine"")            inorderverify(observer times(1))oncompleted()            verify(observer never())onerror(any(exceptionclass))        }        @suppresswarnings(""unchecked"")        @test        public void testblockedobservableofobservables() {            observer<string> observer  mock(observerclass)            final string[] o  { ""1"" ""3"" ""5"" ""7"" }            final string[] e  { ""2"" ""4"" ""6"" }            final observable<string> odds  observabletoobservable(o)            final observable<string> even  observabletoobservable(e)            final countdownlatch callonce  new countdownlatch(1)            final countdownlatch oktocontinue  new countdownlatch(1)            testobservable<observable<string>> observableofobservables  new testobservable<observable<string>>(callonce oktocontinue odds even)            func1<observer<string> subscription> concatf  concat(observableofobservables)            observable<string> concat  observablecreate(concatf)            concatsubscribe(observer)            try {                //block main thread to allow observables to serve up o1                callonceawait()            } catch (exception ex) {                exprintstacktrace()                fail(exgetmessage())            }            // the concated observable should have served up all of the odds            verify(observer times(1))onnext(""1"")            verify(observer times(1))onnext(""3"")            verify(observer times(1))onnext(""5"")            verify(observer times(1))onnext(""7"")            try {                // unblock observables so it can serve up o2 and complete                oktocontinuecountdown()                observableofobservablestjoin()            } catch (exception ex) {                exprintstacktrace()                fail(exgetmessage())            }            // the concatenated observable should now have served up all the evens            verify(observer times(1))onnext(""2"")            verify(observer times(1))onnext(""4"")            verify(observer times(1))onnext(""6"")        }        private static class testobservable<t> extends observable<t> {            private final subscription s  new subscription() {                @override                public void unsubscribe() {                    subscribed  false                }            }            private final list<t> values            private thread t  null            private int count  0            private boolean subscribed  true            private final countdownlatch once            private final countdownlatch oktocontinue            public testobservable(t values) {                this(null null values)            }            public testobservable(countdownlatch once countdownlatch oktocontinue t values) {                thisvalues  arraysaslist(values)                thisonce  once                thisoktocontinue  oktocontinue            }            @override            public subscription subscribe(final observer<t> observer) {                t  new thread(new runnable() {                    @override                    public void run() {                        try {                            while (count < valuessize() && subscribed) {                                observeronnext(valuesget(count))                                count++                                //unblock the main thread to call unsubscribe                                if (null ! once)                                    oncecountdown()                                //block until the main thread has called unsubscribe                                if (null ! once)                                    oktocontinueawait()                            }                            if (subscribed)                                observeroncompleted()                        } catch (interruptedexception e) {                            eprintstacktrace()                            fail(egetmessage())                        }                    }                })                tstart()                return s            }        }    }``` || thanks for the comments and the extra tests i have merged them anduploaded a new versionregarding testconcatunsubscribe: im still not entirely sure of my footingbut i believe the test is in error it is demonstrating exactly the issuewhich i mentioned in the new javadoc for operationconcat specifically itsets up a situation wherein the inner observables thread is blocked on theouter observables thread: the inner thread cannot proceed until the testcalls oktocontinuecountdown() which happens-afterconcatsubscribe(aobserver) which blocks until the list has delivered bothw1 and w2am i right that in general an observer should block onnext() until it hasfinished processing the item? this pushes the flow-control upstream ratherthan excessive buffering or throttling (which can be done explicitly in theoperation-chain if desired) if thats right then i think concat mustblock the outer onnext until it has finished servicing the inner sequencei do find it a little strange that observablefrom(iterable) is a ""shotgunobservable"" ie the subscribe() blocks until all downstream operationshave completed on all items which means it is impossible to everunsubscribe() but given that this is correct behavior i think that itmakes sense that concat(o1 o2) also cannot be unsubscribed-from i added acautionary comment to the javadoci have updated the test case to call concatsubscribe(aobserver) in abackground thread which fixes the deadlock and to expect all items to bedelivered despite an unsubscribe which makes the test pass(i had also tried those three non-blocking approaches before uploading thisversion thanks for checking my work :)on mar 27 2013 6:56 am ""ben christensen"" notifications@githubcom wrote:> while reviewing this i started playing with the unit tests and added 2 new> ones i also made them use inorderverify so they ensure correct ordering> ive pasted it below so you can merge into your branch instead of me> complicating the merge with another branch> > the tests pass pass except testconcatunsubscribe which deadlocks it does> this because a list wont return the subscription asynchronously so it> cant unsubscribe meanwhile a countdownlatch is waiting for the change to> trigger and the two latches end up waiting on each other> > i havent thought through enough yet to determine if there is a way to> solve that or if the unit test is just testing the wrong thing and thus a> bad test> > the comment above from @billy https://githubcom/billy about> countdownlatch originated from a discussion between him and i - but while> reviewing this it is probably the right approach> > i was playing with other approaches that are purely non-blocking while> retaining the correct concat sequential behavior but they all seem to> require either:> - another wrapping thread> - stealing work from one of the child observable threads and making it>   do work that is queued on the others  and that seems like a bad idea>   even though it can be hacked to ""work"" but it does so in a way that is very>   unexpected and thus not something i want to pursue> - queueing all onnext values which could be a bad memory issue  and>   also means we eagerly subscribe which is not what we want> > my biggest issue right now is that concat(o1 o2) is a very common usage> but that results in list which will be blocking and unsubscribe doesnt> work> > ill think through this more but id appreciate your thoughts on how to> handle testconcatunsubscribe> > ```> public static class unittest {> >     @test>     public void testconcat() {>         @suppresswarnings(""unchecked"")>         observer<string> observer  mock(observerclass)> >         final string[] o  { ""1"" ""3"" ""5"" ""7"" }>         final string[] e  { ""2"" ""4"" ""6"" }> >         final observable<string> odds  observabletoobservable(o)>         final observable<string> even  observabletoobservable(e)> >         @suppresswarnings(""unchecked"")>         observable<string> concat  observablecreate(concat(odds even))>         concatsubscribe(observer)> >         verify(observer times(7))onnext(anystring())>     }> >     @test>     public void testconcatwithlist() {>         @suppresswarnings(""unchecked"")>         observer<string> observer  mock(observerclass)> >         final string[] o  { ""1"" ""3"" ""5"" ""7"" }>         final string[] e  { ""2"" ""4"" ""6"" }> >         final observable<string> odds  observabletoobservable(o)>         final observable<string> even  observabletoobservable(e)>         final list<observable<string>> list  new arraylist<observable<string>>()>         listadd(odds)>         listadd(even)>         observable<string> concat  observablecreate(concat(list))>         concatsubscribe(observer)> >         verify(observer times(7))onnext(anystring())>     }> >     @test>     public void testconcatunsubscribe() {>         final countdownlatch callonce  new countdownlatch(1)>         final countdownlatch oktocontinue  new countdownlatch(1)>         final testobservable<string> w1  new testobservable<string>(""one"" ""two"" ""three"")>         final testobservable<string> w2  new testobservable<string>(callonce oktocontinue ""four"" ""five"" ""six"")> >         @suppresswarnings(""unchecked"")>         observer<string> aobserver  mock(observerclass)>         @suppresswarnings(""unchecked"")>         observable<string> concat  observablecreate(concat(w1 w2))>         systemoutprintln(""before subscribe"")>         subscription s1  concatsubscribe(aobserver)>         systemoutprintln(""after subscribe"")>         try {>             //block main thread to allow observable ""w1"" to complete and observable ""w2"" to call onnext once>             systemoutprintln(""before callonceawait"")>             callonceawait()>             systemoutprintln(""after callonceawait"")>             s1unsubscribe()>             systemoutprintln(""after s1unsubscribe"")>             //unblock the observable to continue>             oktocontinuecountdown()>             systemoutprintln(""after countdown"")>             w1tjoin()>             w2tjoin()>         } catch (exception e) {>             eprintstacktrace()>             fail(egetmessage())>         }> >         inorder inorder  inorder(aobserver)>         inorderverify(aobserver times(1))onnext(""one"")>         inorderverify(aobserver times(1))onnext(""two"")>         inorderverify(aobserver times(1))onnext(""three"")>         inorderverify(aobserver times(1))onnext(""four"")>         inorderverify(aobserver never())onnext(""five"")>         inorderverify(aobserver never())onnext(""six"")>         inorderverify(aobserver times(1))oncompleted()>     }> >     @test>     public void testmergeobservableofobservables() {>         @suppresswarnings(""unchecked"")>         observer<string> observer  mock(observerclass)> >         final string[] o  { ""1"" ""3"" ""5"" ""7"" }>         final string[] e  { ""2"" ""4"" ""6"" }> >         final observable<string> odds  observabletoobservable(o)>         final observable<string> even  observabletoobservable(e)> >         observable<observable<string>> observableofobservables  observablecreate(new func1<observer<observable<string>> subscription>() {> >             @override>             public subscription call(observer<observable<string>> observer) {>                 // simulate what would happen in an observable>                 observeronnext(odds)>                 observeronnext(even)>                 observeroncompleted()> >                 return new subscription() {> >                     @override>                     public void unsubscribe() {>                         // unregister  will never be called here since we are executing synchronously>                     }> >                 }>             }> >         })>         observable<string> concat  observablecreate(concat(observableofobservables))>         concatsubscribe(observer)>         verify(observer times(7))onnext(anystring())>     }> >     /**         * simple concat of 2 asynchronous observables ensuring it emits in correct order         */>     @suppresswarnings(""unchecked"")>     @test>     public void testsimpleasyncconcat() {>         observer<string> observer  mock(observerclass)> >         testobservable<string> o1  new testobservable<string>(""one"" ""two"" ""three"")>         testobservable<string> o2  new testobservable<string>(""four"" ""five"" ""six"")> >         observableconcat(o1 o2)subscribe(observer)> >         try {>             // wait for async observables to complete>             o1tjoin()>             o2tjoin()>         } catch (exception e) {>             throw new runtimeexception(""failed waiting on threads"")>         }> >         inorder inorder  inorder(observer)>         inorderverify(observer times(1))onnext(""one"")>         inorderverify(observer times(1))onnext(""two"")>         inorderverify(observer times(1))onnext(""three"")>         inorderverify(observer times(1))onnext(""four"")>         inorderverify(observer times(1))onnext(""five"")>         inorderverify(observer times(1))onnext(""six"")>     }> >     /**         * test an async observable that emits more async observables         */>     @suppresswarnings(""unchecked"")>     @test>     public void testnestedasyncconcat() throws exception {>         observer<string> observer  mock(observerclass)> >         final testobservable<string> o1  new testobservable<string>(""one"" ""two"" ""three"")>         final testobservable<string> o2  new testobservable<string>(""four"" ""five"" ""six"")>         final testobservable<string> o3  new testobservable<string>(""seven"" ""eight"" ""nine"")>         final countdownlatch allowthird  new countdownlatch(1)> >         final atomicreference<thread> parent  new atomicreference<thread>()>         observable<observable<string>> observableofobservables  observablecreate(new func1<observer<observable<string>> subscription>() {> >             @override>             public subscription call(final observer<observable<string>> observer) {>                 final booleansubscription s  new booleansubscription()>                 parentset(new thread(new runnable() {> >                     @override>                     public void run() {>                         try {>                             // emit first>                             if (!sisunsubscribed()) {>                                 systemoutprintln(""emit o1"")>                                 observeronnext(o1)>                             }>                             // emit second>                             if (!sisunsubscribed()) {>                                 systemoutprintln(""emit o2"")>                                 observeronnext(o2)>                             }> >                             // wait until sometime later and emit third>                             try {>                                 allowthirdawait()>                             } catch (interruptedexception e) {>                                 observeronerror(e)>                             }>                             if (!sisunsubscribed()) {>                                 systemoutprintln(""emit o3"")>                                 observeronnext(o3)>                             }> >                         } catch (exception e) {>                             observeronerror(e)>                         } finally {>                             systemoutprintln(""done parent observable"")>                             observeroncompleted()>                         }>                     }>                 }))>                 parentget()start()>                 return s>             }>         })> >         observablecreate(concat(observableofobservables))subscribe(observer)> >         // wait for parent to start>         while (parentget()  null) {>             threadsleep(1)>         }> >         try {>             // wait for first 2 async observables to complete>             while (o1t  null) {>                 threadsleep(1)>             }>             systemoutprintln(""thread1 started  waiting for it to complete "")>             o1tjoin()>             while (o2t  null) {>                 threadsleep(1)>             }>             systemoutprintln(""thread2 started  waiting for it to complete "")>             o2tjoin()>         } catch (exception e) {>             throw new runtimeexception(""failed waiting on threads"" e)>         }> >         inorder inorder  inorder(observer)>         inorderverify(observer times(1))onnext(""one"")>         inorderverify(observer times(1))onnext(""two"")>         inorderverify(observer times(1))onnext(""three"")>         inorderverify(observer times(1))onnext(""four"")>         inorderverify(observer times(1))onnext(""five"")>         inorderverify(observer times(1))onnext(""six"")>         // we shouldnt have the following 3 yet>         inorderverify(observer never())onnext(""seven"")>         inorderverify(observer never())onnext(""eight"")>         inorderverify(observer never())onnext(""nine"")>         // we should not be completed yet>         verify(observer never())oncompleted()>         verify(observer never())onerror(any(exceptionclass))> >         // now allow the third>         allowthirdcountdown()> >         try {>             while (o3t  null) {>                 threadsleep(1)>             }>             // wait for 3rd to complete>             o3tjoin()>         } catch (exception e) {>             throw new runtimeexception(""failed waiting on threads"" e)>         }> >         inorderverify(observer times(1))onnext(""seven"")>         inorderverify(observer times(1))onnext(""eight"")>         inorderverify(observer times(1))onnext(""nine"")> >         inorderverify(observer times(1))oncompleted()>         verify(observer never())onerror(any(exceptionclass))>     }> >     @suppresswarnings(""unchecked"")>     @test>     public void testblockedobservableofobservables() {>         observer<string> observer  mock(observerclass)> >         final string[] o  { ""1"" ""3"" ""5"" ""7"" }>         final string[] e  { ""2"" ""4"" ""6"" }>         final observable<string> odds  observabletoobservable(o)>         final observable<string> even  observabletoobservable(e)>         final countdownlatch callonce  new countdownlatch(1)>         final countdownlatch oktocontinue  new countdownlatch(1)>         testobservable<observable<string>> observableofobservables  new testobservable<observable<string>>(callonce oktocontinue odds even)>         func1<observer<string> subscription> concatf  concat(observableofobservables)>         observable<string> concat  observablecreate(concatf)>         concatsubscribe(observer)>         try {>             //block main thread to allow observables to serve up o1>             callonceawait()>         } catch (exception ex) {>             exprintstacktrace()>             fail(exgetmessage())>         }>         // the concated observable should have served up all of the odds>         verify(observer times(1))onnext(""1"")>         verify(observer times(1))onnext(""3"")>         verify(observer times(1))onnext(""5"")>         verify(observer times(1))onnext(""7"")> >         try {>             // unblock observables so it can serve up o2 and complete>             oktocontinuecountdown()>             observableofobservablestjoin()>         } catch (exception ex) {>             exprintstacktrace()>             fail(exgetmessage())>         }>         // the concatenated observable should now have served up all the evens>         verify(observer times(1))onnext(""2"")>         verify(observer times(1))onnext(""4"")>         verify(observer times(1))onnext(""6"")>     }> >     private static class testobservable<t> extends observable<t> {> >         private final subscription s  new subscription() {> >             @override>             public void unsubscribe() {>                 subscribed  false>             }> >         }>         private final list<t> values>         private thread t  null>         private int count  0>         private boolean subscribed  true>         private final countdownlatch once>         private final countdownlatch oktocontinue> >         public testobservable(t values) {>             this(null null values)>         }> >         public testobservable(countdownlatch once countdownlatch oktocontinue t values) {>             thisvalues  arraysaslist(values)>             thisonce  once>             thisoktocontinue  oktocontinue>         }> >         @override>         public subscription subscribe(final observer<t> observer) {>             t  new thread(new runnable() {> >                 @override>                 public void run() {>                     try {>                         while (count < valuessize() && subscribed) {>                             observeronnext(valuesget(count))>                             count++>                             //unblock the main thread to call unsubscribe>                             if (null ! once)>                                 oncecountdown()>                             //block until the main thread has called unsubscribe>                             if (null ! once)>                                 oktocontinueawait()>                         }>                         if (subscribed)>                             observeroncompleted()>                     } catch (interruptedexception e) {>                         eprintstacktrace()>                         fail(egetmessage())>                     }>                 }> >             })>             tstart()>             return s>         }> >     }> > }> ```> > > reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15496596>  || [rxjava-pull-requests #59](https://netflixosscicloudbeescom/job/rxjava-pull-requests/59/) successthis pull request looks good || [rxjava-pull-requests #60](https://netflixosscicloudbeescom/job/rxjava-pull-requests/60/) successthis pull request looks good || thanks for update  let me take a look and i will do some moreresearch/thought on the testconcatsubscribe test caseon fri mar 29 2013 at 2:22 am cloudbees pull request builder plugin <notifications@githubcom> wrote:> rxjava-pull-requests #60https://netflixosscicloudbeescom/job/rxjava-pull-requests/60/success> > this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15633763>  || [rxjava-pull-requests #72](https://netflixosscicloudbeescom/job/rxjava-pull-requests/72/) successthis pull request looks good || my original test case was intended to test the unsubscribe inside one ofchild observable   the countdownlatch was used so that the code will havea chance to unsubscribe in a predicable manner (unsubscribe after ""four"") in a normal case there should be no blocking between inner and outerobservable  i rewrote the case for better clarity and having the outerobservable is in a separate thread (so the test will pass now)  youbrought up a good point about ""when"" you can unsubscribe  should it onlyallow unsubscribe to happen during the outer onnext()?  i need to do moreresearch on it  here is the test i plan to add```    @test``` public void testconcatunsubscribeobservableofobservable() {```        final countdownlatch callonce  new countdownlatch(1)        final countdownlatch oktocontinue  new countdownlatch(1)        final testobservable<string> w1  new testobservable<string>(```""one"" ""two"" ""three"")```        final testobservable<string> w2 ```newtestobservable<string>(callonce oktocontinue""four"" ""five"" ""six"")```        @suppresswarnings(""unchecked"")        observer<string> aobserver  mock(observerclass)        @suppresswarnings(""unchecked"")```   testobservable<observable<string>> observableofobservables newtestobservable<observable<string>>(w1 w2)```        func1<observer<string> subscription> concatf ```concat(observableofobservables)```        observable<string> concat  observablecreate(concatf)        subscription s1  concatsubscribe(aobserver)        try {            //block main thread to allow observable ""w1"" to complete```and observable ""w2"" to call onnext exactly once```        callonceawait()        //""four"" has been processed by onnext()            s1unsubscribe()            //""five"" and ""six"" will not be processed by onnext()            //unblock the observable to continue            oktocontinuecountdown()            w1tjoin()            w2tjoin()        } catch (exception e) {            eprintstacktrace()            fail(egetmessage())        }        inorder inorder  inorder(aobserver)        inorderverify(aobserver times(1))onnext(""one"")        inorderverify(aobserver times(1))onnext(""two"")        inorderverify(aobserver times(1))onnext(""three"")        inorderverify(aobserver times(1))onnext(""four"")        inorderverify(aobserver never())onnext(""five"")        inorderverify(aobserver never())onnext(""six"")        verify(aobserver never())oncompleted()        verify(aobserver never())onerror(any(exceptionclass))```  }on tue apr 2 2013 at 8:55 pm cloudbees pull request builder plugin <notifications@githubcom> wrote:> rxjava-pull-requests #72https://netflixosscicloudbeescom/job/rxjava-pull-requests/72/success> > this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15816463>  || the rx net version of concat uses the immediatescheduler to execute theoperation which will execute the operation on the same calling thread  soif the observables are running on the same thread it will besynchronous/blocked   i have pulled in your changes from your fork andadded the additional unit test to test unsubscribe() with observablesrunning in different thread  i have also updated the javadoc about theblocking with observable on the same thread  from my side it looks goodon wed apr 3 2013 at 10:20 am billy yuen billyy@gmailcom wrote:> my original test case was intended to test the unsubscribe inside one of> child observable   the countdownlatch was used so that the code will have> a chance to unsubscribe in a predicable manner (unsubscribe after ""four"")>  in a normal case there should be no blocking between inner and outer> observable  i rewrote the case for better clarity and having the outer> observable is in a separate thread (so the test will pass now)  you> brought up a good point about ""when"" you can unsubscribe  should it only> allow unsubscribe to happen during the outer onnext()?  i need to do more> research on it  here is the test i plan to add> > ```>     @test> ```> >  public void testconcatunsubscribeobservableofobservable() {> > ```>         final countdownlatch callonce  new countdownlatch(1)> >         final countdownlatch oktocontinue  new countdownlatch(1)> >         final testobservable<string> w1  new testobservable<string>(> ```> > ""one"" ""two"" ""three"")> > ```>         final testobservable<string> w2  newtestobservable<string>(callonce oktocontinue> ```> > ""four"" ""five"" ""six"")> > ```>         @suppresswarnings(""unchecked"")> >         observer<string> aobserver  mock(observerclass)> >         @suppresswarnings(""unchecked"")> ```> >    testobservable<observable<string>> observableofobservables  newtestobservable<observable<string>>(w1 w2)> > ```>         func1<observer<string> subscription> concatf > ```> > concat(observableofobservables)> > ```>         observable<string> concat  observablecreate(concatf)> > > >         subscription s1  concatsubscribe(aobserver)> > > >         try {> >             //block main thread to allow observable ""w1"" to complete> ```> > and observable ""w2"" to call onnext exactly once> > ```>         callonceawait()> >         //""four"" has been processed by onnext()> >             s1unsubscribe()> >             //""five"" and ""six"" will not be processed by onnext()> >             //unblock the observable to continue> >             oktocontinuecountdown()> >             w1tjoin()> >             w2tjoin()> >         } catch (exception e) {> >             eprintstacktrace()> >             fail(egetmessage())> >         }> > >         inorder inorder  inorder(aobserver)> >         inorderverify(aobserver times(1))onnext(""one"")> >         inorderverify(aobserver times(1))onnext(""two"")> >         inorderverify(aobserver times(1))onnext(""three"")> >         inorderverify(aobserver times(1))onnext(""four"")> >         inorderverify(aobserver never())onnext(""five"")> >         inorderverify(aobserver never())onnext(""six"")> >         verify(aobserver never())oncompleted()> >         verify(aobserver never())onerror(any(exceptionclass))> ```> >   }> > on tue apr 2 2013 at 8:55 pm cloudbees pull request builder plugin <> notifications@githubcom> wrote:> > > rxjava-pull-requests #72https://netflixosscicloudbeescom/job/rxjava-pull-requests/72/success> > > > this pull request looks good> > > > —> > reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15816463> >  || > i do find it a little strange that observablefrom(iterable) is a ""shotgun> observable"" ie the subscribe() blocks until all downstream operations> have completed on all items which means it is impossible to ever> unsubscribe() but given that this is correct behavior i think that it> makes sense that concat(o1 o2) also cannot be unsubscribed-from i added a> cautionary comment to the javadocrx does not (or rarely does) add concurrency (see guideline 612) thus `observablefrom` is wrapping a synchronous iterable therefore the observable will be synchronousa `scheduler` could be used to make the subscription to an iterable happen on another thread or a custom `observable` could be created that handles an iterable asynchronouslyall rx operators must be capable of handling both synchronous and asynchronous sequences and if its synchronous that means unsubscribe will not work (which means its up to the implementor of an observable to understand this and decided if its okay to firehose the results)for the case of concat my concern is that if all the sequences being combined are async then we need to retain the async behavior and not block and prevent unsubscriptionfor example:- async or synchronous observablea with 10 items- async or synchronous observableb with 20 items- async observablec with infinite items (hot observable that never completed)i should be able to do this: `concat(a b c)take(50)` this should get the 10 items from a 20 items from b and first 20 items from c and then unsubscribe and continuedoes this work with the current implementation and correctly unsubscribe from observablec? || good point  the best way to tell is to build an unit test for this case i can expand my new test to include this case and see what happenon wed apr 3 2013 at 2:29 pm ben christensen notifications@githubcomwrote:> i do find it a little strange that observablefrom(iterable) is a ""shotgun> observable"" ie the subscribe() blocks until all downstream operations> have completed on all items which means it is impossible to ever> unsubscribe() but given that this is correct behavior i think that it> makes sense that concat(o1 o2) also cannot be unsubscribed-from i added a> cautionary comment to the javadoc> > rx does not (or rarely does) add concurrency (see guideline 612) thus> observablefrom is wrapping a synchronous iterable therefore the> observable will be synchronous> > a scheduler could be used to make the subscription to an iterable happen> on another thread or a custom observable could be created that handles> an iterable asynchronously> > all rx operators must be capable of handling both synchronous and> asynchronous sequences and if its synchronous that means unsubscribe will> not work (which means its up to the implementor of an observable to> understand this and decided if its okay to firehose the results)> > for the case of concat my concern is that if all the sequences being> combined are async then we need to retain the async behavior and not block> and prevent unsubscription> > for example:> - async or synchronous observablea with 10 items> - async or synchronous observableb with 20 items> - async observablec with infinite items (hot observable that never>   completed)> > i should be able to do this:> > concat(a b c)take(50)> > this should get the 10 items from a 20 items from b and first 20 items> from c and then unsubscribe and continue> > does this work with the current implementation and correctly unsubscribe> from observablec?> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/205#issuecomment-15866540>  || "
1,0,1,1,1,1,1,1,improved scan reduce aggregate `scan` is currently restricted to accumulators of type `func2<t t t>` where `func2<r t r>` would be possible for initial values of type `r` this pull request tries to fix this by generalizing the `scan` implementation i had to restructure the scan operator a bit for this to stay typesafe imho its more readable now thoughthis indirectly leads to generalized `reduce` tooalso `aggregate` is added as an alias for `reduce` (see #20) [rxjava-pull-requests #120](https://netflixosscicloudbeescom/job/rxjava-pull-requests/120/) successthis pull request looks good || [rxjava-pull-requests #121](https://netflixosscicloudbeescom/job/rxjava-pull-requests/121/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #122](https://netflixosscicloudbeescom/job/rxjava-pull-requests/122/) successthis pull request looks good || thank you for working on this  - `observable` had not had any changes done to it to expose the new `reduce` or `scan` methods so that should probably be added to this pull request- what names should we use on the public api?rxnet never used `reduce` it uses `aggregate` others call it fold accumulate etc (more here http://enwikipediaorg/wiki/fold_(higher-order_function))java 8 is using the `reduce` and `collector` names (http://downloadjavanet/lambda/b74/docs/api/java/util/stream/streamhtml) what names should we use and what aliases if any should we include in `observable`? || about `observable` - hmm seems that the changes got lost somehow ill go dig them out agai d about the names to use: imho rxjava should have the java 8 names as well as the orginial rxnet names || agreed with your opinion on naming can you add those when you update the observable and make sure the javadocs of the methods are clear in linking to each other when they are aliases of each other? || ive had a look at the java 8 stream operations to me it looks like theres no explicit `scan` equivalent in java 8 or am i missing something?`collect` seems to be specifically made for mutable operations i dont see where we would use thatso i would just alias `reduce` with `aggregate` and `scan` stays unaliased if thats okay  || that works for me we can always add more aliases if java 8 adds a `scan` equivalent || i plan on doing a release tomorrow (about 12 hours from now) if you want to try and have this ready for that || [rxjava-pull-requests #131](https://netflixosscicloudbeescom/job/rxjava-pull-requests/131/) successthis pull request looks good || as soon as this is in my `swing` branch becomes finally ready for a merge it offers a few simple observables created from button click keyboard and mouse events looking forward to this :) ||
1,0,1,0,0,0,1,0,implemented `mapwithindex` as requested by @samuelgruetter in #372 [rxjava-pull-requests #278](https://netflixosscicloudbeescom/job/rxjava-pull-requests/278/) failurelooks like theres a problem with this pull request || (test failure again due to sporadic timing problems) || i just submitted an [issue](https://githubcom/netflix/rxjava/issues/383) for this || looks good ||
1,0,1,1,0,1,1,1,implemented synchronize with lock hii implemented #84 to support that sending a lock to the `synchronize` operatori also found that there was a issue that `testmultithreadedwithnpe` and `testmultithreadedwithnpeinmiddle` might fail in some special situation when `onerror` is invoked before any `onnext` the last statement `assertequals(1 busyobservermaxconcurrentthreadsget())` in these methods will fail i also fixed this issue in the pull request [rxjava-pull-requests #313](https://netflixosscicloudbeescom/job/rxjava-pull-requests/313/) aborted || looks good thank you! ||
1,0,0,0,0,0,1,0,implemented the empty operator with scheduler hii implemented the empty operator with scheduler #42 please take a look thanks [rxjava-pull-requests #323](https://netflixosscicloudbeescom/job/rxjava-pull-requests/323/) successthis pull request looks good || [rxjava-pull-requests #325](https://netflixosscicloudbeescom/job/rxjava-pull-requests/325/) successthis pull request looks good ||
1,0,0,0,1,1,1,1,implemented the amb operator hi this pr implemented the `amb` operator #22 i used varargs to support the array version and first-second version in one method so in my pr there are only two variants [rxjava-pull-requests #379](https://netflixosscicloudbeescom/job/rxjava-pull-requests/379/) failurelooks like theres a problem with this pull request || you shouldnt define a vararg method taking a generic type because you cannot use it without getting warnings (weve already had this with other operators) instead define an overload for 2 args 3 args 4 args  || yup its a pain but this is what we ended up doing for zip merge etc instead of using varargs || [rxjava-pull-requests #382](https://netflixosscicloudbeescom/job/rxjava-pull-requests/382/) failurelooks like theres a problem with this pull request || thank you ||
1,0,0,0,1,1,1,1,added the rest overloads of timeout operator hi this pr implemented the rest overloads of `timeout` operator #91 please take a look thanks [rxjava-pull-requests #383](https://netflixosscicloudbeescom/job/rxjava-pull-requests/383/) failurelooks like theres a problem with this pull request || due to pull request https://githubcom/netflix/rxjava/pull/466 which touched virtually every file in the project can you please rebase this so it can merge cleanly again? || [rxjava-pull-requests #388](https://netflixosscicloudbeescom/job/rxjava-pull-requests/388/) failurelooks like theres a problem with this pull request || i have rebased it || thank you @zsxwing  ||
1,0,0,0,1,1,1,1,"implemented the ""operator: min and minby"" and ""operator: max and maxby"" hi this pr implemented the `operator: min and minby` #63 and `operator: max and maxby` #61 every operator has 2 variants one for `comparable` another for `comparator` please take a look thanks! [rxjava-pull-requests #404](https://netflixosscicloudbeescom/job/rxjava-pull-requests/404/) successthis pull request looks good || `operationmin` and `operationmax` are exactly the same except that `<` and `>` are swapped cant you implement one in terms of the other? or create a general one which takes +1 or -1 to know whether we want `<` or `>`? || is the following solution ok?``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source -1)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source 1)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final long flag) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (flag * acccompareto(value) > 0) {                    return acc                }                return value            }        })    }````flag` must be `long` as `integermin_value  -1 * integermin_value` but we will have one multiplication for every `compareto`another solution is:``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source true)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source false)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final boolean ismin) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (ismin) {                    if (acccompareto(value) < 0) {                        return acc                    }                } else {                    if (acccompareto(value) > 0) {                        return acc                    }                }                return value            }        })    }```@samuelgruetter  do you have other better solution? || i like both of these two solutions with a slight preference for the first one -)nice catch with integermin_value :-)a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue: what if there are several minimal elements? does min return the first of them the last of them or is it unspecified? this should be documented || @samuelgruetter  thanks for your review i used the +1/-1 way to implement it and also updated the document || [rxjava-pull-requests #407](https://netflixosscicloudbeescom/job/rxjava-pull-requests/407/) successthis pull request looks good || looks good @zsxwing and thanks @samuelgruetter for the reviewsome nice use of generics in those signatures! ||"
1,0,0,0,1,1,1,1,"implemented the ""operator: min and minby"" and ""operator: max and maxby"" hi this pr implemented the `operator: min and minby` #63 and `operator: max and maxby` #61 every operator has 2 variants one for `comparable` another for `comparator` please take a look thanks! [rxjava-pull-requests #404](https://netflixosscicloudbeescom/job/rxjava-pull-requests/404/) successthis pull request looks good || `operationmin` and `operationmax` are exactly the same except that `<` and `>` are swapped cant you implement one in terms of the other? or create a general one which takes +1 or -1 to know whether we want `<` or `>`? || is the following solution ok?``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source -1)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source 1)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final long flag) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (flag * acccompareto(value) > 0) {                    return acc                }                return value            }        })    }````flag` must be `long` as `integermin_value  -1 * integermin_value` but we will have one multiplication for every `compareto`another solution is:``` java    public static <t extends comparable<t>> observable<t> min(            observable<t> source) {        return minmax(source true)    }    public static <t extends comparable<t>> observable<t> max(            observable<t> source) {        return minmax(source false)    }    public static <t extends comparable<t>> observable<t> minmax(            observable<t> source final boolean ismin) {        return sourcereduce(new func2<t t t>() {            @override            public t call(t acc t value) {                if (ismin) {                    if (acccompareto(value) < 0) {                        return acc                    }                } else {                    if (acccompareto(value) > 0) {                        return acc                    }                }                return value            }        })    }```@samuelgruetter  do you have other better solution? || i like both of these two solutions with a slight preference for the first one -)nice catch with integermin_value :-)a third solution would be to implement max using min and wrapping the given comparator such that it inverts the ordering but i think the first solution is the bestanother issue: what if there are several minimal elements? does min return the first of them the last of them or is it unspecified? this should be documented || @samuelgruetter  thanks for your review i used the +1/-1 way to implement it and also updated the document || [rxjava-pull-requests #407](https://netflixosscicloudbeescom/job/rxjava-pull-requests/407/) successthis pull request looks good || looks good @zsxwing and thanks @samuelgruetter for the reviewsome nice use of generics in those signatures! ||"
1,0,0,0,0,0,1,0,bugfix: emit an illegalargumentexception instead of arithmeticexception if the observable is empty this pr fixed the `average` issue in #423 if an observable is empty `average` will emit an `illegalargumentexception` instead of `arithmeticexception` thanks! [rxjava-pull-requests #405](https://netflixosscicloudbeescom/job/rxjava-pull-requests/405/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,implement the using operator hi this pr implemented the `using` operator #99 please take a look thanks! [rxjava-pull-requests #406](https://netflixosscicloudbeescom/job/rxjava-pull-requests/406/) successthis pull request looks good || interesting operator  hadnt really ever looked at this onethank you @zsxwing for the implementation! ||
1,0,0,0,1,1,1,1,implement the using operator hi this pr implemented the `using` operator #99 please take a look thanks! [rxjava-pull-requests #406](https://netflixosscicloudbeescom/job/rxjava-pull-requests/406/) successthis pull request looks good || interesting operator  hadnt really ever looked at this onethank you @zsxwing for the implementation! ||
1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98  startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
1,0,1,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98  startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98  startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
1,0,0,0,0,0,1,0,implement the scheduler overloads for range from startwith hi this pr implemented the scheduler overloads for range #68 from #98  startwith #82 please take a look thanks! [rxjava-pull-requests #415](https://netflixosscicloudbeescom/job/rxjava-pull-requests/415/) successthis pull request looks good || this conflicts and cant merge can you rebase and update the pr please? || i have updated the pr || [rxjava-pull-requests #420](https://netflixosscicloudbeescom/job/rxjava-pull-requests/420/) successthis pull request looks good || thanks ||
1,0,0,0,0,0,1,0,add contravariant for min and max hi this pr added  contravariant for min and max mentioned in #494 [rxjava-pull-requests #419](https://netflixosscicloudbeescom/job/rxjava-pull-requests/419/) successthis pull request looks good ||
1,1,0,1,1,1,1,1,add contravariant for min and max hi this pr added  contravariant for min and max mentioned in #494 [rxjava-pull-requests #419](https://netflixosscicloudbeescom/job/rxjava-pull-requests/419/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,operators: and then when issue #23 issue #88 issue #100can be extended to plan4plan9 and pattern4pattern9 if action4action9 is available not sure about the actionn version [rxjava-pull-requests #430](https://netflixosscicloudbeescom/job/rxjava-pull-requests/430/) failurelooks like theres a problem with this pull request || i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine (although with jdk 7) now what?edit: i found the logical error in operationgroupbytest:334 assuming the thread will finish if it emits 29-49 items is unreliable should that assertion be tested at all? || just another case of https://githubcom/netflix/rxjava/issues/383#issuecomment-27571436 the operationgroupbytest test issue has not be fixed yet || that is an impressive contribution @akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre 10 so that if there are any issues found we can still fix them even if we need to break a signature ||
1,0,1,0,0,0,1,0,operators tomap and tomultimap again issue #96 and issue #97tomap: 3 overloadstomultimap: 4 overloadsadded groovy test to verify overloading [rxjava-pull-requests #438](https://netflixosscicloudbeescom/job/rxjava-pull-requests/438/) successthis pull request looks good || ah  this cant merge anymore because of other commits (probably the join operator on your other pr) can you rebase? ||
1,0,0,0,0,0,1,0,operators tomap and tomultimap again issue #96 and issue #97tomap: 3 overloadstomultimap: 4 overloadsadded groovy test to verify overloading [rxjava-pull-requests #438](https://netflixosscicloudbeescom/job/rxjava-pull-requests/438/) successthis pull request looks good || ah  this cant merge anymore because of other commits (probably the join operator on your other pr) can you rebase? ||
1,1,0,1,1,1,1,1,operators tomap and tomultimap again issue #96 and issue #97tomap: 3 overloadstomultimap: 4 overloadsadded groovy test to verify overloading [rxjava-pull-requests #438](https://netflixosscicloudbeescom/job/rxjava-pull-requests/438/) successthis pull request looks good || ah  this cant merge anymore because of other commits (probably the join operator on your other pr) can you rebase? ||
1,0,0,0,0,0,1,0,operator groupjoin v2 issue #53rebasedstill: @headinthebox while writing the test for the operator ive noticed that when both duration selectors are never() rxnet never calls oncompleted on the group subjects even though the left and right sources oncomplete() i havent seen rxnet test for this scenario this comes into play when i want to emulate join() with groupjoin(): the outer merge never oncompletes() if i understand the behavior corretly when both left and right sources get depleted there is no way a new group or new group value would arrive and all the open groups and the main observer can be oncompleted() this is somewhat similar to join() and groupbyuntil() behavior [rxjava-pull-requests #493](https://netflixosscicloudbeescom/job/rxjava-pull-requests/493/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,operation sample with observable v2 issue #74- sample will terminate if either the source or the sampler terminates or throws an error- the sampler now emits values only in its onnext() method therefore if the sampler completes and there is a sampled value available (`valuetaken  false`) it wont emit the value before terminating [rxjava-pull-requests #506](https://netflixosscicloudbeescom/job/rxjava-pull-requests/506/) successthis pull request looks good ||
1,1,0,1,1,1,1,1,"lock-free subscriptions - uniform naming of inner components: issue #592- lock-free approach to avoid deadlocks: issue #577- serialsubscriptionisunsubscribe added: issue #590remarks:- imo an unsubscribed single/serial/multiple subscription return subscriptionsempty() instead of null so unless the user put a null in there he/she shouldnt worry about null- there was a concurrency bug in @jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal -> mutate transitions it cannot return subscriptionsempty() since the rx contract is to return null also returning empty() when unsubscribed is ambiguous: has it been unsubscribed or has empty() been set by the client code ? || [rxjava-pull-requests #527](https://netflixosscicloudbeescom/job/rxjava-pull-requests/527/) successthis pull request looks good || good that you fixed the race condition in multipleassignementsubscription as well as the contract (it was unsubscribing the previous subscription although it shouldnt) || ive checked the rxnet sources:- singleassignmentdisposable returns defaultdisposableinstance- serialdisposabe returns null- refcountdisposable returns disposableempty- scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null? checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why `isunsubscribed()` is to be used to check the state || > it cannot return subscriptionsempty() since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real ""state"" is is isunsubscribed (and the properties might as well be write-only) || i think the disposable / subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the ""least astonishment"" principle || "
1,0,0,0,0,0,1,0,"lock-free subscriptions - uniform naming of inner components: issue #592- lock-free approach to avoid deadlocks: issue #577- serialsubscriptionisunsubscribe added: issue #590remarks:- imo an unsubscribed single/serial/multiple subscription return subscriptionsempty() instead of null so unless the user put a null in there he/she shouldnt worry about null- there was a concurrency bug in @jloisel s reimplementation of compositesubscription it allowed multiple threads to enter the mutation part if the current state was already mutate ive added the necessary checks to allow only normal -> mutate transitions it cannot return subscriptionsempty() since the rx contract is to return null also returning empty() when unsubscribed is ambiguous: has it been unsubscribed or has empty() been set by the client code ? || [rxjava-pull-requests #527](https://netflixosscicloudbeescom/job/rxjava-pull-requests/527/) successthis pull request looks good || good that you fixed the race condition in multipleassignementsubscription as well as the contract (it was unsubscribing the previous subscription although it shouldnt) || ive checked the rxnet sources:- singleassignmentdisposable returns defaultdisposableinstance- serialdisposabe returns null- refcountdisposable returns disposableempty- scheduleddisposable returns defaultdisposableinstanceso my question is why only serialdisposable returns null? checking the return of the getsubscription to determine if unsubscription happened is wrong since serialsubscription can be started with null this is why `isunsubscribed()` is to be used to check the state || > it cannot return subscriptionsempty() since the rx contract is to return nulli dont think that is actually this strict that is what the implementation does i think it is better to return empty than null the real ""state"" is is isunsubscribed (and the properties might as well be write-only) || i think the disposable / subscription contract lakes precision and uniformity it doesnt matter to return null or empty what matters is a constant behavior following the ""least astonishment"" principle || "
1,0,0,0,0,0,1,0,"implement the start operator hi this pr implemented the `start` operator #81 please take a look [rxjava-pull-requests #528](https://netflixosscicloudbeescom/job/rxjava-pull-requests/528/) successthis pull request looks good || nice! so `observablestart(func0)` might become the new way of creating futures maybe add some tests which illustrate what happens if i subscribe to `observablestart` before/while/after its calculation has terminated and what happens if there are several subscribers (i think its correctly implemented but just to make everything more stable and better documented) || thanks @samuelgruetter  i added more tests is it necessary to construct a special test that `subscribe` and `func` run at the same time? i think ""before"" and ""after"" are enough || [rxjava-pull-requests #533](https://netflixosscicloudbeescom/job/rxjava-pull-requests/533/) successthis pull request looks good || [rxjava-pull-requests #537](https://netflixosscicloudbeescom/job/rxjava-pull-requests/537/) successthis pull request looks good || "
1,0,1,0,0,0,1,0,"replay additional overloads issue #71- added several overloads of the `replay` operator:   - limited buffer limited time window buffer+time   - scheduler overloads   - versions which perform a projection before the replay- added missing `multicast` overload [rxjava-pull-requests #548](https://netflixosscicloudbeescom/job/rxjava-pull-requests/548/) successthis pull request looks good || could you give me an explanation of what the ""selector"" does and why itsuseful and also what the version of replay that uses a subject factory isall about?  the javadocs are opaque to me and the msdn docs / intro-to-rxarent helpful eitheron thu dec 12 2013 at 12:53 pm cloudbees pull request builder plugin <notifications@githubcom> wrote:> rxjava-pull-requests #548https://netflixosscicloudbeescom/job/rxjava-pull-requests/548/success> this pull request looks good> > —> reply to this email directly or view it on githubhttps://githubcom/netflix/rxjava/pull/612#issuecomment-30460606> ## david m grossplp consulting || im not sure myself i think it allows transforming the subjects output without the danger of resubscribing to the uplink source i couldnt find any tests for them in the rxnet sources || "
1,0,0,1,1,1,1,1,operators: switchcase (case) ifthen (if) dowhile (dowhile) whiledo (w hile)issue #634no msdn references available [rxjava-pull-requests #565](https://netflixosscicloudbeescom/job/rxjava-pull-requests/565/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,window with observable boundary listed in issue #653 [rxjava-pull-requests #649](https://netflixosscicloudbeescom/job/rxjava-pull-requests/649/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,zip with iterable removed old aggregator version and updated tests listed in #653 [rxjava-pull-requests #656](https://netflixosscicloudbeescom/job/rxjava-pull-requests/656/) successthis pull request looks good || these are instance methods none of our `zip` operators are at the instance level i would have thought wed add the `zip` overloads with `iterable` to match the existing static ones? || i went according to #653 where there was 2 zip overloads without strike-through || agreed on the overloads but they should be static correct? || no the intention was to chain them to an existing observable:``` javaobservablefrom(1 2 3)zip(arraysaslist(4 5 6) (a b) -> a * b)``` || makes sense wasnt sure as it was different than all the other zip methods thanks for confirming  ||
1,0,0,0,0,0,1,0,fixing the generics for merge and lift ive tracked down to two problems #858 the first is that lift wasnt quite right i changed the lift argument from `operator<r t>` to `operator<? extends r ? super t>`  unfortunately java wont let us hide that away in the `operator` class so we have to redeclare that everywhere in the debug hooks but its still better than the alternative of having to use the full `func1<? extends subscriber<? super r> ? super subscriber<? super t>>` everywherethe second problem was in the return type of merge `observable<t>`  because of operators like `merge(observable<? extends t> t1 observable<? extends t> t2)` the only thing that can be said for the return type is that it is also `observable<? extends t>` but at the moment it is returning `observable<t>`this pull request changes all of them and leads to some silly return values like```observable<string> a bobservable<? extends string> x  merge(a b)``` [rxjava-pull-requests #784](https://netflixosscicloudbeescom/job/rxjava-pull-requests/784/) failurelooks like theres a problem with this pull request || we should avoid return types such as `a<? extends b>` || [rxjava-pull-requests #787](https://netflixosscicloudbeescom/job/rxjava-pull-requests/787/) failurelooks like theres a problem with this pull request || [rxjava-pull-requests #788](https://netflixosscicloudbeescom/job/rxjava-pull-requests/788/) successthis pull request looks good || @akarnokd you were right the return type change wasnt necessary  ive reverted and rebased the branch to clean out all the mistakes || [rxjava-pull-requests #789](https://netflixosscicloudbeescom/job/rxjava-pull-requests/789/) successthis pull request looks good || i almost did a pr on this when i saw you now did the same thing as i but was it necessary to change the debugs as well? || yes there is a plugin hook inside lift that the debug plugin implements and spreads from there ||
1,0,0,0,1,1,1,1,fixed deadlock in subjects + operatorcache fix for issue #971- i had to rewrite operatorcache to allow testing for deadlocks in all subject types- the terminationlatch was unnecessarily waiting for existing subscribers to deliver their termination events which caused deadlock with repeat()- treating subjects as internal implementations was not necessary to fix the problem [rxjava-pull-requests #912](https://netflixosscicloudbeescom/job/rxjava-pull-requests/912/) successthis pull request looks good || i dont understand these changes yet but on first review they are very awkward as the `subjectsubscriptionmanager` methods now both invoke a function and return a collection || true the rewritten subjects dont require an action1 they are fine with action0 the changes had to be made since the countdonwlatch logic acted as a synchronization block and emitting events while holding locks is prone to deadlocks as the associated issue demonstrates || ah holding the lock is the issue we should find a way of doing that without the latches at all as it is blocking  || the latch has its use because once the state has been swapped to terminal state we still need to perform some tasks on any related state within the particular subject before client notifications can resume: usually it is to set the last event which then will be available to newcomers || i havent merged this yet as i need to spend time better understanding this and the impact on design || since this has conflicts and i did some cleanup based on our discussion above ive opened https://githubcom/netflix/rxjava/pull/1040 for merging this  ||
1,0,0,1,1,1,1,1,operatorbuffer operator buffer split into 4 variantsissue #1060there are some important behavioral changes compared to the original versions:- when an onerror event appears from anywhere the currently accumulated chunk(s) are _not_ emitted before the error is propagated this conforms with rx design guideline 66- the observable returned by the func0 inside the `buffer(func0<observable<b>>)` now is used as long as possible and whenever it fires an event a new buffer chunk is started the func0 is called only once per subscriber the original called it and subscribed to it all the time causing all-increasing resubscriptions [rxjava-pull-requests #986](https://netflixosscicloudbeescom/job/rxjava-pull-requests/986/) successthis pull request looks good ||
1,0,0,0,0,0,1,0,"operatorcombinelatest operator combinelatestissue #1060remarks:- added an overload to observable which accepts any number of sources not sure why it wasnt exposed before? perhaps removed?- relying on just the sos onnext is not enough as leaving the synchronized block allows reordering of onnext calls therefore the combinator uses the trick from serializedobserver to make sure the combination order is consistent with whe winning of the synchronization ""race""  [rxjava-pull-requests #990](https://netflixosscicloudbeescom/job/rxjava-pull-requests/990/) successthis pull request looks good ||"
1,0,0,0,1,1,1,1,"operatorgroupbyuntil operator groupbyuntilfor issue #1060while rewriting ive noticed a common pitfall with the observation of the duration: many other operators react to onnext or oncompleted but one should only ""expire"" once ill review my recent operators and post a separate pr if any [rxjava-pull-requests #1005](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1005/) failurelooks like theres a problem with this pull request ||"
1,1,0,1,1,1,1,1,operatorjoin operator joinissue #1060remark: now that the clientonnext is called outside the synchronization block joint results may appear in arbitrary order in case both left and right observables emit values concurrently i suppose the strict ordering is not really expected here but someone who uses this operator can tell (@duncani perhaps?) [rxjava-pull-requests #1014](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1014/) failurelooks like theres a problem with this pull request || rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing || > rxoperatorsoperatorpivottesttestconcurrencyandserialization needs some fixing yes it does ||
1,0,0,0,1,1,1,1,add `replay` and `multicast` variants to rxscala this pr has some breaking changes:- change `def multicast[r >: t](subject: rxlangscalasubject[r]): (() > subscription observable[r])` to `def multicast[r >: t](subject: rxlangscalasubject[r]): connectableobservable[r]`- change `def replay: (() > subscription observable[t])` to `def replay: connectableobservable[t]`- remove `observableapply(int)`so its better to merge it at the next major release#1152 #1153/cc @headinthebox @samuelgruetter [rxjava-pull-requests #1072](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1072/) successthis pull request looks good || id like someone with better scala skills that me to review this please || ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable || [rxjava-pull-requests #1081](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1081/) successthis pull request looks good || [rxjava-pull-requests #1087](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1087/) successthis pull request looks good || is this reviewed and ready to go? it is conflicting against master so can you please rebase? || this is also conflicting against #1178 i would like to rebase it after #1178 is merged to master || waiting until #1210 is merged || already merged || [rxjava-pull-requests #1129](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1129/) successthis pull request looks good || should this wait until were ready to do 019? || i think this one can be merged since #1188 has already broken the api @headinthebox @samuelgruetter  do you mind it? || go for it ||
1,0,0,0,1,1,1,1,behavior subject time gap fix 2 based on discussions in #1181 ive unified the behavior among the subjectsbehaviorsubject doesnt seem to exhibit issue #658 and #1184a second pair of eyes would be great to confirm the correctness and check if the removal of the countdownlatch was the correct approach [rxjava-pull-requests #1095](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1095/) failurelooks like theres a problem with this pull request || wow this is quite the change :-) i need fresher eyes on this one so will come back to it thank you very much for tackling this! || this is non-trivial code so i may have missed something but this looks like excellent forward progress on what we had to add the functionality needed for `behaviorsubject` and sharing the logic across all of the `subject` implsvery nice work ||
1,0,0,0,0,0,1,0,"swingscheduler: allow negative schedule fix for issue #1193 the new `scheduleperiodic` may calculate negative delay times if the next task was already due this change will allow negative timing on the swing scheduler indicating an immediate schedule [rxjava-pull-requests #1106](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1106/) failurelooks like theres a problem with this pull request || i suggest adding some comments in the `schedulerschedule` and `schedulescheduleperiodically` about negative timing eg ""negative delay time should be regarded as 0"" it would be helpful for anyone who wants to implement special `scheduler` || ive added extra comments || [rxjava-pull-requests #1109](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1109/) failurelooks like theres a problem with this pull request || "
1,0,0,1,0,1,1,1,executorscheduler to wrap an executor for issue #1219 (and #1206)this implementation should conform with the scheduler contract except it is not possible to avoid thread-hopping (dont worry the tasks execute serially but maybe not on the same physical thread)few open improvement possibilities:- usage of `mpsclinkedqueue` once available- a better performing subscription container for this kind of queue-drain task tracking instead of `compositesubscription`- ability to remove a `subscription` from a `compositesubscription` without it calling unsubscribe on the removed subscription á la `multipleassignmentsubscriptionset()` [rxjava-pull-requests #1170](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1170/) successthis pull request looks good || thanks @akarnokd for this looks good for a first cut the trade-offs (thread hopping) are expected and why we wont use this as a default for anything and agreed on possible improvements but those can come later ||
1,0,1,0,0,0,1,0,concurrency fixes for rxringbuffer & merge possible fix for #1420i was unable to exactly reproduce the issue but was able to create a possibly related one this fixes itit also simplifies the logic and code somewhat at a possible small performance cost for these:```rooperatormergeperfmerge1syncstreamofn            1000  thrpt         5    59407716     2073945    ops/srooperatormergeperfmerge1syncstreamofn         1000000  thrpt         5       66557        2693    ops/srooperatormergeperfmergensyncstreamsofn           1000  thrpt         5       59293        5046    ops/s```  
1,0,0,0,1,1,1,1,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in #1580 [rxjava-pull-requests #1510](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1510/) successthis pull request looks good || [rxjava-pull-requests #1511](https://netflixosscicloudbeescom/job/rxjava-pull-requests/1511/) successthis pull request looks good ||
1,0,0,0,0,1,1,1,emptyobserver and testobserver - remove `emptyobserver` as it was confusing compared to `observersempty()` (fixes #1741)- make `testobserver` not throw `onerrornotimplemented` if a delegate is not provided (fixes #1571)  
1,0,0,0,0,0,1,0,"set removeoncancelpolicy on the threadpool if supported this should solve the task retention problem of unused timeout tasks mentioned in #1919i know java 7+ scheduledthreadpoolexecutor has the `setremoveoncancelpolicy` and i remember seeing it in android although i cant tell from which api versionin java 6 this cant be solved without rewriting the entire scheduler or using a backported executor @akarnokd cool thanks for whipping this up so quickly since rxjava supports java 6 we need to fix that too right? || i looked at the packages of jsr166_ but couldnt find one that ports this flag back to java 6 || @benjchristensen are there plans to ""fix"" this for java 6 too? since we technically support it or do we mark it as a limitation and people that are hit by this need to go to java 7? im asking because we have lots of users on java 6 and some of the requests have 75s timeouts  || im open to a fix that works for java 6 if someone can suggest what to do and/or submit a pr i personally dont have the time to tackle this anytime soon but would accept the change if it solves the problem without breaking anything else (including performance) for java 7/8  || @benjchristensen okay thanks for the info ill tackle it if customers start to ""complain"" for now i also think its not as high priority - since technically jdk 6 is eol anyway :) || yes :-) the strongest reason actually that rxjava supports java 6 rather than 7 as the minimum is for android support if it becomes an issue for your customers and you want to tackle this ill happily review discuss and merge  || youd need to backport the java 7 scheduledthreadpoolexecutor and a bunch of helper classes i looked for a backport on doug leas site but no luck || how about calling `scheduledthreadpoolexecutorremove(runnable task)` in `unsubscribe` for java 6? although its a o(n) action while its o(log n) in java 7+ its better than oom || that doesnt work on `submit()` tasks because they are wrapped maybe a better option is to have `purge()` be called periodically || > that doesnt work on submit() tasks because they are wrappedthe returned `scheduledfuture` is exactly the object in the workqueue || "
1,0,0,0,0,1,1,0,scheduledexecutorservice: call purge periodically on jdk 6 to avoid cancelled task-retentionfirst debated in #1922 see also #1919we may want to discuss the naming of system parameters i chose these so rxjava 20 specific properties may be trivially separated:`ioreactivexrxjavaschedulerjdk6purge-frequency-millis`specifies the purge frequency in milliseconds default is 1000`ioreactivexrxjavaschedulerjdk6purge-force`forces the use of the purge (if set to true) even if the setremoveoncancelpolicy is supported the benefit is that removing cancelled tasks now runs on a different thread so the main pool thread doesnt waste time on them the drawback is the retention window can be still to largedo we have a wiki page where such parameters are listed? i did run the unit test by forcing a jdk 6 runtime and seems to work merging to allow progress on schedulers ||
1,0,0,1,0,0,1,0,subject state information methods & bounded replaysubject termination fixthis pr aims to support the requests in #2331 and #1897 by adding methods to the (final) subject classes that let developers access in-flight state in a snapshot fashion this may be considered safe api change because all subject classes were final already so adding extra methods wont break anyones code (and we will be careful with our observable in the future)- `notificationlite` is now extended with two missing value checks: isnull and isnext- each subject has `hascompleted` `hasthrowable` and `getthrowable` methods however i cant add them to `subject` because that would be an incompatible api change- where applicable `getvalue` and `getthrowable` return `null` instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand- there was a chaining bug in the bounded replaysubject: because the terminal value was added after a potential pruning the node links could get broken and concurrent replays might not have seen the terminal value- since `replaysubject` can have multiple values ive added `size()` `hasanyvalue()` (isempty is taken) and `getvalues()` methods to make a snapshot of the current buffer contents whether or not the `replaysubject` has terminated (the usual tolist() would wait until the subject has terminated) - the unrelated `operatormergetesttestconcurrency` hangs for me for some reason without activity (either a buffer bug or a merge bug is in play there) ive added a timeout so it doesnt stop the other tests im merging this: changes are either internal or annotated with experimental on final classes ||
1,0,1,0,0,1,1,1,subscriberrequest should throw exception if negative request made as per discussion in #1956 and #2545 making a call to `subscriberrequest(n)` with negative n should throw an `illegalargumentexception`includes unit test i think the iae should be mentioned in requests javadoc || javadoc added || great! ||
1,0,0,0,0,0,1,0,flatmap overloads with maximum concurrency parameter for issue #2626there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completion :+1:  || > there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completioni was wrong with this statement depending on the request pattern reordering may still happen and the downstream may be still slower unboundedness of `flatmapiterable` may still cause excessive source iterable generation that fills in the tracking arrays inside `flatmap`having the `maxconcurrency` parameter is valuable and prevents buffer bloat ||
1,0,0,0,0,0,1,0,optimized scalar observeon/subscribeon redone #2603run on i7 920 26ghz windows 7 x64 jdk 18u31```benchmark      (size)       this   score error       1x   score errorobserveon           1  160377408     3091205  140913081     7097415observeon          10  132990049     1477661  125288149    14304259observeon         100   43701203     2342570   43840921      944682observeon        1000   11603952     2377205   11400340     1400628observeon        2000    6769716      220476    6853283       71276observeon        3000    4753876      326497    4741108      120612observeon        4000    3616782      212285    3632433      433754observeon       10000    1544141       28796    1548504       61419observeon      100000     149573       14974     150924        8331observeon     1000000      14909        2079      13658        7702subscribeon         1  160639801    16463799  156911862     2463637subscribeon        10  148883172     6885684  151514397     9425348subscribeon       100  133756358     3329421  133327933     3479124subscribeon      1000   56411785    22525962   52902999    19948305subscribeon      2000   35471110    12240514   34272374    16515454subscribeon      3000   25868564     2755244   26291293     2435165subscribeon      4000   20453512     2996777   19598400     4643195subscribeon     10000    8817797      465195    5389428      272784subscribeon    100000     958665       22157     900036      320547subscribeon   1000000      91606        2462      91396        3407```note that since the tests create a lot of garbage some perf numbers have quite some error margin: some appear to be faster with this pr while others appear to be slower even if they are not affected by the changes am i reading it correctly that this should really only benefit this case? >```benchmark      (size)       this   score error       1x   score errorobserveon           1  160377408     3091205  140913081     7097415``` || yes it optimizes for the scalar observing of a value i assume this is a common enough case to warrant an optimized code path || this is exactly the case i need :) || code looks good all internal changes thanks @akarnokd  ||
1,0,0,0,0,0,1,0,fixed multiple calls to onstart started investigating multiple calls to onstart based on #2979 and found a bunch but since onstart can be overridden i might have missed cases in addition ive found a single place where a producer is set twice on a subscriber but again many other places may exist (i know that is easy to complain :wink:) this decorator strategy is not very memory friendly you have this annoying (gwt compatibility perspective) atomicxxxfieldupdater in a lot of places to reduce memory usage and you end up adding this decorators to only disable one method callwhat do you think? thanks to solve the problem anyway :smile: || yikes! theres a lot of stuffed up backpressure fixed here im hoping we can release soon ||
1,0,0,0,0,0,1,0,"remove unnecessary static modifier ps @benjchristensen @akarnokd sorry for large amount of simple pull requests im doing full code review of rxjava sources http://artemzincom/blog/rxjava-code-review-part-1/ and ill create prs and issues during this reviewill try to group changes by themes so it will be easy to review them looks like this adventure is going to be part of #3145! if it were only me id accept cosmetic changes such as this but history tells me not to  || @akarnokd why? sad that `javac` is not strict enough and allows such things we can add `checkstyle` with only java-lang rules and remove all these things from the code but last time i suggested to add `checkstyle` @benjchristensen was not very happy…i understand that rxjava is not ""my project"" and i cant just come and force you to use ""my codestyle"" (which is actually just standard java codestyle) so if you dont want to accept such changes — its okay ill stop doing such prs and will report only major issues || i like this pr too much im going to merge it ) || > i like this pr too much im going to merge it ):-) || "
1,0,0,0,0,1,1,1,1x: completable class to support valueless event composition + tests this is a backport of #3439 looks good should we annotate `@experimental` on all the public methods and operators?  || now the class annotation should indicate all methods are experimental if individual methods get promoted we can add direct annotations then || sounds good :+1:on sat dec 5 2015 01:38 david karnok notifications@githubcom wrote:> now the class annotation should indicate all methods are experimental if> individual methods get promoted we can add direct annotations then> > —> reply to this email directly or view it on github> https://githubcom/reactivex/rxjava/pull/3444#issuecomment-162167535 || since this adds to the api surface id like to get another like before merging || :+1:  || awesome thanks! ||
1,0,0,0,0,0,1,0,1x: delaysubscription with a plain other observable requested in #3445this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration(bonus points to those who can recognize the similarities with #3446) any thoughts about this? || :+1:  || :+1:  ||
1,0,0,0,0,0,1,0,1x: delaysubscription with a plain other observable requested in #3445this is an efficient implementation as it avoids allocating the lifter object doesnt require a function wrapper and doesnt use producer arbitration(bonus points to those who can recognize the similarities with #3446) any thoughts about this? || :+1:  || :+1:  ||
1,0,0,1,0,1,1,0,1x: add shorter rxjavaplugin class lookup approach this adds a new pattern and lookup method that lets the developer specify the custom plugins with shorter system property keys android is quite restrictive and allows only 31 charactersthe new pattern splits the target simple class name and its implementation into two separate system properties:```rxjavaplugin1classsimpleclassnamerxjavaplugin1implpathtoimplclass```the index tag (`1`) can be any string of your chosing:```rxjavapluginmykeyclasssimpleclassnamerxjavapluginmykeyimplpathtoimplclass```but make sure they are paired otherwise nothing will happenif there are multiple `class` entries with the same `simpleclassname` one of them will be chosen (depending on the walk order in `javautilproperties`)related issue #2835 :+1:  || updated: made strings local constants and using `length`˙instead of magic numbers plus if the default keying matches the properties is not traversed for an alternate specification || an alternative pattern could be this:```rxjavaplugin1simpleclassnameorgpackagenamingactualclass``` || i agree that if the plugin cannot be found we should crash the app  || updated the code to crash if the plugin implementation is missing || thanks! ||
1,0,0,0,0,0,1,0,"1x: fix observeon resource handling add delayerror capability this pr fixes the ""messing around"" reported in #3002 and adds an overload to `observeon` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports)in addition this pr adds a proper override of the `isempty` method to simply compare the two indexes for emptiness directly instead of `size()  0` to avoid looping multi-reading and castingbenchmark comparison (i7 4790 windows 7 x64 java 8u66):![image](https://cloudgithubusercontentcom/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10png)note that the benchmark is generally quite noisy yielding hectic results (ie firing up a thread with newthread may take quite some random microseconds) for example `observeonimmediate` shouldnt be affected by any of the changes yet the run-to-run variance is +/- 10% im fine with the results of the benchmark :+1: ||"
1,0,0,0,0,0,1,0,"1x: fix observeon resource handling add delayerror capability this pr fixes the ""messing around"" reported in #3002 and adds an overload to `observeon` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports)in addition this pr adds a proper override of the `isempty` method to simply compare the two indexes for emptiness directly instead of `size()  0` to avoid looping multi-reading and castingbenchmark comparison (i7 4790 windows 7 x64 java 8u66):![image](https://cloudgithubusercontentcom/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10png)note that the benchmark is generally quite noisy yielding hectic results (ie firing up a thread with newthread may take quite some random microseconds) for example `observeonimmediate` shouldnt be affected by any of the changes yet the run-to-run variance is +/- 10% im fine with the results of the benchmark :+1: ||"
1,0,0,0,0,0,1,0,1x: unified onerrorx and onexceptionresumenext and fixed backpressure the operators didnt honor backpressure when they switched over to the other observablethis pr also includes the fix #3685 there was a test failure in backpressureteststestmergeasync run before any of the changes of this pr and shouldnt have any effect overloaded servers? || :+1:  ||
1,0,0,0,0,1,1,1,1x: singleusing() this pr adds the factory method `using()` +1 overload to `single` as requested in #3732for convenience ive also added `singlesubscribe(observer)` :+1:  || lgtm:+1:  ||
1,0,0,0,0,1,1,1,1x: add singleonerrorresumenext(func) closes #3440 closes #3731 closes #3472 (whoa 3 issues at a time!) @akarnokd fixed your comments btw should i add `@experimental` to these operators? || yes and copy over the experimental and since tags into the javadoc || :+1: there is this new like option but do you get a notification for them? || noon mon mar 14 2016 8:10 pm david karnok notifications@githubcom wrote:> [image: :+1:] there is this new like option but do you get a notification> for them?> > —> you are receiving this because you are subscribed to this thread> > reply to this email directly or view it on github:> https://githubcom/reactivex/rxjava/pull/3766#issuecomment-196578174 || :+1:  || :+1:  ||
1,0,0,0,0,0,1,0,observeon: allow configurable buffer size the observeon operator is backed by a small queue of 128 slots that mayoverflow quickly on slow producers  this could only be avoided byadding a backpressure operator before the observeon (not onlyinconvenient but also taking a perf hit as it forces hops between twoqueues)this patch allows modifying the default queue size on the observeonoperatorfixes: #3751signed-off-by: galo navarro anglorvaroa@gmailcom :+1: || :+1: though id leave old test for default buffer size and just add a new one  || rebased fixed the javadoc link and a spelling mistake@artem-zinnatullin i reused this one to avoid redundancy as the code path is virtually the same and there are tests (the ones referenced in the @link) which use the default size let me know if you still prefer the 2 cases and ill fix that || yeah i understand just afraid that one may change linked  tests and we wont cover overload // one day well setup code coverage i hope || agh thanks @akarnokd i didnt notice i changed computers so i was back on the 1st patch and lost the overload resubmitted based on the one with all overloads and added the extra test instead of rewriting it hopefully fine now || :+1: || ive seen some failures on the test locally and there is also a bug in the test (the loop should start at 2 not 1) i cant look into it right now but will take a look asap || :+1:  || im merging this the changes are algorithmically solid so im not sure what failures you see locally || thanks @akarnokd the failure was no error notifications emitted at random sizes but i did notice travis didnt complain ping me if it surfaces ||
1,0,0,0,0,1,1,0,expose scheduler factories which accept thread factories this allows hooks to create schedulers whose threads have different prioritiescloses #3724 👍  || thanks!on fri apr 29 2016 at 2:13 pm david karnok notifications@githubcomwrote:> merged #3879 https://githubcom/reactivex/rxjava/pull/3879> > —> you are receiving this because you authored the thread> reply to this email directly or view it on github> https://githubcom/reactivex/rxjava/pull/3879#event-646033852 ||
1,0,0,0,0,1,1,1,add completableandthen(completable) deprecate endwith() see #3947 please update unit tests that use these deprecated methods || done || :+1: || 👍 but id either duplicate tests or make universal test functions and test both `endwith` and `andthen` to make sure that we dont break old behavior of public api  || the question is also since completable is still `@experimental` we could if this is wanted go the hard way and remove the deprecated methods and make everyone force to use the standard (new) methods since there are already quite a few deprecated / duplicated methods || 👍 > but id either duplicate tests or make universal test functions and test both endwith and andthen to make sure that we dont break old behavior of public api@artem-zinnatullin im not against it but this is really minor as `andthen` just calls `endwith` im going to merge this feel free to add tests in a separate pr if you wish ||
1,0,0,0,0,0,1,0,1x: add multi-other withlatestfrom operators add `withlatestfrom` operator version that can take 2 to n other sources and combine them with the main sourcerelated: #3779 👍  ||
1,0,0,0,0,1,1,0,1x: use the correct throwable to set the cause for compositeexception the cause of #3679 is we use a wrong throwable (its cause has been set) to set the cause and `initcause` will throw an exception hence the cause chain is not created correctly in this pr it searches the root cause (which doesnt have a cause) and use it to call `initcause` :+1: || 👍  ||
1,0,0,0,0,0,1,0,"add schedulersreset() for better testing resolves #3985this adds a `reset()` method to `schedulers` with the main benefit being improved testing support this does slightly tweak the internal api of `schedulers` to use a `getinstance()` approach to allow lazy init this way we dont have to replace the singleton instance during `reset()` and allow it to lazily re-evaluate upon next usage otherwise if you change your scheduler hook youd always have to make sure you set it before you call `schedulersreset()`will run perf tests overnight in case im not sure how much of a tradeoff moving to an internal `getinstance()` approach costs if anythingcc @zsxwing i think the failing test might be flaky it doesnt fail for me locally  || :+1: || thanks! i dont suppose this could be squeezed into the `requires review` of #3970 could it? || that test doesnt fail for me locally im not really sure what do do about it any ideas? || ive extended the timeout in some tests in pr #3987 once it appears it was enough ill merge that and this pr should work || cool ill rebase after thats merged then 👍  || non need to rebase but to rerun the travis job did it for you || ah i pushed the rebase as you commented oh well ¯\_(ツ)_/¯ || cool looks like the timeout tweaks worked || code is ok so 👍 but> resetting the schedulers is dangerous>    during application runtime and also bad code could invoke it in>    the middle of an application life-cycle and really break applications>    if not used cautiouslywhy were adding more and more apis to break things and allow people use bad practices? || its two and theyre largely targeted at testing i dont think having a reset is bad practice and like most code only breaks things if you make poor decisions with it i could just as easily add a bad scheduling hook or buggy global error handlerhaving to otherwise use di to inject schedulers everywhere gets tedious fast and inadvertantly discourages people from actually using the conventional static apis with this it can be wrapped up in a nice test rule and enforces a clean state before and after tests using the plugins api also allows you to control the schedulers used across modules and 3rd party libraries as wellfor me its a missing and much needed api i dont think requiring di everywhere you use a scheduler just to test is a scalable approach considering how ubiquitous they are could you imagine injecting say `timber` everywhere you wanted to use it?thats my speel for why i think this is useful || i wonder why people with such testing needs dont roll their own global ""myschedulers"" class which lets them easily switch scheduler types and use that like `observeon(myschedulersforcomputation())` of course this means you have to remember to use the `scheduler`-overloaded operators everywhere || i also just copied that doc from the other reset i dont know that its as dangerous though it just forces a re-init if its dangerous its because resetting rx plugins is dangerous since theyre not explicitly bound i wouldnt mind making the doc warning a little less severe? :p || 3rd party libraries dont use your apps global class :/ plus that case still requires you to hook in a delegate scheduler in tests early enough were adding a global scheduler of sorts for background work and still planning to have a reset on the schedulers || libraries should expose the option to customize the `scheduler` they run on do you know a library that doesnt allow such customization? || most actually they just use the built-in schedulerswhatever() or androidschedulersmainthread() i dont see how a wrapper with static methods solves this either you still need some mechanism of resetting the underlying scheduleris there any harm in allowing reset here to facilitate just having developers go through the standard api? || but heres a quick example off the top of my head: https://githubcom/mcharmas/android-reactivelocation || otherwise i think the whole plugin system in rxjava 1x is getting cumbersome in 2x i did a much simpler and direct approach for overriding stufffor example this is how the schedulers get initialized:https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/schedulers/schedulersjava#l47this is where they are returned:https://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/schedulers/schedulersjava#l57changing what scheduler is returned from schedulers is easy viahttps://githubcom/reactivex/rxjava/blob/2x/src/main/java/io/reactivex/plugins/rxjavapluginsjava#l305by adding a function that can wrap or completely replace the scheduleri dont know if netflix wants 12 at all but if so id be glad to rewrite the plugin system || > but heres a quick example off the top of my head: https://githubcom/mcharmas/android-reactivelocationbut where does it use rxjava schedulers forcefully? || found one: [reversegeocodeobservablejava](https://githubcom/mcharmas/android-reactivelocation/blob/a82d0ebfc0ccd1acf9667ef82bd2beb2630d41da/android-reactive-location/src/main/java/pl/charmas/android/reactivelocation/observables/geocode/reversegeocodeobservablejava)they should have provided a way to customize that scheduler anyway || 100% agreed with david that should be the direction rxjava should go to:teach users how to do either di for schedulers or own myschedulers classwith resetting api and teach library developers to accept schedulers fromuserotherwise well stuck in a loop like this where were adding one api thataffects different parts of the library and then we need to add another apito ""fix"" problems of previous oneon fri 3 jun 2016 15:35 david karnok notifications@githubcom wrote:> libraries should expose the option to customize the scheduler they run> on do you know a library that doesnt allow such customization?> > —> you are receiving this because you commented> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/3986#issuecomment-223567232> or mute the thread> https://githubcom/notifications/unsubscribe/aa7b3iwb3bpqqz2qwzwylstczg7flv4nks5qib-igajpzm4itocb>  || not disagreeing that it would be preferable for libraries to expose a way but in practice ive seen that most do notthe 2x plugin approach looks nice though the lockdown bit seems like it imposed the same restrictions that 1x plugins have i dont know what the 12 plans are but between having something like this now and waiting for a 12 or 2x release id much rather have a necessary evil now with an eye toward the future i dont really subscribe to the slippery slope worry considering this is part of what the last one was supposed to help improveits not a matter of people not understanding di its that di is not a scalable solution for this its unnecessary tedium and boilerplate why even have the static api at all if its not going to be used? are you going to add di to rx util libraries?between getting all library developers to update waiting for 2x rewriting the plugin system or doing this in a safe way now and banking on 2x long term id rather have the last option it works for all cases now and has fairly minimal impact/safety concerns || well let me know what you guys want to do i feel like this is breaking down over the current plugins api which we all agree is not perfect the way i see it any ""`myplugins`"" approach would still face the same issue in that youd need to implement some way of internally delegating to me this is a reasonable short-term solution for right now considering 12 and 2x are far off and i think the framework should facilitate use of whatever patterns developers prefer rather than impose them would you be agreeable to doing this for now with the long term goal being to revamp the plugins api in the future?ive updated the doc as well since its actually not that dangerous and only causes behavioral changes if the plugin hook has changed (which _is_ already documented as such) || also @zsxwing seemed in favor of this change in the issue do you want to maybe chime in here? || while i do agree with artem/david that a better long term solution here would be to pass in scheduler objects where needed (setting things up for di where developers choose it - the scalability of di isnt the question here) rather than relying on static methods to get them this pr seems like the best way forward for how things currently work in rx there has been lots of discussion elsewhere about how replacing a scheduler for testing is very painful if you make use of the standard schedulers static methods to get your scheduler instances and the reset methods for the plugin hook only work halfway because of the current static caching behavior because the current reset-for-testing functionality is fundamentally broken i strongly recommend accepting this pr to fix it and take this discussion into account for the design of upcoming versions of plugins or developer usage recommendations || > because the current reset-for-testing functionality is fundamentally broken i strongly recommend accepting this pr to fix itagreed this pr is pretty useful for unit tests 👍 for merging this one || may sound crazy but what about marking `reset()` as `@deprecated` with explanation of better ways? || i think `@experimental` with a doc explaining that the api will be revamped in the future would make more sense i dont have strong feelings for or against `@deprecated` though and can switch to that if others want anything to help move this pr along :) || `@deprecated` will produce compile warning and will be visible in ide pretty sure most of the people who will use `schedulersreset()` will copy-paste from so or some blog post which will arrive as soon as we merge/release this and wont even know that its `@experimental`// im not blocking pr if that matters || fair point @akarnokd any thoughts? it seems like this has the requisite 👍s to move forward can add deprecated if you think its worthwhile || do we really expect people to accidentally use this and be surprised?deprecating the method sounds like it punishes those who want to use itid deprecate create() and others long before this methodon mon jun 6 2016 5:19 pm zac sweers notifications@githubcom wrote:> fair point @akarnokd https://githubcom/akarnokd any thoughts? it> seems like this has the requisite 👍s to move forward can add> deprecated if you think its worthwhile> > —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/3986#issuecomment-224091875> or mute the thread> https://githubcom/notifications/unsubscribe/aaeeeahh6igqbi7kuzyagrnavxgcekqwks5qji7wgajpzm4itocb>  || when you put it that way i think i agree || dont deprecate it || > do we really expect people to accidentally use this and be surprised?have seen/helped people asking how to solve problems after applying scheduler hooks for testing they didnt realize (mostly) how it can break things`create()` is local evil it doesnt break global state alternative solution would be to move apis like `create()` `reset()` and so on to `rxunsafe` like java rust and so on its there but use it at your own risk || "
1,0,0,0,0,0,1,0,1x: expand and explain cache() in more detail this pr rephrases the `cache` documentation a bit and adds workaround for stopping and forgetting the cached valuesrelated: #3007 👍 this obviously isnt related to that but `testreplaysubjectconcurrentsubscriptions` failed in ci || thanks will look into it before merging this could be a bug due a pattern they share || nothing obvious so far the test passes for me locally when run 1000 times will investigate it further through #4028 ||
1,0,0,1,0,1,1,1,2x: fix flaky tests this pr should fix some test timing out otherwise sensitive to thread hiccups#4138#4109#4054 :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) is **6920%**> merging [#4139](https://codecovio/gh/reactivex/rxjava/pull/4139?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **001%**``` diff@@                2x      #4139   diff @@  files           386        386            lines         27277      27277            methods           0          0            messages          0          0            branches       4410       4410          - hits          18879      18876     -3     misses         6508       6508          - partials       1890       1893     +3   ```> powered by [codecov](https://codecovio?srcpr) last updated by [13df09beb8242a](https://codecovio/gh/reactivex/rxjava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3eb8242a44298bfafb62118b075f91f390431f6f9) ||
1,0,0,0,0,1,1,1,1x: change completablesubscribe(onerror oncomplete) to (oncomplete onerror) closes #3851 closes #4137 actually i can deprecate old one and add new one as overload it will have less impact on user code because only calls like `subscribe(actionsempty() actionsempty())` will be ambiguous to the compilerthoughts? || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) is **8133%**> merging [#4140](https://codecovio/gh/reactivex/rxjava/pull/4140?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **004%**``` diff@@                1x      #4140   diff @@  files           257        257            lines         16811      16811            methods           0          0            messages          0          0            branches       2547       2547          + hits          13666      13673     +7   + misses         2243       2238     -5   + partials        902        900     -2   ```> powered by [codecov](https://codecovio?srcpr) last updated by [5c7475755723da](https://codecovio/gh/reactivex/rxjava/compare/5c747577e910b5eda657bc9f825914965fb2f1c455723da4b83365611d103a5e0971a198fcafbea1) || :+1: || dynamic languages have trouble with the two methods lets only have 1 method || 👍  ||
1,0,1,1,0,1,1,1,2x: rename single base interface types for consistency addresses #4044 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4297?srcpr) is 6941% (diff: 4659%)> merging [#4297](https://codecovio/gh/reactivex/rxjava/pull/4297?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **007%**``` diff@@                2x      #4297   diff @@  files           420        420            lines         30765      30764     -1     methods           0          0            messages          0          0            branches       4937       4937          - hits          21379      21354    -25   - misses         7309       7319    +10   - partials       2077       2091    +14   ```> powered by [codecov](https://codecovio?srcpr) last update [7beda2afa2eef3](https://codecovio/gh/reactivex/rxjava/compare/7beda2a8fac656e468add42f7524a65dbed3c4dbfa2eef39749abd2f718184868ce7082ecfcc9282?srcpr) || lgtm :+1: || :+1: || @jakewharton if you want me to and you havent started yet id continue on that list and rename the other classes / interfaces as well || sure go for it!on sun aug 7 2016 at 1:55 pm niklas baudy notifications@githubcomwrote:> @jakewharton https://githubcom/jakewharton if you want me too and you> havent started yet id continue on that list and rename the other classes> / interfaces as well> > —> you are receiving this because you were mentioned> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4297#issuecomment-238097409> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeeddwatz2v56rvc8goyxdwibfti0cks5qdhwlgajpzm4jeeqo>  ||
1,0,0,1,1,1,1,1,2x: rename observable base interface types for consistency addresses #4044 there are a large amount of compilation errors || rebased against 2x and re-did the last changes || looks good this time :+1: || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4300?srcpr) is 6942% (diff: 9800%)> merging [#4300](https://codecovio/gh/reactivex/rxjava/pull/4300?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **<01%**``` diff@@                2x      #4300   diff @@  files           420        420            lines         30762      30761     -1     methods           0          0            messages          0          0            branches       4937       4937          - hits          21358      21357     -1   - misses         7319       7322     +3   + partials       2085       2082     -3   ```> powered by [codecov](https://codecovio?srcpr) last update [e81d39959f3a25](https://codecovio/gh/reactivex/rxjava/compare/e81d399fe3cebd47cc4c4f8e8a3fa671eeac454f59f3a259b1d7340db085c1fd11ad6a7a39285f2c?srcpr) || :+1: ||
1,0,1,1,1,1,1,1,"2x: rename create to unsafecreate add ""safe"" create methods this is a proposal to solve #4255 but for 2x and closes #4286 built around one goal: make the `create` methods actually usable by developers!currently the advice given to most developers using 1x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation and even then avoid it if possible this method is a trap that most new developers fall into _the method is named ""create"" after all so it must be how i create these things!_ i want to make that statement not only correct but advisable (at least when the still-convenient ""from"" methods are not suitable such as when wrapping callback-based apis)because `observable` `single` and `completable` are backpressure-free this amounts to just suppressing downstream notifications when disposed this doesnt seem too controversialthe most controversial part is that i have renamed `flowablefromasync` to `flowablecreate` thus making it the canonical way for users to create `flowable`s directly im much less opinionated on this change but it felt wrong to have an `flowableunsafecreate` with no associated `create` and `fromasync` is the ""safest"" version we have ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4317?srcpr) is 6931% (diff: 3238%)> merging [#4317](https://codecovio/gh/reactivex/rxjava/pull/4317?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **018%**``` diff@@                2x      #4317   diff @@  files           428        431     +3     lines         30784      30866    +82     methods           0          0            messages          0          0            branches       4929       4940    +11     hits          21395      21395          - misses         7315       7394    +79   - partials       2074       2077     +3   ```> powered by [codecov](https://codecovio?srcpr) last update [f8694361c051b8](https://codecovio/gh/reactivex/rxjava/compare/f8694361a7bbd9f40194024ee8d611d598c913b11c051b8c330e8368a6240ff3985237cc1960ad37?srcpr) || i think its also important to point out i replaced `consumer<asynemitter<t>>` with `flowablesource<t>` for parity with other ""safe"" `create` method parameter types the unsafe variant still takes a raw `publisher<t>` however || :heart::heart::heart: || :+1: || "
1,0,0,1,0,1,1,1,"2x: remove try+optional introduce notification this pr removes the `try` and `optional` classes and (re)introduces `notification<t>`there are several ways to implement it this pr uses the abstract class + private subclasses approach that saves on instance sizerelated discussion: #4365 > this pr uses the abstract class + private subclasses approach that saves on instance sizethis seems like it would prevent a lot of inlining of the simple ""is""ers and ""get""ers because the callsites become polymorphic instead of monomorphicwhen i check the object layout having two fields in a root object doesnt increase the size because of object padding```$ cat notificationjavafinal class notification<t> {  private static final object completed  new object()  private final t value  private final throwable error  notification(t value throwable error) {    thisvalue  value    thiserror  error  }}$ javac notificationjava$ java -cp :/users/jw/downloads/jol-cli-05-fulljar orgopenjdkjolmain internals notificationobjc[95020]: class javalaunchhelper is implemented in both /library/java/javavirtualmachines/jdk180_92jdk/contents/home/bin/java and /library/java/javavirtualmachines/jdk180_92jdk/contents/home/jre/lib/libinstrumentdylib one of the two will be used which one is undefined# warning: unable to attach serviceability agent you can try again with escalated privileges two options: a) use -djoltrywithsudotrue to try with sudo b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope# running 64-bit hotspot vm# using compressed oop with 3-bit shift# using compressed klass with 3-bit shift# warning | compressed references base/shifts are guessed by the experiment!# warning | therefore computed addresses are just guesses and are not reliable# warning | make sure to attach serviceability agent to get the reliable addresses# objects are 8 bytes aligned# field sizes by type: 4 1 1 2 2 4 4 8 8 [bytes]# array element sizes: 4 1 1 2 2 4 4 8 8 [bytes]vm fails to invoke the default constructor falling back to class-only introspectionnotification object internals: offset  size      type description                    value      0    12           (object header)                n/a     12     4    object notificationvalue             n/a     16     4 throwable notificationerror             n/a     20     4           (loss due to the next object alignment)instance size: 24 bytesspace losses: 0 bytes internal + 4 bytes external  4 bytes total``` || oops i wrote my comparison wrong (and left it out of the comment)youre right the individual classes are only 16 bytes (12 header + 4 field) that said 24 vs 16 isnt that big of a deal to gain guaranteed monomorphism || there are other ways of doing it ie single object field + private wrapper for throwables: 16 bytes per onnext and 32 bytes per onerror || true ill leave it up to you though:+1: || or getting at least bimorphic by having value  null represent oncomplete || updated now we have the smaller size but an instanceof check for every isonnext() and getvalue calls || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4370?srcpr) is 6860% (diff: 7744%)> merging [#4370](https://codecovio/gh/reactivex/rxjava/pull/4370?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **010%**``` diff@@                2x      #4370   diff @@  files           446        443     -3     lines         32154      32081    -73     methods           0          0            messages          0          0            branches       5092       5073    -19   - hits          22026      22010    -16   + misses         8011       7975    -36   + partials       2117       2096    -21   ```> powered by [codecov](https://codecovio?srcpr) last update [ec4eb4fcc0a786](https://codecovio/gh/reactivex/rxjava/compare/ec4eb4f3bcd0a0c2d4e17571c8f4320ee864fd5ccc0a78632b8e5e1b0141441e75e12d7b906a93b5?srcpr) || looks good! || "
1,0,0,0,0,1,1,0,2x: add subscribewith to get back the subscriber/observer fluently this pr adds the `subscribewith` methods to the base reactive types to mainly help with the 1x to 2x changeover as 2x `subscribe(subscriber)` return void instead of the resource/cancellation/unsubscription type `disposable` see the javadocs and the unit test for example userelated: #4400 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4422?srcpr) is 6956% (diff: 100%)> merging [#4422](https://codecovio/gh/reactivex/rxjava/pull/4422?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **004%**``` diff@@                2x      #4422   diff @@  files           454        454            lines         32323      32331     +8     methods           0          0            messages          0          0            branches       5214       5214          + hits          22470      22491    +21   + misses         7651       7640    -11   + partials       2202       2200     -2   ```> powered by [codecov](https://codecovio?srcpr) last update [7aa0b342f68644](https://codecovio/gh/reactivex/rxjava/compare/7aa0b347cea8aa0e395a7f9ec488d7006647a3292f686449a6173a80713fe418e95819237fd5b90b?srcpr) || :+1: ||
1,0,0,1,0,1,1,1,1x: cleanup javadoc completablefromemitter - add javadoc to `asyncemitterbackpressuremode` (#4199)- deprecate `observablefromasync` add `observablefromemitter` instead (#4255)- add `completablefromemitter()` (#4356)- add missing placeholder `@since` tags- fix some generics error `rxjavahooks`- add race helper to `testutil`- fix javadoc warnings ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) is 8419% (diff: 9750%)> merging [#4442](https://codecovio/gh/reactivex/rxjava/pull/4442?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **005%**``` diff@@                1x      #4442   diff @@  files           270        271     +1     lines         17563      17599    +36     methods           0          0            messages          0          0            branches       2680       2683     +3   + hits          14797      14817    +20   - misses         1909       1919    +10   - partials        857        863     +6   ```> powered by [codecov](https://codecovio?srcpr) last update [db3ff46fdba5ed](https://codecovio/gh/reactivex/rxjava/compare/db3ff46c7ad37cca4224f07d517f108357201220fdba5ed6e1fd8bcd3912394ae14fb9f6664a4c1c?srcpr) || :+1: ||
1,0,0,0,0,1,1,1,1x: completable add dooneach first part of #4457 is it okay that i reused notification like that?also are there any java 6 generics missing? it would be nice if this project was set up to target java sdk 6 as my default seems to be java 8 and i dont get any errors shown in the ide okay but you have [generics problem](https://travis-ciorg/reactivex/rxjava/builds/156916384#l166) || alright its fixed now || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4460?srcpr) is 8423% (diff: 100%)> merging [#4460](https://codecovio/gh/reactivex/rxjava/pull/4460?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will increase coverage by **<01%**``` diff@@                1x      #4460   diff @@  files           271        271            lines         17602      17610     +8     methods           0          0            messages          0          0            branches       2683       2684     +1   + hits          14826      14833     +7   - misses         1918       1921     +3   + partials        858        856     -2   ```> powered by [codecov](https://codecovio?srcpr) last update [30da1aaeacbf59](https://codecovio/gh/reactivex/rxjava/compare/30da1aa1e38a5ead8965d1784ab8c6df8111d354eacbf59a11f6758239012c4edd0baa07a502b7fc?srcpr) || :+1: ||
1,0,0,1,0,1,1,0,"2x: evaluate schedule initialization via callable this implements the solution proposed in #4572 - to initialize the schedulers via a callable rather than directly via a value ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4585?srcpr) is 7817% (diff: 8888%)> merging [#4585](https://codecovio/gh/reactivex/rxjava/pull/4585?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **008%**``` diff@@                2x      #4585   diff @@  files           552        552            lines         36184      36297   +113     methods           0          0            messages          0          0            branches       5584       5602    +18   + hits          28255      28375   +120   + misses         5917       5912     -5   + partials       2012       2010     -2   ```> powered by [codecov](https://codecovio?srcpr) last update [24448b4a273507](https://codecovio/gh/reactivex/rxjava/compare/24448b47ed27b6ab951cf1ef573da900f8a46853a273507bc8d66c671b878b496f491f5e29f4c8b1?srcpr) || @akarnokd correct me if im wrong but in order to avoid the evaluation of the default scheduler instance when it is being overridden i still need to change the `oninit[single|io|new|computation]handler` signatures to be `function<callable<scheduler> scheduler>` as per -```    static volatile function<callable<scheduler> scheduler> oninitsinglehandler```otherwise the invocation of `initsinglescheduler` will cause the evaluation of the default value to pass it as a parameter to the overriding/transforming function: `oninitsinglehandler` || yes you still need `callable` as the indirection but the inner class will be evaluated only if `call` is actually invoked || ive added the remaining lazy initializationive also fairly aggressively enforced non-null in the associated functions for example:``` javapublic static scheduler initioscheduler(callable<scheduler> defaultscheduler) {    objecthelperrequirenonnull(defaultscheduler ""scheduler callable cant be null"")    callable<scheduler> scheduler> f  oninitiohandler    if (f  null) {        return callrequirenonnull(defaultscheduler)    }    return applyrequirenonnull(f defaultscheduler)}```however to me this seems slightly out of place / over the top is that enforcement necessary or should the resultant null scheduler be left unasserted and left to the eventual nullpointerexception when the scheduler is used? either way im happy to keep or remove that based upon review feedback || aggressive input validation is never over the top if you defer checkingthen the stacktrace tells you nothing about what actually caused the brokenstateon sun sep 25 2016 7:09 am peter tackage notifications@githubcomwrote:> ive added the remaining lazy initialization> > ive also fairly aggressively enforced non-null in the associated> functions for example:> > public static scheduler initioscheduler(callable<scheduler> defaultscheduler) {>     objecthelperrequirenonnull(defaultscheduler ""scheduler callable cant be null"")>     callable<scheduler> scheduler> f  oninitiohandler>     if (f  null) {>         return callrequirenonnull(defaultscheduler)>     }>     return applyrequirenonnull(f defaultscheduler)> }> > however to me this seems slightly out of place / over the top is that> enforcement necessary or should the resultant null scheduler be left> unasserted and left to the eventual nullpointerexception when the scheduler> is used? either way im happy to keep or remove that based upon review> feedback> > —> you are receiving this because you commented> > reply to this email directly view it on github> https://githubcom/reactivex/rxjava/pull/4585#issuecomment-249415736> or mute the thread> https://githubcom/notifications/unsubscribe-auth/aaeeeyulqrvk4zp6d5xx5vsnijqiam4xks5qtlzbgajpzm4kebru>  || @akarnokd all done as far as i am concerned do i need to anything else for this to be merged?  || i was waiting for you to settle with the implementation thanks for the contribution || "
1,0,0,1,0,1,1,0,2x signal npe observableamb flowableamb this pr addresses #4640 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4645?srcpr) is 7782% (diff: 6538%)> merging [#4645](https://codecovio/gh/reactivex/rxjava/pull/4645?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **<01%**``` diff@@                2x      #4645   diff @@  files           562        562            lines         36708      36724    +16     methods           0          0            messages          0          0            branches       5634       5636     +2   + hits          28564      28579    +15   - misses         6101       6103     +2   + partials       2043       2042     -1   ```> powered by [codecov](https://codecovio?srcpr) last update [d08266b27c29f8](https://codecovio/gh/reactivex/rxjava/compare/d08266bb95e8cddbb9ba5cf39afbe08e16525d1a27c29f8ff3917b5310cd3d52c1464a77951a3722?srcpr) ||
1,0,0,1,0,1,1,0,switch maybe and single to use their transformers in compose() resolves #4650 whoops forgot to update the tests will update in a sec || intellij user i presume? || indeed does (i presume 😉) eclipse do something to protect against this? || eclipse has an error view which doesnt obscure the project structure plus when one shows the breadcrumbs they get error icons indicating theres still something wrong (also the project tree gets error icons) so it is much harder to miss these kinds of errors  || ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4651?srcpr) is 7787% (diff: 100%)> merging [#4651](https://codecovio/gh/reactivex/rxjava/pull/4651?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**``` diff@@                2x      #4651   diff @@  files           559        559            lines         36654      36654            methods           0          0            messages          0          0            branches       5625       5625          - hits          28560      28543    -17   - misses         6065       6078    +13   - partials       2029       2033     +4   ```> powered by [codecov](https://codecovio?srcpr) last update [9047a3cfccdfca](https://codecovio/gh/reactivex/rxjava/compare/9047a3ca85f7cc5d2816c168e0de9a714a8eb55ffccdfcaad62cd5c2cb49a6c651995c5bd85524d3?srcpr) || interesting ill have to check that out! ||
1,0,0,0,0,1,1,1,2x: add observablerangelong & flowablerangelong will fix #4683- adds observablerangelong()- adds flowablerangelong()both implementations are copied same for the unit testswhat should we do about the range overflow check? we could use bigdecimal to check that ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4687?srcpr) is 8189% (diff: 5408%)> merging [#4687](https://codecovio/gh/reactivex/rxjava/pull/4687?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **024%**``` diff@@                2x      #4687   diff @@  files           565        567     +2     lines         37440      37599   +159     methods           0          0            messages          0          0            branches       5746       5786    +40   + hits          30753      30791    +38   - misses         4612       4715   +103   - partials       2075       2093    +18   ```> powered by [codecov](https://codecovio?srcpr) last update [497f35f8dc710d](https://codecovio/gh/reactivex/rxjava/compare/497f35f64c89b85bbd17a5f4d50a4eb56e5454248dc710d2f001610414669de36ce1f3ac96d5647c?srcpr) ||
1,0,0,1,0,1,1,1,2x: distinctuntilchanged to store the selected key instead of the value fix `distinctuntilchanged` to store the selected key instead of the input valuereported in #4743 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4747?srcpr) is 9379% (diff: 9558%)> no coverage report found for **2x** at 98d0b7f> > powered by [codecov](https://codecovio?srcpr) last update [98d0b7f0a7db2a](https://codecovio/gh/reactivex/rxjava/compare/98d0b7f2ec63544890d029282dc2ff3f611b987a0a7db2abb0b67a2d37068e59ac4552b4cdc981da?srcpr) ||
1,1,0,1,1,1,1,1,2x: fix flowableconcatmapeager hang due to bad request management `flowableconcatmapeager`s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the looprelated: #4620in addition `testhelperasserterror` has been changed to attach the whole unexpected exception to the `assertionerror` ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4751?srcpr) is 9374% (diff: 7391%)> merging [#4751](https://codecovio/gh/reactivex/rxjava/pull/4751?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **004%**``` diff@@                2x      #4751   diff @@  files           570        570            lines         37067      37073     +6     methods           0          0            messages          0          0            branches       5648       5651     +3   - hits          34764      34754    -10   - misses         1171       1183    +12   - partials       1132       1136     +4   ```> powered by [codecov](https://codecovio?srcpr) last update [777b4c136a7c6f](https://codecovio/gh/reactivex/rxjava/compare/777b4c1a9fec37ed15e56b4da5348f29cd5fcdf936a7c6f6b37e2f7c13958278cc659404f3d46c18?srcpr) ||
1,0,0,0,0,1,1,0,2x: rename backpressurestrategynone to missing as discussed in #4643 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4767?srcpr) is 9570% (diff: 100%)> merging [#4767](https://codecovio/gh/reactivex/rxjava/pull/4767?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **<01%**``` diff@@                2x      #4767   diff @@  files           570        570            lines         36711      36711            methods           0          0            messages          0          0            branches       5555       5555          - hits          35138      35136     -2     misses          648        648          - partials        925        927     +2   ```> powered by [codecov](https://codecovio?srcpr) last update [83ba4b950575e2](https://codecovio/gh/reactivex/rxjava/compare/83ba4b9bc885f7ae6e82ef7f2c86826e05203e8550575e2207517ca2ab7453ae120c78f69b0cf925?srcpr) || yay! ||
1,0,0,0,0,0,1,0,changing inner classes to package-private to fix issue in #4826 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4828?srcpr) is 8410% (diff: 100%)> merging [#4828](https://codecovio/gh/reactivex/rxjava/pull/4828?srcpr) into [1x](https://codecovio/gh/reactivex/rxjava/branch/1x?srcpr) will decrease coverage by **001%**``` diff@@                1x      #4828   diff @@  files           287        287            lines         17835      17835            methods           0          0            messages          0          0            branches       2702       2702          - hits          15004      15001     -3   - misses         1965       1966     +1   - partials        866        868     +2   ```> powered by [codecov](https://codecovio?srcpr) last update [1f6c68cabd63c9](https://codecovio/gh/reactivex/rxjava/compare/1f6c68c469359ec08842d3b540387682357325f1abd63c93d50d05e5ede0f02265b04cccec323f09?srcpr) ||
1,0,0,0,0,1,1,0,2x: add maybeflatmapsingleelement returning maybe this pr adds the `maybeflatmapsingleelement()` operator that returns a `maybe` and completes if the source completes unlike `flatmapsingle` where the returned `single` signals `nosuchelementexception`related #4857 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4858?srcpr) is 9578% (diff: 100%)> merging [#4858](https://codecovio/gh/reactivex/rxjava/pull/4858?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **006%**``` diff@@                2x      #4858   diff @@  files           580        581     +1     lines         37174      37214    +40     methods           0          0            messages          0          0            branches       5600       5601     +1   + hits          35632      35646    +14   - misses          639        649    +10   - partials        903        919    +16   ```> powered by [codecov](https://codecovio?srcpr) last update [557aca3a94a307](https://codecovio/gh/reactivex/rxjava/compare/557aca3bed17d85df5bdee384d4d4adba03ea64ca94a307ab11339b09cb2e69a00a874dea532635f?srcpr) ||
1,0,0,0,0,1,1,1,2x: fix timer() ise due to bad resource mgmt both `observabletimer()` and `flowabletimer()` could report `illegalstateexception` because if the delayed task completed before the tasks `disposable` was set the `setonce` found a non-null non-terminal reference already setrelated: #4926 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4927?srcpr) is 9555% (diff: 100%)> merging [#4927](https://codecovio/gh/reactivex/rxjava/pull/4927?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **013%**```diff@@                2x      #4927   diff @@  files           586        586            lines         37446      37452     +6     methods           0          0            messages          0          0            branches       5625       5627     +2   - hits          35829      35786    -43   - misses          674        712    +38   - partials        943        954    +11   ```> powered by [codecov](https://codecovio?srcpr) last update [7d4793268a0d8a](https://codecovio/gh/reactivex/rxjava/compare/7d479322d8f5649a8a21f8ba13b4ff6b6657168a68a0d8ae7219cf7080a45e97de04b3b5e597117e?srcpr) ||
1,0,0,1,0,1,1,0,2x: fix observableconcatmapeager bad logic for immediate scalars the operator `observableconcatmapeager` had a bad optimization targeting scalar and callable sources and emitted their values immediately even if it wasnt that particular sources turn for itthe `flowable` is not affected added unit tests for bothreported in #4981 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4982?srcpr) is 9565% (diff: 100%)> merging [#4982](https://codecovio/gh/reactivex/rxjava/pull/4982?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will increase coverage by **010%**```diff@@                2x      #4982   diff @@  files           592        592            lines         37977      37968     -9     methods           0          0            messages          0          0            branches       5754       5752     -2   + hits          36287      36320    +33   + misses          720        700    -20   + partials        970        948    -22   ```> powered by [codecov](https://codecovio?srcpr) last update [0a254a864cf7cb](https://codecovio/gh/reactivex/rxjava/compare/0a254a83e5bf2e3d8b2540b34718ed0c9d71b4ce64cf7cb6bf2e8ff15e71a3f7e4a818dd290a00ed?srcpr) ||
1,0,0,1,0,1,1,1,"2x: make obscombinelatest consistent with flowable + doc cornercase this pr fixes `observablecombinelatest` to be consistent with `flowablecombinelatest` by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source (that completes or errors) in addition such early termination didnt properly cancel the other sources when `delayerrors  true`ive also extended the documentation on the overloads to warn about empty sources that will terminate the operator even with `combinelatestdelayerror` and thus subscription side-effects may not happenthere is a related issue #4414 where the operator should fully consume each input source no matter what and terminate when all terminate im still considering what would be the best way to introduce thisreported in #4986 ## [current coverage](https://codecovio/gh/reactivex/rxjava/pull/4987?srcpr) is 9562% (diff: 100%)> merging [#4987](https://codecovio/gh/reactivex/rxjava/pull/4987?srcpr) into [2x](https://codecovio/gh/reactivex/rxjava/branch/2x?srcpr) will decrease coverage by **<01%**```diff@@                2x      #4987   diff @@  files           592        592            lines         37968      37968            methods           0          0            messages          0          0            branches       5752       5752          - hits          36307      36306     -1     misses          701        701          - partials        960        961     +1   ```> powered by [codecov](https://codecovio?srcpr) last update [57178274ea2a05](https://codecovio/gh/reactivex/rxjava/compare/57178273acc7a4673d7f0247f295e5288657291a4ea2a0597d0dec7426a5b86aa0679067d423cd24?srcpr) || yaon jan 12 2017 9:25 pm ""david karnok"" <notifications@githubcom> wrote:> merged #4987 <https://githubcom/reactivex/rxjava/pull/4987>>> —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> <https://githubcom/reactivex/rxjava/pull/4987#event-921159486> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/aghr1dw7yfbfy8ya_t8bhxvx8rqivj_aks5rrnafgajpzm4liarg>> > || "
1,0,0,1,0,1,1,0,use bounded wildcards for errorhandler (fixes #5045) adding bound wildcards for error handler - fixes #5045 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&elh1) report> merging [#5049](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/00f53ae291b3dd3a0f479045bbcd5b59c187ead9?srcpr&eldesc) will **increase** coverage by `012%````diff@@             coverage diff              @@##                2x    #5049      +/-   ##+ coverage     9553%   9565%   +012%     - complexity     5540     5547       +7       files           612      612                lines         39576    39576                branches       5553     5553              + hits          37807    37855      +48     + misses          775      742      -33     + partials        994      979      -15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/plugins/rxjavapluginsjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcgx1z2lucy9seephdmfqbhvnaw5zlmphdme) | `100% <100%> (ø)` | `138 <3> (ø)` | :x: || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% <ø> (-492%)` | `2% <ø> (ø)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9454% <ø> (-364%)` | `2% <ø> (ø)` | || [reactivex/internal/operators/maybe/maybeusingjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvxnpbmcuamf2yq) | `9797% <ø> (-203%)` | `4% <ø> (ø)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% <ø> (-186%)` | `10% <ø> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9724% <ø> (-184%)` | `39% <ø> (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `9444% <ø> (-139%)` | `6% <ø> (ø)` | || [ors/observable/observablesamplewithobservablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvdpdghpynnlcnzhymxllmphdme) | `9759% <ø> (-121%)` | `3% <ø> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <ø> (-12%)` | `2% <ø> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `975% <ø> (-084%)` | `2% <ø> (ø)` | ||  and [28 more](https://codecovio/gh/reactivex/rxjava/pull/5049/changes?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5049?srcpr&elfooter) last update [00f53aed677bfc](https://codecovio/gh/reactivex/rxjava/compare/00f53ae291b3dd3a0f479045bbcd5b59c187ead9d677bfcea5e46cab0c1f67f0b9f8d33d959dbdc5?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || /cc @davidmoten  || yep that looks fine i can do the others || @akarnokd do you want test coverage of the signature changes? || yes make sure the contravariant consumer now compiles || @jschneider can you add unit tests for this please? || i will add a test yes || added the test || looks like this got a conflict due to changes to rxjavaplugins by other prs could you rebase this onto the head? || yep i am on it || should be good now ||
1,0,0,0,0,1,1,1,2x: fix observablezip to dispose eagerly this pr fixes `observablezip` to dispose the sources outside the serialization loop just like `flowablezip` does this allows cancellation even if the serialization loop is busy/blocking inside an `onnext` emissionin addition a unit test was added to `observablezip` as wellreported in #5111 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&elh1) report> merging [#5121](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/9a342fdff91ee1bcc0f3d95441c3039ad8d897f9?srcpr&eldesc) will **decrease** coverage by `-007%`> the diff coverage is `100%````diff@@             coverage diff             @@##                2x   #5121      +/-   ##- coverage     9517%   951%   -007%     + complexity     5566    5564       -2       files           620     620                lines         40014   40020       +6       branches       5632    5633       +1     - hits          38082   38062      -20     - misses          929     941      +12     - partials       1003    1017      +14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/observable/observablezipjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvppcc5qyxzh) | `100% <100%> (ø)` | `6 <ø> (ø)` | :x: || [al/operators/observable/observablesampletimedjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnhbxbszvrpbwvklmphdme) | `90% <ø> (-667%)` | `3% <ø> (ø)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <ø> (-667%)` | `17% <ø> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9019% <ø> (-523%)` | `2% <ø> (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9591% <ø> (-409%)` | `2% <ø> (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% <ø> (-358%)` | `2% <ø> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% <ø> (-218%)` | `2% <ø> (ø)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% <ø> (-218%)` | `46% <ø> (-1%)` | || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9729% <ø> (-217%)` | `2% <ø> (ø)` | || [activex/internal/disposables/disposablehelperjava](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvrglzcg9zywjszuhlbhblci5qyxzh) | `9814% <ø> (-186%)` | `27% <ø> (-1%)` | ||  and [28 more](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5121?srcpr&elfooter) last update [9a342fd87b4773](https://codecovio/gh/reactivex/rxjava/compare/9a342fdff91ee1bcc0f3d95441c3039ad8d897f987b47730f7778d07f1f49c33b648aee0dd08a67b?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,2x: fix timed replay-like components replaying outdated items the timed versions of `flowablereplay()` `replayprocessor` `observablereplay()` and `replaysubject` all replay outdated items to new subscribers and through the `getvalues()` and `size()` state-peeking methods similar to issue #3917 resolved via #4023the fix includes a node-walk for new subscribers that skips old entries some unit tests werent logically considering the emission pattern (ie items timed out shouldnt appear) and have been fixed as wellreported in #5139 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elh1) report> merging [#5140](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a03bf90c19e0eed80c677eb0e3071079220fd392?srcpr&eldesc) will **decrease** coverage by `-001%`> the diff coverage is `100%````diff@@             coverage diff              @@##                2x    #5140      +/-   ##- coverage     9596%   9596%   -001%     + complexity     5611     5601      -10       files           620      620                lines         39820    39850      +30       branches       5599     5603       +4     + hits          38215    38242      +27       misses          633      633              - partials        972      975       +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/java/io/reactivex/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9szxbsyxlqcm9jzxnzb3iuamf2yq) | `9876% <100%> (ø)` | `49 <0> (ø)` | :x: || [ex/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlumvwbgf5lmphdme) | `9009% <100%> (+032%)` | `17 <0> (ø)` | :x: || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9711% <100%> (-022%)` | `51 <0> (ø)` | || [nternal/operators/observable/observablereplayjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvjlcgxhes5qyxzh) | `9696% <100%> (-114%)` | `18 <0> (ø)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <0%> (-667%)` | `17% <0%> (-1%)` | || [ternal/operators/completable/completableusingjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvxnpbmcuamf2yq) | `9523% <0%> (-477%)` | `4% <0%> (ø)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <0%> (-409%)` | `2% <0%> (ø)` | || [io/reactivex/internal/util/backpressurehelperjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9cywnrchjlc3n1cmvizwxwzxiuamf2yq) | `9591% <0%> (-409%)` | `21% <0%> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9444% <0%> (-371%)` | `10% <0%> (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | ||  and [37 more](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5140?srcpr&elfooter) last update [a03bf906377b58](https://codecovio/gh/reactivex/rxjava/compare/a03bf90c19e0eed80c677eb0e3071079220fd3926377b58f99ce270c71c0704c0b601c784d9ef6ed?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,1x: fix timed replay() not terminating when all items timeout the timed `replay()` operator didnt terminate a late subscriber if all the items timed out in the meantimerelated: #5139  
1,0,0,0,0,1,1,1,1x: add unsubscribeon to single type (#5138) resolve #5138 add unsubscribeon to single type # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&elh1) report> merging [#5146](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `100%````diff@@             coverage diff              @@##                1x    #5146      +/-   ##+ coverage     8429%   8437%   +007%     - complexity     2875     2878       +3       files           290      290                lines         18091    18107      +16       branches       2475     2475              + hits          15250    15277      +27     + misses         1973     1960      -13     - partials        868      870       +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/singlejava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9taw5nbguuamf2yq) | `7386% <100%> (+329%)` | `82 <1> (+1)` | :white_check_mark: || [in/java/rx/internal/schedulers/sleepingactionjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1nszwvwaw5nqwn0aw9ulmphdme) | `5555% <0%> (-556%)` | `2% <0%> (-1%)` | || [/java/rx/internal/operators/backpressureutilsjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqmfja3byzxnzdxjlvxrpbhmuamf2yq) | `6818% <0%> (-455%)` | `27% <0%> (-2%)` | || [ain/java/rx/internal/schedulers/schedulerwhenjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlcldozw4uamf2yq) | `8378% <0%> (-406%)` | `4% <0%> (ø)` | || [ava/rx/internal/operators/operatormaterializejava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnyxrlcmlhbgl6zs5qyxzh) | `8524% <0%> (-328%)` | `3% <0%> (ø)` | || [ava/rx/internal/util/backpressuredrainmanagerjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl0jhy2twcmvzc3vyzuryywlutwfuywdlci5qyxzh) | `6666% <0%> (-124%)` | `20% <0%> (-1%)` | || [in/java/rx/internal/operators/operatorpublishjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jqdwjsaxnolmphdme) | `789% <0%> (+042%)` | `8% <0%> (ø)` | :x: || [/rx/internal/schedulers/cachedthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0nhy2hlzfrocmvhzfnjagvkdwxlci5qyxzh) | `8932% <0%> (+097%)` | `6% <0%> (ø)` | :x: || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7792% <0%> (+129%)` | `25% <0%> (+1%)` | :white_check_mark: || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `8214% <0%> (+142%)` | `16% <0%> (+1%)` | :white_check_mark: ||  and [3 more](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5146?srcpr&elfooter) last update [2a0427be698511](https://codecovio/gh/reactivex/rxjava/compare/2a0427b895f523b3ccdd7bc58eeef3a0b2e3c322e698511a87bfa72c58cab6ebaffd1417f7c1d476?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,2x: singlesubscribe() to report isdisposed() true on success/error the `consumersingleobserver` didnt report `isdisposed` consistently with its statereported in #5160 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&elh1) report> merging [#5163](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/23b46f5b83eabebff15fbfbb4b471cde93706b81?srcpr&eldesc) will **decrease** coverage by `-002%`> the diff coverage is `100%````diff@@             coverage diff              @@##                2x    #5163      +/-   ##- coverage     9597%   9595%   -002%     + complexity     5655     5653       -2       files           621      621                lines         39960    39962       +2       branches       5610     5610              - hits          38351    38345       -6     - misses          628      648      +20     + partials        981      969      -12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [vex/internal/observers/consumersingleobserverjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0nvbnn1bwvyu2luz2xlt2jzzxj2zxiuamf2yq) | `100% <100%> (ø)` | `7 <2> (ø)` | :x: || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8393% <0%> (-674%)` | `55% <0%> (-1%)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <0%> (-667%)` | `17% <0%> (-1%)` | || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% <0%> (-625%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8644% <0%> (-608%)` | `55% <0%> (-1%)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% <0%> (-4%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% <0%> (-278%)` | `2% <0%> (ø)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9523% <0%> (-239%)` | `38% <0%> (-1%)` | || [operators/observable/observableconcatmapeagerjava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcevhz2vylmphdme) | `9729% <0%> (-217%)` | `2% <0%> (ø)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9591% <0%> (-205%)` | `2% <0%> (ø)` | ||  and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5163?srcpr&elfooter) last update [23b46f52f7fa97](https://codecovio/gh/reactivex/rxjava/compare/23b46f5b83eabebff15fbfbb4b471cde93706b812f7fa979acb84c51767ae688546e22861b72a350?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: increase timeout on parallel & completable tests this pr increases the timeout on `completabletest` test methods and on `parallelflowabletestparallelismandprefetchasync`related: #5154 #5179 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elh1) report> merging [#5199](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/354a16d08bd55049c37f5928cb846a8127239738?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a````diff@@             coverage diff             @@##                2x   #5199      +/-   ##- coverage     9598%   959%   -008%     + complexity     5679    5673       -6       files           621     621                lines         40611   40611                branches       5632    5632              - hits          38982   38950      -32     - misses          648     671      +23     - partials        981     990       +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `8688% <0%> (-82%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8678% <0%> (-661%)` | `60% <0%> (-2%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% <0%> (-568%)` | `31% <0%> (-4%)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9166% <0%> (-556%)` | `9% <0%> (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9384% <0%> (-462%)` | `27% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9215% <0%> (-458%)` | `2% <0%> (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% <0%> (-4%)` | `2% <0%> (ø)` | || [vex/internal/operators/flowable/flowabletimerjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzxiuamf2yq) | `9285% <0%> (-358%)` | `2% <0%> (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9441% <0%> (-305%)` | `6% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9642% <0%> (-268%)` | `2% <0%> (ø)` | ||  and [36 more](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5199?srcpr&elfooter) last update [354a16dd2b3845](https://codecovio/gh/reactivex/rxjava/compare/354a16d08bd55049c37f5928cb846a8127239738d2b38453ffae0f0f26f5452adec2b51e0b70edbe?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,1x: fix completableonerrorresumenext unsubscribe not propagated the `completableonerrorresumenext` did not properly propagate the downstream `unsubscribe()` call to upstreamreported in #5224 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&elh1) report> merging [#5225](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/1d7edee0a60cbf185157555483db430e1afd6702?srcpr&eldesc) will **decrease** coverage by `01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5225/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree)```diff@@            coverage diff             @@##               1x   #5225      +/-   ##- coverage     845%   844%   -011%     + complexity    2886    2883       -3       files          290     290                lines        18123   18124       +1       branches      2479    2479              - hits         15315   15297      -18     - misses        1943    1963      +20     + partials       865     864       -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/rx/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9db21wbgv0ywjszs5qyxzh) | `8337% <100%> (+002%)` | `103 <0> (ø)` | :arrow_down: || [/java/rx/internal/util/unsafe/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl3vuc2fmzs9nchnjtglua2vkuxvldwuuamf2yq) | `7575% <0%> (-1213%)` | `9% <0%> (-1%)` | || [/rx/internal/operators/operatorwindowwithtimejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jxaw5kb3dxaxrovgltzs5qyxzh) | `4204% <0%> (-644%)` | `3% <0%> (ø)` | || [internal/subscriptions/sequentialsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zdwjzy3jpchrpb25zl1nlcxvlbnrpywxtdwjzy3jpchrpb24uamf2yq) | `4655% <0%> (-345%)` | `14% <0%> (-1%)` | || [/java/rx/internal/operators/backpressureutilsjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqmfja3byzxnzdxjlvxrpbhmuamf2yq) | `6818% <0%> (-228%)` | `27% <0%> (-1%)` | || [src/main/java/rx/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9vynnlcnzlcnmvu2vyawfsaxplze9ic2vydmvylmphdme) | `9891% <0%> (-109%)` | `19% <0%> (-1%)` | || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `8071% <0%> (-072%)` | `15% <0%> (ø)` | || [/rx/internal/schedulers/cachedthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0nhy2hlzfrocmvhzfnjagvkdwxlci5qyxzh) | `9029% <0%> (+097%)` | `6% <0%> (ø)` | :arrow_down: || [a/rx/internal/operators/bufferuntilsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvqnvmzmvyvw50awxtdwjzy3jpymvylmphdme) | `7301% <0%> (+158%)` | `12% <0%> (+1%)` | :arrow_up: || [n/java/rx/internal/operators/cachedobservablejava](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq2fjagvkt2jzzxj2ywjszs5qyxzh) | `8532% <0%> (+163%)` | `6% <0%> (ø)` | :arrow_down: ||  and [1 more](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&elfooter) last update [1d7edee51bd12a](https://codecovio/gh/reactivex/rxjava/pull/5225?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x unicastprocessor fail-fast support this pr adds support for fail-fast behavior to `unicastprocessor` with methods `unicastprocessor<t> create(boolean delayerror)` `unicastprocessor<t> create(int capacityhint runnable onterminated boolean delayerror)` relates to #5165 #5217 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&elh1) report> merging [#5226](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/59dc7a38d48fea037383c577b969f579e09c0c23?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `9375%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5226/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5226      +/-   ##+ coverage     9601%   9607%   +006%     - complexity     5747     5758      +11       files           628      628                lines         41085    41099      +14       branches       5698     5703       +5     + hits          39446    39485      +39     + misses          657      642      -15     + partials        982      972      -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `959% <9375%> (-091%)` | `64 <6> (+7)` | || [a/io/reactivex/processors/serializedprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9tzxjpywxpemvkuhjvy2vzc29ylmphdme) | `9148% <0%> (-639%)` | `27% <0%> (-1%)` | || [/internal/operators/maybe/maybetakeuntilmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglstwf5ymuuamf2yq) | `9387% <0%> (-613%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9104% <0%> (-448%)` | `2% <0%> (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% <0%> (-4%)` | `2% <0%> (ø)` | || [rnal/operators/completable/completabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlvgltzw91dc5qyxzh) | `94% <0%> (-4%)` | `2% <0%> (ø)` | || [ternal/operators/completable/completablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq2fjaguuamf2yq) | `9696% <0%> (-304%)` | `23% <0%> (-1%)` | || [x/internal/operators/maybe/maybeswitchifemptyjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlu3dpdgnoswzfbxb0es5qyxzh) | `9722% <0%> (-278%)` | `2% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% <0%> (-257%)` | `12% <0%> (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | ||  and [40 more](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&elfooter) last update [59dc7a3d7409bb](https://codecovio/gh/reactivex/rxjava/pull/5226?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: add singleunsubscribeon() this pr adds the `singleunsubscribeon()` operatorrelated: #5300 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elh1) report> merging [#5302](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/db627720e5518845677dff536e6b0f2d9e5c2ea3?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5302/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5302      +/-   ##- coverage     9617%   9609%   -008%       complexity     5756     5756                files           628      629       +1       lines         41085    41112      +27       branches       5703     5705       +2     - hits          39514    39508       -6     - misses          613      629      +16     - partials        958      975      +17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `9933% <100%> (ø)` | `132 <1> (+1)` | :arrow_up: || [internal/operators/single/singleunsubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvvbnn1ynnjcmlizu9ulmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [rnal/subscriptions/arraycompositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9bcnjheunvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `9333% <0%> (-667%)` | `17% <0%> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `9491% <0%> (-509%)` | `10% <0%> (-1%)` | || [erators/completable/completableconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0sxrlcmfibguuamf2yq) | `9591% <0%> (-409%)` | `2% <0%> (ø)` | || [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `96% <0%> (-4%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9328% <0%> (-299%)` | `2% <0%> (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% <0%> (-295%)` | `23% <0%> (-1%)` | || [ex/internal/operators/maybe/maybetimeoutmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgltzw91de1hewjllmphdme) | `9558% <0%> (-295%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% <0%> (-29%)` | `2% <0%> (ø)` | ||  and [35 more](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&elfooter) last update [db62772506d8ee](https://codecovio/gh/reactivex/rxjava/pull/5302?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,2x: fix spsclaq nepotism flowablerefcounttesttestrefcountasync flaky this pr fixes the so-called gc nepotism (see #3794) in `spsclinkedarrayqueue` by not nulling out the previous buffers next pointer upon switching buffers in the `peek()`/`poll()` methodsin addition the flowablerefcounttesttestrefcountasync has been reworked to be more forgiving towards unexpected delays due to system load (reported in #5506) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elh1) report> merging [#5507](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/09df08a93165895fb23fea2a39aeb8e00dfb1e3c?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5507/graphs/treesvg?srcpr&width650&height150&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5507      +/-   ##- coverage     9604%   9602%   -003%     + complexity     5808     5797      -11       files           631      631                lines         41282    41285       +3       branches       5732     5732              - hits          39651    39645       -6     + misses          649      647       -2     - partials        982      993      +11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [reactivex/internal/queue/spsclinkedarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0xpbmtlzefycmf5uxvldwuuamf2yq) | `9682% <100%> (-074%)` | `38 <1> (-1)` | || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% <0%> (-556%)` | `7% <0%> (-2%)` | || [ternal/operators/flowable/flowablesampletimedjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2ftcgxlvgltzwquamf2yq) | `9117% <0%> (-442%)` | `3% <0%> (ø)` | || [activex/internal/operators/single/singlecachejava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvdywnozs5qyxzh) | `9705% <0%> (-295%)` | `23% <0%> (-1%)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% <0%> (-278%)` | `2% <0%> (ø)` | || [java/io/reactivex/subjects/completablesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvq29tcgxldgfibgvtdwjqzwn0lmphdme) | `948% <0%> (-26%)` | `35% <0%> (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% <0%> (-257%)` | `12% <0%> (-1%)` | || [main/java/io/reactivex/subjects/singlesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvu2luz2xlu3viamvjdc5qyxzh) | `9761% <0%> (-239%)` | `39% <0%> (-1%)` | || [/main/java/io/reactivex/subjects/maybesubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvtwf5ymvtdwjqzwn0lmphdme) | `9565% <0%> (-218%)` | `46% <0%> (-1%)` | || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9459% <0%> (-203%)` | `9% <0%> (ø)` | ||  and [41 more](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&elfooter) last update [09df08a59568ac](https://codecovio/gh/reactivex/rxjava/pull/5507?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: fix obscombinelatestdelayerror sync initial error not emitting this pr fixes the case reported in #5558 where a synchronous first non-empty source triggered an error completion immediately instead of giving a chance to the other sources to form combinationsthe fix also includes:- initialization of the `combineobserver`s now happen in the constructor- the `atomicreference<disposable>` of the inner observers are now inlined into `combineobserver`- cleaned up drain logic- unit tests verifying `flowablecombinelatest` (no changes required there) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&elh1) report> merging [#5560](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/357fac2ebe43029282ff356fa2dfb72b51982104?srcpr&eldesc) will **decrease** coverage by `016%`> the diff coverage is `935%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5560/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5560      +/-   ##- coverage     9632%   9615%   -017%     + complexity     5830     5820      -10       files           631      631                lines         41414    41417       +3       branches       5740     5739       -1     - hits          39890    39823      -67     - misses          596      635      +39     - partials        928      959      +31```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbwjpbmvmyxrlc3quamf2yq) | `9693% <935%> (-182%)` | `6 <0> (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `8697% <0%> (-573%)` | `57% <0%> (ø)` | || [tivex/internal/schedulers/instantperiodictaskjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jbnn0yw50ugvyaw9kawnuyxnrlmphdme) | `6111% <0%> (-556%)` | `7% <0%> (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% <0%> (-523%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `8849% <0%> (-487%)` | `62% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-381%)` | `2% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% <0%> (-257%)` | `12% <0%> (-1%)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% <0%> (-205%)` | `3% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [a/io/reactivex/internal/queue/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvtxbzy0xpbmtlzff1zxvllmphdme) | `9803% <0%> (-197%)` | `17% <0%> (-1%)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&elfooter) last update [357fac2fd46144](https://codecovio/gh/reactivex/rxjava/pull/5560?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: fix publishprocessor cancel/emission overflow bug this pr should fix the bug that caused the test failure in #5545the bug manifested itself when a cancellation was happening the same time a request 1 was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the `onnext()`s `get()` check and `decrementandget` this `decrementandget` decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent `offer` which saves the current array of registered `subscriber`s then would emit an item and overflow the `subscriber`the fix is to use the cancellation-aware `backpressurehelperproducedcancel()` utilityunit test were added to verify the correct behavior on both `publishprocessor` and `behaviorprocessor` (the latter uses different cancellation mechanism via a dedicated field) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&elh1) report> merging [#5669](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/cd6bc08c5bf1faea7cd36800c4e85cedd2f684c5?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5669/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5669      +/-   ##- coverage     9627%   9621%   -006%     - complexity     5815     5818       +3       files           633      633                lines         41553    41552       -1       branches       5752     5751       -1     - hits          40004    39981      -23     - misses          612      625      +13     - partials        937      946       +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9827% <100%> (-002%)` | `45 <0> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% <0%> (-85%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% <0%> (-58%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9401% <0%> (-428%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowabletakelasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgfrzuxhc3ruaw1lzc5qyxzh) | `9629% <0%> (-278%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsu29ydgvksm9pbi5qyxzh) | `9275% <0%> (-218%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% <0%> (-107%)` | `5% <0%> (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% <0%> (-082%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% <0%> (-082%)` | `3% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-075%)` | `2% <0%> (ø)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&elfooter) last update [cd6bc08678c62f](https://codecovio/gh/reactivex/rxjava/pull/5669?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,1x: fix completableconcat to use replace (dont dispose old) fixes the same bug as with the 2x `completableandthen` and `completableconcat`see #5694 & #5695 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&elh1) report> merging [#5696](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eldesc) into [1x](https://codecovio/gh/reactivex/rxjava/commit/396b6104e419b80002c45faf76ac38f00d2ff64a?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5696/graphs/treesvg?tokenwtcc2htjm2&srcpr&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree)```diff@@             coverage diff              @@##                1x    #5696      +/-   ##- coverage     8424%   8419%   -006%     + complexity     2888     2886       -2       files           290      290                lines         18256    18256                branches       2495     2495              - hits          15380    15370      -10     - misses         1992     2002      +10       partials        884      884```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/operators/completableonsubscribeconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq29tcgxldgfibgvpbln1ynnjcmlizunvbmnhdefycmf5lmphdme) | `875% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [perators/completableonsubscribeconcatiterablejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvq29tcgxldgfibgvpbln1ynnjcmlizunvbmnhdel0zxjhymxllmphdme) | `9259% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [/java/rx/internal/util/unsafe/mpsclinkedqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl3vuc2fmzs9nchnjtglua2vkuxvldwuuamf2yq) | `7272% <0%> (-1819%)` | `8% <0%> (-3%)` | || [rx/internal/util/atomic/mpsclinkedatomicqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc91dglsl2f0b21pyy9nchnjtglua2vkqxrvbwljuxvldwuuamf2yq) | `7419% <0%> (-1291%)` | `7% <0%> (-1%)` | || [java/rx/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `8169% <0%> (-282%)` | `2% <0%> (ø)` | || [n/java/rx/subscriptions/compositesubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjzy3jpchrpb25zl0nvbxbvc2l0zvn1ynnjcmlwdglvbi5qyxzh) | `7532% <0%> (-13%)` | `25% <0%> (ø)` | || [n/java/rx/subjects/subjectsubscriptionmanagerjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9zdwjqzwn0cy9tdwjqzwn0u3vic2nyaxb0aw9utwfuywdlci5qyxzh) | `80% <0%> (-072%)` | `15% <0%> (ø)` | || [in/java/rx/internal/operators/operatorgroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jhcm91cej5lmphdme) | `9081% <0%> (-071%)` | `5% <0%> (ø)` | || [main/java/rx/internal/operators/operatormergejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9pbnrlcm5hbc9vcgvyyxrvcnmvt3blcmf0b3jnzxjnzs5qyxzh) | `8532% <0%> (-046%)` | `7% <0%> (ø)` | || [src/main/java/rx/completablejava](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree#diff-c3jjl21haw4vamf2ys9yec9db21wbgv0ywjszs5qyxzh) | `8341% <0%> (+012%)` | `103% <0%> (+1%)` | :arrow_up: ||  and [4 more](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&elfooter) last update [396b610110e343](https://codecovio/gh/reactivex/rxjava/pull/5696?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: marbles for observable all frompublisher ziparray this pr adds a marble diagram to `frompublisher` and updates the marbles of `all` and `ziparray` inside `observable`the images can be seen in [this comment](https://githubcom/reactivex/rxjava/issues/5319#issuecomment-346585222) of #5319 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&elh1) report> merging [#5740](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/ed5cd8bb69bf07bcec9c3e0107aae28d66d8e7a8?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5740/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5740      +/-   ##+ coverage     9624%   9629%   +004%     - complexity     5827     5830       +3       files           634      634                lines         41615    41615                branches       5761     5761              + hits          40054    40073      +19     + misses          626      611      -15     + partials        935      931       -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `509 <0> (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% <0%> (-435%)` | `2% <0%> (ø)` | || [rnal/operators/observable/observableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu9ic2vydmvpbi5qyxzh) | `9795% <0%> (-205%)` | `3% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [internal/operators/completable/completableambjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlqw1ilmphdme) | `983% <0%> (-17%)` | `11% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `5886% <0%> (-142%)` | `31% <0%> (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9427% <0%> (-133%)` | `11% <0%> (+1%)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9677% <0%> (-097%)` | `6% <0%> (ø)` | || [tors/observable/observablesequenceequalsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvnlcxvlbmnlrxf1ywxtaw5nbguuamf2yq) | `9829% <0%> (-086%)` | `3% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% <0%> (-086%)` | `2% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&elfooter) last update [ed5cd8bbb7bf6f](https://codecovio/gh/reactivex/rxjava/pull/5740?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: fix observableswitchmap main onerror not disposing the current inner source the `observableswitchmap` had bad logic in its main `onerror` handler which didnt dispose the current inner `observable`the `flowable` version didnt have this logic error both variants received an unit test to verify the correct behaviorfixes #5832 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&elh1) report> merging [#5833](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/1fbc44fb81ec65f624cc98a318217dc031cf6d4e?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5833/graphs/treesvg?tokenwtcc2htjm2&srcpr&height150&width650)](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5833      +/-   ##+ coverage     9642%   9644%   +001%     + complexity     5816     5815       -1       files           634      634                lines         41761    41760       -1       branches       5796     5796              + hits          40268    40275       +7     + misses          578      573       -5     + partials        915      912       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9062% <100%> (+18%)` | `3 <0> (ø)` | :arrow_down: || [/operators/completable/completableconcatarrayjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxlq29uy2f0qxjyyxkuamf2yq) | `9375% <0%> (-625%)` | `2% <0%> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9189% <0%> (-541%)` | `9% <0%> (-1%)` | || [/internal/operators/flowable/flowableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlsw50zxj2ywwuamf2yq) | `9444% <0%> (-278%)` | `3% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `6153% <0%> (-257%)` | `12% <0%> (-1%)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9346% <0%> (-197%)` | `2% <0%> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9383% <0%> (-177%)` | `10% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `618% <0%> (-139%)` | `35% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9561% <0%> (-088%)` | `10% <0%> (-1%)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/5833/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&elfooter) last update [1fbc44fcfa17ae](https://codecovio/gh/reactivex/rxjava/pull/5833?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,2x: add observable switchmapx and concatmapx operators this pr ports the various `switchmapx` and `concatmapx` operators from #5870 #5871 #5872 and #5873 to `observable`:- `concatmapcompletable` (replaced by the common implementation)- `concatmapcompletabledelayerror`- `concatmapmaybe`- `concatmapmaybedelayerror`- `concatmapsingle`- `concatmapsingledelayerror`- `switchmapcompletable`- `switchmapcompletabledelayerror`- `switchmapmaybe`- `switchmapmaybedelayerror`- `switchmapsingle` (dedicated implementation)- `switchmapsingledelayerror` (dedicated implementation)this pr concludes the requested set of operators in #4853marbles will be updated/adjusted in a separate pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&elh1) report> merging [#5875](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/d3ed2690d5d7840b2ed190032f9324aec9a7d8a9?srcpr&eldesc) will **increase** coverage by `016%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5875/graphs/treesvg?srcpr&width650&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5875      +/-   ##+ coverage     9659%   9676%   +016%     - complexity     5893     5921      +28       files           652      657       +5       lines         43403    43986     +583       branches       6033     6132      +99     + hits          41926    42563     +637     + misses          567      544      -23     + partials        910      879      -31```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [operators/observable/observableinternalhelperjava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuludgvybmfssgvscgvylmphdme) | `8695% <ø> (-095%)` | `15 <0> (-3)` | || [rnal/operators/mixed/observableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbnyxlizs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [nal/operators/mixed/observableswitchmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbtaw5nbguuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `535 <22> (+20)` | :arrow_up: || [ernal/operators/mixed/flowableswitchmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [rnal/operators/mixed/observableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbnyxlizs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | ||  and [34 more](https://codecovio/gh/reactivex/rxjava/pull/5875/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&elfooter) last update [d3ed269e6168be](https://codecovio/gh/reactivex/rxjava/pull/5875?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || reopening due to the travis/github service problems  the build succeeded but the pr doesnt seem to pick up that state ||
1,0,0,0,1,1,1,1,2x: upgrade the algorithm of observabletimeout(time|selector) operators this pr improves the algorithms of the `observabletimeout(time)` and `observabletimeout(selector)` operators to match their `flowable` counterparts implemented in #5661in addition coverage of the `flowable` counterparts have been improved by synchronizing the unit testsnote that they were the last users of `observerfullarbiter` and `fullarbiterobserver` which are now removedcloses #5882 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&elh1) report> merging [#5886](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/0ea2c957d753abd95bab725a29dcdb0356697a85?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `9948%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5886/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5886      +/-   ##+ coverage     9741%   9745%   +004%     + complexity     5976     5946      -30       files           657      655       -2       lines         43960    43877      -83       branches       6128     6109      -19     - hits          42824    42761      -63     + misses          346      343       -3     + partials        790      773      -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/observable/observabletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxquamf2yq) | `100% <100%> (+347%)` | `3 <0> (ø)` | :arrow_down: || [l/operators/observable/observabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvrpbwvvdxruaw1lzc5qyxzh) | `9915% <987%> (+555%)` | `3 <0> (-1)` | :arrow_down: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% <0%> (-527%)` | `20% <0%> (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | || [ernal/operators/observable/observableintervaljava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuludgvydmfslmphdme) | `9642% <0%> (-358%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `913% <0%> (-29%)` | `2% <0%> (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `9576% <0%> (-265%)` | `54% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `923% <0%> (-257%)` | `6% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9583% <0%> (-25%)` | `2% <0%> (ø)` | ||  and [26 more](https://codecovio/gh/reactivex/rxjava/pull/5886/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&elfooter) last update [0ea2c95e55dcd4](https://codecovio/gh/reactivex/rxjava/pull/5886?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: fix flowablewindow(publisher|callable) upstream handling this pr fixes the upstream handling in `flowablewindow(publisher)` and `flowablewindow(callable<publisher>)` operators to make sure if both the main output and the inner windows have been cancelled the upstream is also cancelledrelated: #5887 #5881in addition the jacoco code coverage has been updated to 080 mainly due to the [automatic filtering of difficult-to-impossible code paths](https://githubcom/jacoco/jacoco/releases/tag/v080) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&elh1) report> merging [#5888](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/855153e7855f5aa1ebc3381126d0c6cc7cbf9628?srcpr&eldesc) will **increase** coverage by `006%`> the diff coverage is `9865%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5888/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5888      +/-   ##+ coverage     9749%   9755%   +006%     + complexity     5946     5941       -5       files           655      655                lines         43900    43862      -38       branches       6108     6100       -8     - hits          42799    42789      -10     + misses          339      328      -11     + partials        762      745      -17```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ators/flowable/flowablewindowboundarysupplierjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93qm91bmrhcnltdxbwbgllci5qyxzh) | `9874% <9833%> (+723%)` | `2 <1> (ø)` | :arrow_down: || [nal/operators/flowable/flowablewindowboundaryjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlv2luzg93qm91bmrhcnkuamf2yq) | `9928% <9902%> (+755%)` | `2 <1> (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9391% <0%> (-524%)` | `2% <0%> (ø)` | || [in/java/io/reactivex/subjects/behaviorsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvqmvoyxzpb3jtdwjqzwn0lmphdme) | `9574% <0%> (-267%)` | `54% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <0%> (-225%)` | `60% <0%> (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9823% <0%> (-177%)` | `2% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% <0%> (-167%)` | `2% <0%> (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9261% <0%> (-135%)` | `7% <0%> (ø)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `961% <0%> (-132%)` | `6% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9893% <0%> (-107%)` | `2% <0%> (ø)` | ||  and [42 more](https://codecovio/gh/reactivex/rxjava/pull/5888/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&elfooter) last update [855153e1b8de2d](https://codecovio/gh/reactivex/rxjava/pull/5888?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: fix flowablesingleorerror()toflowable() not signalling nosuchelementexception when a `singleorerror` is followed by `toflowable()` the assembly process switches the `flowable->single` operator into a `flowable->flowable` operator implementing the `singleorerror` behavior (saving the back-and-forth type conversion) the backing implementation was shared with `singleelement` and as such did not properly handle the `orerror` case for an empty source the pr fixes the lack of `nosuchelementexception` in this casefixes #5903the `observable` variant doesnt have such optimization but the test has been converted to make sure `observable` is verified for this aspect in case the optimization is implemented with it in the future # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&elh1) report> merging [#5904](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5e5d5a27aa7b250ef1626dddf291c9243da2cc61?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5904/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5904      +/-   ##+ coverage     9792%   9797%   +004%     - complexity     5987     5989       +2       files           655      655                lines         43925    43929       +4       branches       6087     6088       +1     + hits          43014    43039      +25     + misses          281      271      -10     + partials        630      619      -11```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/flowable/flowablesinglesinglejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2luz2xlu2luz2xllmphdme) | `9795% <100%> (ø)` | `3 <1> (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablesinglejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <1> (ø)` | :arrow_down: || [ternal/operators/flowable/flowablesinglemaybejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2luz2xltwf5ymuuamf2yq) | `100% <100%> (ø)` | `3 <1> (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9565% <0%> (-261%)` | `2% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [internal/operators/observable/observablecachejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunhy2hllmphdme) | `937% <0%> (-158%)` | `9% <0%> (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxauamf2yq) | `8658% <0%> (-128%)` | `3% <0%> (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% <0%> (-106%)` | `2% <0%> (ø)` | || [/operators/maybe/maybeflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrmxhde1hcel0zxjhymxlrmxvd2fibguuamf2yq) | `9754% <0%> (-082%)` | `2% <0%> (ø)` | ||  and [24 more](https://codecovio/gh/reactivex/rxjava/pull/5904/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&elfooter) last update [5e5d5a29f1d846](https://codecovio/gh/reactivex/rxjava/pull/5904?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: add public constructor for testscheduler that takes the time - adds a time constructor to testscheduler- should i make it experimental or will it just be stable?fixes #5901 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&elh1) report> merging [#5906](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/7646371a4960be54f015467a628dca6010026773?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5906/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #5906      +/-   ##- coverage     9802%   9802%   -001%     - complexity     5993     5996       +3       files           655      655                lines         43924    43928       +4       branches       6086     6086              + hits          43056    43059       +3     - misses          256      266      +10     + partials        612      603       -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/schedulers/testschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9uzxn0u2nozwr1bgvylmphdme) | `100% <100%> (ø)` | `11 <0> (ø)` | :arrow_down: || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `8993% <0%> (-78%)` | `6% <0%> (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-538%)` | `9% <0%> (ø)` | || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `9473% <0%> (-527%)` | `20% <0%> (-1%)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9739% <0%> (-174%)` | `2% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-12%)` | `2% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9893% <0%> (-107%)` | `2% <0%> (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9748% <0%> (-063%)` | `50% <0%> (ø)` | ||  and [22 more](https://codecovio/gh/reactivex/rxjava/pull/5906/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&elfooter) last update [764637121b4e30](https://codecovio/gh/reactivex/rxjava/pull/5906?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: update singleflatmappublisher marble renamed the operator in the box for #5788![flatmappublisher](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleflatmappublisherpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&elh1) report> merging [#5924](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3a098c5e67274246b0b62018f0b92fd49b028359?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/5924/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&eltree)```diff@@            coverage diff            @@##                2x    #5924   +/-   ##  coverage     9821%   9821%           + complexity     6020     6018    -2       files           656      656             lines         44040    44040             branches       6102     6102             hits          43255    43255           + misses          241      239    -2     - partials        544      546    +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <ø> (ø)` | `142 <0> (ø)` | :arrow_down: || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% <0%> (-193%)` | `29% <0%> (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9744% <0%> (-171%)` | `11% <0%> (ø)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9849% <0%> (-151%)` | `3% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% <0%> (-142%)` | `3% <0%> (ø)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% <0%> (-12%)` | `67% <0%> (-1%)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% <0%> (-09%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9826% <0%> (-087%)` | `2% <0%> (ø)` | ||  and [15 more](https://codecovio/gh/reactivex/rxjava/pull/5924/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&elfooter) last update [3a098c506d15bb](https://codecovio/gh/reactivex/rxjava/pull/5924?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,2x: fix & prevent null checks on primitives this pr removes the accidental null checks on primitives in two `observable` methods and adds a trap method to `objecthelper` to both highlight and fail the tests in case the null checks are still attempted the method is marked as deprecated so it will also show up in (eclipses) problems windowreplaces #6012 resolves #6013 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elh1) report> merging [#6014](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/5f1ce20a1159a8464bfae2d8b2106039ac520eb2?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6014/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree)```diff@@             coverage diff             @@##                2x   #6014      +/-   ##+ coverage     9828%   983%   +002%     - complexity     6161    6162       +1       files           659     659                lines         44522   44519       -3       branches       6201    6201              + hits          43757   43763       +6     + misses          233     227       -6     + partials        532     529       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `539 <0> (ø)` | :arrow_down: || [/io/reactivex/internal/functions/objecthelperjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl09iamvjdehlbhblci5qyxzh) | `100% <100%> (ø)` | `22 <1> (+1)` | :arrow_up: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-323%)` | `9% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9468% <0%> (-194%)` | `2% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [rnal/subscriptions/deferredscalarsubscriptionjava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyaxb0aw9ucy9ezwzlcnjlzfnjywxhcln1ynnjcmlwdglvbi5qyxzh) | `9846% <0%> (-154%)` | `28% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% <0%> (-131%)` | `2% <0%> (ø)` | ||  and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6014/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&elfooter) last update [5f1ce203689fe5](https://codecovio/gh/reactivex/rxjava/pull/6014?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,2x: fix singletakeuntil maybetakeuntil dispose behavior fix the dispose behavior of the `singletakeuntil` and `maybetakeuntil` operatorstests were also added to the other 3 `takeuntil` variants (for `completable` it is delegated to `amb`)fixes: #6018 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&elh1) report> merging [#6019](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/b9f5ef81237b16cb3d30d404740fb3ebf0511ed3?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6019/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6019      +/-   ##+ coverage     9827%   9828%   +<01%     + complexity     6163     6161       -2       files           659      659                lines         44519    44521       +2       branches       6201     6201              + hits          43753    43757       +4     + misses          231      229       -2       partials        535      535```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/operators/maybe/maybetakeuntilpublisherjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlvgfrzvvudglsuhvibglzagvylmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% <0%> (-342%)` | `2% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% <0%> (-181%)` | `42% <0%> (-1%)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvgbgf0twfwsxrlcmfibgvgbg93ywjszs5qyxzh) | `9666% <0%> (-167%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `9402% <0%> (-15%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% <0%> (-142%)` | `3% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6019/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&elfooter) last update [b9f5ef8794cd19](https://codecovio/gh/reactivex/rxjava/pull/6019?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,1,0,0,1,1,0,fix flowableblockingsubscribe is unbounded and can lead to oome create and bound new `blockingsubscribe` overloads to `buffersize`* create new overloads with `buffersize`* create a `boundedconsumer`* create a `boundedsubsciber`close: #5988 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&elh1) report> merging [#6026](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f3c88628440268c5cf8c0c880589d9ac411fd495?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `9444%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6026/graphs/treesvg?width650&height150&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&eltree)```diff@@             coverage diff             @@##               2x    #6026      +/-   ##- coverage     983%   9827%   -004%     - complexity    6175     6193      +18       files          665      666       +1       lines        44729    44801      +72       branches      6205     6206       +1     + hits         43973    44030      +57     - misses         222      233      +11     - partials       534      538       +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava/io/reactivex/internal/functions/functionsjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvznvuy3rpb25zl0z1bmn0aw9ucy5qyxzh) | `100% <100%> (ø)` | `36 <1> (+1)` | :arrow_up: || [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `564 <3> (+3)` | :arrow_up: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% <100%> (-428%)` | `10 <1> (ø)` | || [ctivex/internal/subscribers/boundedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvqm91bmrlzfn1ynnjcmlizxiuamf2yq) | `9259% <9259%> (ø)` | `15 <15> (?)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-598%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% <0%> (-278%)` | `56% <0%> (-2%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | ||  and [30 more](https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&elfooter) last update [f3c88628bd5b13](https://codecovio/gh/reactivex/rxjava/pull/6026?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || also it would be great if you copied the unit tests that crash the callbacks so that the coverage on the new class gets very high || https://codecovio/gh/reactivex/rxjava/pull/6026/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc3vic2nyawjlcnmvqm91bmrlzfn1ynnjcmlizxiuamf2yq || i created a `boundedsubscribertestjava` to trigger `consumer` and `action` exceptions but the code coverage remains unchanged did i miss a test? ||
1,0,0,0,0,0,1,0,2x: add maybe marble diagrams 06/21/a resolved the following diagrams of #5806:#### amb: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeambpng)#### ambarray: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeambarraypng)#### concat(iterable): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatipng)#### concat(publisher): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatppng)#### concat(publisher int): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatpnpng)#### concatarray: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarraypng)#### concatarraydelayerror: indicate error delayed 1 marble per source![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarraydelayerrorpng)#### concatarrayeager: missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatarrayeagerpng)#### concatdelayerror(iterable): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatdelayerroripng)#### concatdelayerror(publisher): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcatdelayerrorppng)#### concateager(iterable): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateageripng)#### concateager(publisher): missing diagram![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeconcateagerppng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&elh1) report> merging [#6053](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/cc186bc692de9a0a4b489db8cfdb24c798f6286f?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6053/graphs/treesvg?srcpr&tokenwtcc2htjm2&width650&height150)](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6053      +/-   ##- coverage     9834%   9827%   -007%     + complexity     6194     6191       -3       files           666      666                lines         44802    44802                branches       6206     6206              - hits          44059    44028      -31     - misses          222      232      +10     - partials        521      542      +21```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <ø> (ø)` | `171 <0> (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9275% <0%> (-387%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-272%)` | `2% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <0%> (-225%)` | `60% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% <0%> (-214%)` | `5% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% <0%> (-181%)` | `42% <0%> (-1%)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6053/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&elfooter) last update [cc186bc8fa6d9c](https://codecovio/gh/reactivex/rxjava/pull/6053?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,2x: fix concatmap{single|maybe} null emission on dispose race this pr fixes a bug in all 4 specialized `concatmap` implementation that allows `null` to be emitted when the success signal of the inner source races with the dispose signal of the sequencelikely fixes: #6059 a very similar thing happened in #5927 just after a release but this bug was there between 2111 and 2114  || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&elh1) report> merging [#6060](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/869c2aaefa2f6bd88265816992d5d1bf9fa10588?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6060/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6060      +/-   ##+ coverage     9826%   9829%   +002%     - complexity     6188     6194       +6       files           666      666                lines         44802    44806       +4       branches       6206     6206              + hits          44025    44041      +16     + misses          235      232       -3     + partials        542      533       -9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/mixed/flowableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwtwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [ernal/operators/mixed/flowableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwu2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [rnal/operators/mixed/observableconcatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbnyxlizs5qyxzh) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8692% <0%> (-916%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-747%)` | `2% <0%> (ø)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8924% <0%> (-216%)` | `9% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% <0%> (-214%)` | `5% <0%> (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% <0%> (-205%)` | `2% <0%> (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0ae1hewjllmphdme) | `991% <0%> (-09%)` | `2% <0%> (ø)` | ||  and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6060/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&elfooter) last update [869c2aa385e955](https://codecovio/gh/reactivex/rxjava/pull/6060?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,add marble diagram to the singlenever method first of all im extremely grateful to open my first pr for rxjava i hope that ill be able to tick more of the marbles from #5788 but for now this should tick off the `never` operatorplease let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&elh1) report> merging [#6074](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/909920a5f13f5acc6507d6de2b62370df7e86573?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6074/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6074      +/-   ##+ coverage     9824%   9828%   +003%     + complexity     6192     6190       -2       files           666      666                lines         44806    44806                branches       6206     6206              + hits          44020    44036      +16     + misses          239      236       -3     + partials        547      534      -13```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <ø> (ø)` | `146 <0> (ø)` | :arrow_down: || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% <0%> (-278%)` | `55% <0%> (-2%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <0%> (-225%)` | `60% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% <0%> (-214%)` | `5% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `942% <0%> (-145%)` | `2% <0%> (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% <0%> (-106%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9829% <0%> (-086%)` | `2% <0%> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% <0%> (-066%)` | `2% <0%> (ø)` | || [ain/java/io/reactivex/subjects/unicastsubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvvw5py2fzdfn1ymply3quamf2yq) | `9936% <0%> (-064%)` | `64% <0%> (-1%)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6074/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&elfooter) last update [909920a19cb68e](https://codecovio/gh/reactivex/rxjava/pull/6074?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleneverpng` || thank you! pr is updated :) ||
1,0,0,0,0,0,1,0,2x: add completable marble diagrams (07/17a) this pr adds the following marble diagrams to `completable` operators (#5789):#### amb ambarray![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableambarraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableambpng)#### complete![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablecompletepng)#### concatarray concat![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatarraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatppng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatpnpng)#### defer![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completabledeferpng)#### error![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableerrorfpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&elh1) report> merging [#6083](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/535ab3534851609e25750f50b9a1366f22a80ac9?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6083/graphs/treesvg?tokenwtcc2htjm2&width650&srcpr&height150)](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6083      +/-   ##+ coverage     9825%   9831%   +005%     + complexity     6195     6194       -1       files           667      667                lines         44856    44856                branches       6211     6211              + hits          44074    44098      +24     + misses          237      228       -9     + partials        545      530      -15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% <ø> (ø)` | `116 <0> (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-672%)` | `2% <0%> (ø)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9308% <0%> (-32%)` | `3% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% <0%> (-12%)` | `67% <0%> (-1%)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% <0%> (-106%)` | `2% <0%> (ø)` | || [x/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlr3jvdxbces5qyxzh) | `9467% <0%> (-085%)` | `3% <0%> (ø)` | || [vex/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsunvut24uamf2yq) | `9661% <0%> (-049%)` | `8% <0%> (ø)` | || [main/java/io/reactivex/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3viamvjdhmvumvwbgf5u3viamvjdc5qyxzh) | `9769% <0%> (-042%)` | `50% <0%> (ø)` | ||  and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6083/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&elfooter) last update [535ab35ada7ad3](https://codecovio/gh/reactivex/rxjava/pull/6083?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,add marble diagram for singlerepeatuntil operator here is marble for `repeatuntil` operator in #5788![repeatuntil](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/repeatuntilpng)please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pr `https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singlerepeatuntilpng` || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&elh1) report> merging [#6084](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/53dd15fcb5c3e154b58ecb1768732d55aa49f5c9?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6084/graphs/treesvg?height150&width650&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&eltree)```diff@@             coverage diff             @@##                2x   #6084      +/-   ##- coverage     9825%   982%   -005%     + complexity     6194    6193       -1       files           667     667                lines         44856   44858       +2       branches       6211    6211              - hits          44073   44054      -19     - misses          242     247       +5     - partials        541     557      +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <ø> (ø)` | `146 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8954% <0%> (-458%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% <0%> (-314%)` | `59% <0%> (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% <0%> (-278%)` | `55% <0%> (-2%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-266%)` | `11% <0%> (+1%)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [ex/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq3jlyxrllmphdme) | `9548% <0%> (-194%)` | `6% <0%> (ø)` | || [io/reactivex/subscribers/serializedsubscriberjava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc3vic2nyawjlcnmvu2vyawfsaxplzfn1ynnjcmlizxiuamf2yq) | `9886% <0%> (-114%)` | `26% <0%> (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% <0%> (-107%)` | `5% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6084/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&elfooter) last update [53dd15f836d0ea](https://codecovio/gh/reactivex/rxjava/pull/6084?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! updated ||
1,0,0,0,0,0,1,0,add marble diagrams for various single operators here are marble diagrams for various single operators that will close some of the #5788 marble for `concateager(publisher)`![concateeagerp](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concateagerpublisherpng)marble for `concateager(iterable)`![concateeageri](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/concateageriterablepng)marble for `create`![create](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/createpng)marble for `ambwith`![ambwith](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/ambwithpng)marble for `equals`![equals](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/equalspng)marble for `merge(source1 source2)`![merge](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergetwopng)marble for `merge(source1 source2 source3)`![mergethree](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergethreepng)marble for `merge(source1 source2 source3 source4)`![mergefour](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergefourpng)marble for `merge(singlesource<singlesource>)`![mergesinglesource](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergesinglesourcepng)marble for `mergewith`![mergewith](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergewithpng)marble for `doafterterminate`![doafterterminate](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/doafterterminatepng)marble for `to`![to](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/topng)marble for `as`![as](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/aspng)marble for `compose`![compose](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/composepng)marble for `doaftersuccess`![doaftersuccess](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/doaftersuccesspng)marble for `merge(publisher)`![mergepublisher](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergepublisherpng)marble for `merge(iterable)`![mergeiterable](https://rawgithubusercontentcom/umfsimke/rxjava/images/images/mergeiterablepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&elh1) report> merging [#6141](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/579e90dc21937b900877a8baf3918cdca22d3a91?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6141/graphs/treesvg?width650&srcpr&tokenwtcc2htjm2&height150)](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6141      +/-   ##- coverage     9828%   9823%   -005%       complexity     6193     6193                files           667      667                lines         44853    44853                branches       6213     6213              - hits          44082    44061      -21     - misses          235      244       +9     - partials        536      548      +12```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <100%> (ø)` | `146 <3> (ø)` | :arrow_down: || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9572% <0%> (-342%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% <0%> (-339%)` | `2% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9596% <0%> (-314%)` | `59% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9019% <0%> (-262%)` | `2% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [vex/internal/operators/single/singletakeuntiljava](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuywtlvw50awwuamf2yq) | `983% <0%> (-17%)` | `2% <0%> (ø)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6141/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&elfooter) last update [579e90d7a6b390](https://codecovio/gh/reactivex/rxjava/pull/6141?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @akarnokd `create` marble is not valid i havent pushed correct version to the repo  sorry for thishere is proper `create`:![create](https://rawgithubusercontentcom/umfsimke/rxjava/6a8d7b43f255f84727376fb34763d47ba7b5410d/images/createpng) || thanks updated the image in the repo http://reactivexio/rxjava/2x/javadoc/snapshot/io/reactivex/singlehtml#create-ioreactivexsingleonsubscribe- ||
1,0,0,0,0,0,1,0,2x: add concatarrayeagerdelayerror operator (expose feature) this pr exposes the existing `delayerror` capability of the `concatmapeager` operator as `concatarrayeagerdelayerror` for both `flowable` and `observable`in addition the `concatarrayeager` and these new methods receive marble diagrams:#### observable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagernnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagerdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/concatarrayeagerdelayerrornnpng)#### flowable![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagerpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagernnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagerdelayerrorpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableconcatarrayeagerdelayerrornnpng)resolves: #6082 *(sidenote: one of the validators had to be adjusted due to false positive it produced)* # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&elh1) report> merging [#6143](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3562dfc5d2529efa5de41a7b8689f6847b3fb616?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6143/graphs/treesvg?height150&width650&tokenwtcc2htjm2&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6143      +/-   ##- coverage     9826%   9825%   -002%     - complexity     6191     6192       +1       files           667      667                lines         44853    44857       +4       branches       6213     6213              - hits          44077    44074       -3     - misses          239      241       +2     - partials        537      542       +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `566 <2> (+2)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `541 <2> (+2)` | :arrow_up: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9583% <0%> (-278%)` | `55% <0%> (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9084% <0%> (-262%)` | `2% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-164%)` | `2% <0%> (ø)` | || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `9894% <0%> (-106%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowabletimeouttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlvgltzw91dfrpbwvklmphdme) | `9837% <0%> (-082%)` | `3% <0%> (ø)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6143/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&elfooter) last update [3562dfc34b88a4](https://codecovio/gh/reactivex/rxjava/pull/6143?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: fix marble of maybeflatmap events to maybesource fix the marble diagram of the event-mapping [`maybeflatmap`](http://reactivexio/rxjava/2x/javadoc/io/reactivex/maybehtml#flatmap-ioreactivexfunctionsfunction-ioreactivexfunctionsfunction-javautilconcurrentcallable-) operator:![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeflatmapmmmpng)tracked in: #5806 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elh1) report> merging [#6155](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/a16f63fa9030dc7ed4a5b9e2b8c948e02d92e557?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6155/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eltree)```diff@@             coverage diff             @@##               2x    #6155      +/-   ##+ coverage     982%   9822%   +001%     + complexity    6198     6197       -1       files          667      667                lines        44857    44857                branches      6213     6213              + hits         44053    44059       +6     + misses         259      255       -4     + partials       545      543       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <ø> (ø)` | `171 <0> (ø)` | :arrow_down: || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9646% <0%> (-354%)` | `11% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9293% <0%> (-272%)` | `2% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9361% <0%> (-266%)` | `3% <0%> (ø)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [java/io/reactivex/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9qdwjsaxnouhjvy2vzc29ylmphdme) | `9819% <0%> (-181%)` | `42% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `9281% <0%> (-131%)` | `2% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/6155/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&elfooter) last update [a16f63fcee20b9](https://codecovio/gh/reactivex/rxjava/pull/6155?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,fix terminology of cancel/dispose in the javadocs resolves #6196changing terminology from cancel -> dispose wherever appropriate in the following classes:- `observablejava`- `singlejava`- `maybejava`- `completablejava`areas where i did _not_ change from cancel -> disposal include: - where the cancellation was in reference to a `flowable` `publisher` or a `future`- `test()` methods where the `testobserver` returned actually has a `cancel()` method # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&elh1) report> merging [#6199](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e0532b71f7eb6e2973b8c9b155b53a671caa0e9f?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6199/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6199      +/-   ##+ coverage     9823%   9825%   +002%     + complexity     6202     6201       -1       files           667      667                lines         44888    44888                branches       6218     6218              + hits          44095    44106      +11     + misses          253      245       -8     + partials        540      537       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <ø> (ø)` | `146 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvq29tcgxldgfibguuamf2yq) | `100% <100%> (ø)` | `117 <2> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `541 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <100%> (ø)` | `171 <4> (ø)` | :arrow_down: || [reactivex/internal/operators/single/singleambjava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvbbwiuamf2yq) | `9636% <0%> (-364%)` | `9% <0%> (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% <0%> (-214%)` | `5% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9521% <0%> (-107%)` | `3% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9906% <0%> (-094%)` | `2% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6199/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&elfooter) last update [e0532b72eaba8a](https://codecovio/gh/reactivex/rxjava/pull/6199?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: fix tofuture marbles and descriptions this pr fixes the marble diagrams of `flowabletofuture` and `observabletofuture` to indicate:- multi-valued sources signal `indexoutofboundsexception`- source has to be finite for the `future` to terminate![image](https://githubcom/reactivex/rxjava/wiki/images/rx-operators/flowabletofuturepng)![image](https://githubcom/reactivex/rxjava/wiki/images/rx-operators/tofutureopng)resolves #6198(also fixes the diagram for #5813) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&elh1) report> merging [#6200](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e0532b71f7eb6e2973b8c9b155b53a671caa0e9f?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6200/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6200      +/-   ##- coverage     9823%   9822%   -002%     + complexity     6202     6199       -3       files           667      667                lines         44888    44888                branches       6218     6218              - hits          44095    44090       -5       misses          253      253              - partials        540      545       +5```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <ø> (ø)` | `566 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <ø> (ø)` | `541 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8888% <0%> (-393%)` | `2% <0%> (ø)` | || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9787% <0%> (-171%)` | `11% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% <0%> (-16%)` | `3% <0%> (ø)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9722% <0%> (-139%)` | `56% <0%> (-1%)` | || [java/io/reactivex/processors/unicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9vbmljyxn0uhjvy2vzc29ylmphdme) | `988% <0%> (-12%)` | `67% <0%> (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | ||  and [20 more](https://codecovio/gh/reactivex/rxjava/pull/6200/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&elfooter) last update [e0532b7d255138](https://codecovio/gh/reactivex/rxjava/pull/6200?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,2x: expose the keep-alive value of the io scheduler as system property (#6279) configuring keep-alive through system propertyresolves: #6279 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elh1) report> merging [#6287](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3281b027c7e46c1f0ab9ec7719b5029285920e37?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6287/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6287      +/-   ##+ coverage     9825%   9829%   +003%     + complexity     6262     6261       -1       files           667      667                lines         44888    44889       +1       branches       6214     6214              + hits          44105    44122      +17     + misses          249      236      -13     + partials        534      531       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% <ø> (ø)` | `10 <0> (ø)` | :arrow_down: || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `9148% <100%> (+116%)` | `9 <0> (ø)` | :arrow_down: || [va/io/reactivex/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvcxvldwuvu3bzy0fycmf5uxvldwuuamf2yq) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9659% <0%> (-213%)` | `11% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `9323% <0%> (-194%)` | `2% <0%> (ø)` | || [/io/reactivex/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvzglzcg9zywjszxmvq29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <0%> (-106%)` | `3% <0%> (ø)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% <0%> (-086%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunyzwf0zs5qyxzh) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | || [vex/internal/operators/flowable/flowablecachejava](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq2fjaguuamf2yq) | `9772% <0%> (-076%)` | `37% <0%> (-1%)` | ||  and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6287/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&elfooter) last update [3281b021fb3977](https://codecovio/gh/reactivex/rxjava/pull/6287?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,2x: add interruptible mode to schedulersfrom by default the `schedulersfrom` uses a trampoline to ensure worker tasks are executed fifo and non-overlappingly on any potentially multi-threaded `executor` this old setup didnt allow task interruption due to this disconnect between the trampoline task and the operator task (in contrast the standard schedulers use single threaded executors and their `future` is linked and interruptible when the operator task is cancelled)this pr add an interruptible mode to the `schedulersfrom` via a paramerer in a new overload and some internal dispatching based on this mode selector existing `schedulersfrom(executor)` users should still behave the sameresolves: #6368 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&elh1) report> merging [#6370](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/e1b383840d26ebdfbf298ee7f64ac26f697f9495?srcpr&eldesc) will **decrease** coverage by `006%`> the diff coverage is `9354%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6370/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6370      +/-   ##- coverage     9824%   9818%   -007%     - complexity     6282     6287       +5       files           673      673                lines         45023    45075      +52       branches       6226     6239      +13     + hits          44235    44256      +21     - misses          248      263      +15     - partials        540      556      +16```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% <100%> (ø)` | `11 <2> (+1)` | :arrow_up: || [activex/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9fegvjdxrvclnjagvkdwxlci5qyxzh) | `9798% <9333%> (-202%)` | `10 <2> (+1)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbnyxlizs5qyxzh) | `8496% <0%> (-85%)` | `2% <0%> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% <0%> (-354%)` | `11% <0%> (ø)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <0%> (-225%)` | `60% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% <0%> (-218%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `962% <0%> (-169%)` | `10% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3dpdgnotwfwlmphdme) | `9528% <0%> (-142%)` | `3% <0%> (ø)` | ||  and [24 more](https://codecovio/gh/reactivex/rxjava/pull/6370/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&elfooter) last update [e1b38387c34bac](https://codecovio/gh/reactivex/rxjava/pull/6370?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,add doonterminate to single/maybe for consistency this pr adds doonterminate operator to single and mayberesolves: #6379 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&elh1) report> merging [#6386](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/3fbfcc9c648dc02a064158c3ddb262f95949cbc5?srcpr&eldesc) will **increase** coverage by `005%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6386/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6386      +/-   ##+ coverage     9823%   9828%   +005%     - complexity     6287     6299      +12       files           673      675       +2       lines         45092    45156      +64       branches       6239     6239              + hits          44297    44383      +86     + misses          256      238      -18     + partials        539      535       -4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [x/internal/operators/maybe/maybedoonterminatejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjlrg9pblrlcm1pbmf0zs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [src/main/java/io/reactivex/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvtwf5ymuuamf2yq) | `100% <100%> (ø)` | `173 <1> (+1)` | :arrow_up: || [internal/operators/single/singledoonterminatejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgveb09uvgvybwluyxrllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [src/main/java/io/reactivex/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2luz2xllmphdme) | `100% <100%> (ø)` | `149 <1> (+1)` | :arrow_up: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `8955% <0%> (-598%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9743% <0%> (-257%)` | `2% <0%> (ø)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9789% <0%> (-211%)` | `3% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | ||  and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6386/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&elfooter) last update [3fbfcc93e8284b](https://codecovio/gh/reactivex/rxjava/pull/6386?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || all improvements and fixes have been implemented ||
1,0,0,0,0,1,1,0,2x: fix concatmapdelayerror not continuing on fused inner source crash the `callable` fused path didnt consider the error-delay settings and cut the sequence shortfixes: #6520 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&elh1) report> merging [#6522](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/31e8d48a53c42c46a01f1db3d09ab4cafe5133f6?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6522/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6522      +/-   ##+ coverage     9824%   9824%   +<01%     + complexity     6294     6293       -1       files           675      675                lines         45165    45167       +2       branches       6246     6247       +1     + hits          44373    44375       +2     + misses          251      248       -3     - partials        541      544       +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [internal/operators/flowable/flowableconcatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwlmphdme) | `9813% <100%> (+001%)` | `6 <0> (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlqmxvy2tpbmdtdwjzy3jpymuuamf2yq) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvb1ymxpc2guamf2yq) | `9469% <0%> (-354%)` | `11% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9578% <0%> (-254%)` | `10% <0%> (-1%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9456% <0%> (-218%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableskiplasttimedjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu2tpcexhc3ruaw1lzc5qyxzh) | `9591% <0%> (-205%)` | `2% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [activex/internal/schedulers/scheduledrunnablejava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ty2hlzhvszwrsdw5uywjszs5qyxzh) | `9807% <0%> (-193%)` | `29% <0%> (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlu3vic2nyawjlt24uamf2yq) | `9661% <0%> (-17%)` | `2% <0%> (ø)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6522/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&elfooter) last update [31e8d48cab93e5](https://codecovio/gh/reactivex/rxjava/pull/6522?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,rename test methods and enable the check fix #6518 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`3x@edb1f71`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6528/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&eltree)```diff@@          coverage diff           @@##             3x    #6528   +/-   ##  coverage       ?   9822%             complexity     ?     6157             files          ?      675             lines          ?    44785             branches       ?     6181             hits           ?    43989             misses         ?      274             partials       ?      522```------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&elfooter) last update [edb1f7135e510a](https://codecovio/gh/reactivex/rxjava/pull/6528?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,3x: add concatmap with scheduler guaranteeing where the mapper runs this pr adds an overload to `concatmap` and `concatmapdelayerror` in both `flowable` and `observable` which makes sure the `mapper` function is always executed on a dedicated schedulerby default `concatmap` may execute the `mapper` function on various threads: the subscribing thread the upstream thread generating the items to be mapped or the thread where the generated inner source terminates these overloads remove this kind of uncertaintythe implementation is a copy of the original concatmap instead of an extension so that optimizations for the non-scheduled variants still work without extra overheadoverloads to the `concatmap{single|maybe|completable}` and `concatmap{single|maybe|completable}delayerror` *may be added* in a separate pr laterresolves #6447 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elh1) report> merging [#6538](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/94ae79572715d5e6f9d6e63d906069d72990f1ba?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9886%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6538/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eltree)```diff@@             coverage diff             @@##               3x    #6538      +/-   ##+ coverage     982%   9827%   +007%     - complexity    6198     6214      +16       files          680      682       +2       lines        44976    45505     +529       branches      6202     6288      +86     + hits         44168    44722     +554     + misses         259      248      -11     + partials       549      535      -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvrmxvd2fibguuamf2yq) | `100% <100%> (ø)` | `575 <3> (+3)` | :arrow_up: || [src/main/java/io/reactivex/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvt2jzzxj2ywjszs5qyxzh) | `100% <100%> (ø)` | `550 <3> (+3)` | :arrow_up: || [ators/observable/observableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszunvbmnhde1hcfnjagvkdwxlci5qyxzh) | `9882% <9882%> (ø)` | `4 <4> (?)` | || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlq29uy2f0twfwu2nozwr1bgvylmphdme) | `9883% <9883%> (ø)` | `4 <4> (?)` | || [/io/reactivex/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9jb1njagvkdwxlci5qyxzh) | `8936% <0%> (-426%)` | `9% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvn3axrjae1hcc5qyxzh) | `9468% <0%> (-16%)` | `3% <0%> (ø)` | || [ivex/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21hewjll01hewjltwvyz2vbcnjhes5qyxzh) | `9662% <0%> (-113%)` | `6% <0%> (ø)` | ||  and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6538/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&elfooter) last update [94ae79500ce78b](https://codecovio/gh/reactivex/rxjava/pull/6538?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,fixing version tag on schedulersfrom(executor boolean) resolves #6543 updating the version tag on `schedulersfrom(executor boolean)` since it was promoted # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&elh1) report> merging [#6544](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/fb37226be292c8ee0934311f8ca2f139dfd0dc5a?srcpr&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6544/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6544      +/-   ##- coverage     9827%   9822%   -006%     + complexity     6205     6200       -5       files           682      682                lines         45459    45459                branches       6288     6288              - hits          44675    44650      -25     - misses          256      266      +10     - partials        528      543      +15```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `100% <ø> (ø)` | `11 <0> (ø)` | :arrow_down: || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-598%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [tivex/internal/observers/futuresingleobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl0z1dhvyzvnpbmdszu9ic2vydmvylmphdme) | `9433% <0%> (-378%)` | `24% <0%> (-1%)` | || [activex/internal/observers/queuedrainobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb2jzzxj2zxjzl1f1zxvlrhjhaw5pynnlcnzlci5qyxzh) | `9743% <0%> (-257%)` | `21% <0%> (-1%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9518% <0%> (-214%)` | `5% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvzglzcg9zywjszxmvtglzdenvbxbvc2l0zurpc3bvc2fibguuamf2yq) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [tivex/internal/operators/single/singletimeoutjava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3npbmdszs9taw5nbgvuaw1lb3v0lmphdme) | `9833% <0%> (-167%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9402% <0%> (-164%)` | `2% <0%> (ø)` | ||  and [16 more](https://codecovio/gh/reactivex/rxjava/pull/6544/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&elfooter) last update [fb372261404b82](https://codecovio/gh/reactivex/rxjava/pull/6544?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,"2x fix npe when debouncing empty source **background** related issue #6558 cherry pick of #6559 for 2x versiondebounce with selector on the empty `observable` leads to npeit happens because of `debounceobserver#debouncer` field is set up only when `onnext` is called when `onnext` isnt called at all like when debouncing `observableempty()` we get a null reference from `debouncer` and call `emit` on `null` which actually leads to npe**change**wrap `emit` call with null check both in `observabledebounce` and `flowabledebounce`**test plan**to check `observable`:```/gradlew test --tests ""ioreactivexinternaloperatorsobservableobservabledebouncetestdebounceonempty""````to check `flowable`:```/gradlew test --tests ""ioreactivexinternaloperatorsflowableflowabledebouncetestdebounceonempty""```` # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&elh1) report> merging [#6560](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&eldesc) into [2x](https://codecovio/gh/reactivex/rxjava/commit/67b9cf6ac86907e83044e516b82f6594409b091c?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6560/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #6560      +/-   ##- coverage     9825%   9824%   -002%     - complexity     6334     6337       +3       files           677      677                lines         45486    45488       +2       branches       6319     6321       +2     - hits          44691    44688       -3     - misses          249      252       +3     - partials        546      548       +2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/operators/flowable/flowabledebouncejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrgvib3vuy2uuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [ernal/operators/observable/observabledebouncejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszurlym91bmnllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% <0%> (-58%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl3bhcmfsbgvsl1bhcmfsbgvsumvkdwnlrnvsbc5qyxzh) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbtaw5nbguuamf2yq) | `888% <0%> (-299%)` | `2% <0%> (ø)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `961% <0%> (-26%)` | `6% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2nvbxbszxrhymxll0nvbxbszxrhymxltwvyz2uuamf2yq) | `9642% <0%> (-239%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrnjvbul0zxjhymxllmphdme) | `9411% <0%> (-214%)` | `5% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszvdpbmrvdy5qyxzh) | `98% <0%> (-2%)` | `3% <0%> (ø)` | || [x/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxluhvibglzac5qyxzh) | `9665% <0%> (-168%)` | `13% <0%> (ø)` | ||  and [21 more](https://codecovio/gh/reactivex/rxjava/pull/6560/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&elfooter) last update [67b9cf6030c253](https://codecovio/gh/reactivex/rxjava/pull/6560?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
1,0,0,0,0,0,1,0,2x: observableblockingsubscribe compares with wrong object it should compare the terminated instance with the value received from the blocking queuefixes: #6576 related: #6577  
1,0,0,0,0,1,1,0,3x: fix many operators swallowing undeliverable exceptions fix many operators to emit the collected exception in case of a cancel/dispose call to the plugin error handler (ie becoming undeliverable excptions)in addition the terminal event/error delivery has been unified in many other operators so that the terminal-indicator exception is never leakedthere will be a separate pr about cleaning up the `addthrowable` usage cases (#6611)fixes: #6587 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elh1) report> merging [#6612](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/28e24dc23b35d92cc9710ebc05bf69f2e0d69879?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `979%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6612/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6612      +/-   ##- coverage     9817%   9815%   -002%     - complexity     6180     6186       +6       files           678      678                lines         44910    44771     -139       branches       6214     6172      -42     - hits          44091    43947     -144     - misses          275      279       +4     - partials        544      545       +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/operators/flowable/flowablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [nal/operators/mixed/observableconcatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbtaw5nbguuamf2yq) | `100% <100%> (ø)` | `3 <0> (ø)` | :arrow_down: || [/operators/mixed/flowableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwq29tcgxldgfibguuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [al/operators/flowable/flowablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxltwvyz2vxaxrou2luz2xllmphdme) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: || [ava/io/reactivex/observers/serializedobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvb2jzzxj2zxjzl1nlcmlhbgl6zwrpynnlcnzlci5qyxzh) | `100% <100%> (ø)` | `27 <1> (ø)` | :arrow_down: || [ators/observable/observableflatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszuzsyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9571% <100%> (-024%)` | `2 <0> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl29ic2vydmfibguvt2jzzxj2ywjszu1lcmdlv2l0afnpbmdszs5qyxzh) | `9907% <100%> (-093%)` | `2 <0> (ø)` | || [va/io/reactivex/internal/util/atomicthrowablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9bdg9tawnuahjvd2fibguuamf2yq) | `100% <100%> (ø)` | `23 <15> (+15)` | :arrow_up: || [lowable/flowableflatmapcompletablecompletablejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hcenvbxbszxrhymxlq29tcgxldgfibguuamf2yq) | `9615% <100%> (-024%)` | `3 <0> (ø)` | || [ternal/operators/mixed/flowableswitchmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlu3dpdgnotwfwtwf5ymuuamf2yq) | `100% <100%> (ø)` | `2 <0> (ø)` | :arrow_down: ||  and [59 more](https://codecovio/gh/reactivex/rxjava/pull/6612/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&elfooter) last update [28e24dc822145d](https://codecovio/gh/reactivex/rxjava/pull/6612?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || nice ||
1,0,0,0,0,1,1,1,2x: fix blockingiterable hang when force-disposed when the iterator was cast to `disposable` and disposed the subsequent `hasnext` would block indefinitely that interface is not intended to be part of the public api and `iterator` in general does not support any form of official cancellation (unlike stream) this pr makes sure that if that dispose is called it unblocks the iteratorresolves #6625  
1,0,0,1,0,1,1,1,3x: remove vararg overloads for combinelatest in observable + flowable started removing the vararg function from #6634 hmm after looking at the tests the varag variant for `combinelatestdelayerror` might be useful since there are no 2-x overloads available what do you think? || let me guess intellij refactor? || the varargs is a convenience over the array variant so `combinelatestdelayerror`s can go || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&elh1) report> merging [#6635](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/97790c6112810197c1d418a17da79c2a839d3e8b?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6635/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6635      +/-   ##- coverage     9816%   9816%   -001%       complexity     6182     6182                files           678      678                lines         44801    44795       -6       branches       6177     6177              - hits          43981    43974       -7     - misses          278      281       +3     + partials        542      540       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `562 <0> (-3)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <100%> (ø)` | `538 <0> (-2)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8888% <0%> (-556%)` | `2% <0%> (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9658% <0%> (-244%)` | `51% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% <0%> (-186%)` | `39% <0%> (-1%)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9679% <0%> (-107%)` | `5% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8828% <0%> (-079%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9489% <0%> (-073%)` | `2% <0%> (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9631% <0%> (-062%)` | `6% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6635/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&elfooter) last update [97790c6d56dc2e](https://codecovio/gh/reactivex/rxjava/pull/6635?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: avoid using systemgetproperties() due to security restrictions change the code in the `schedulerpoolfactory` to use `systemgetproperty` directly also fix property names to `rx3` as now both v2 and v3 could run togetherfixes #6636 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elh1) report> merging [#6637](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/97790c6112810197c1d418a17da79c2a839d3e8b?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6637/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eltree)```diff@@             coverage diff             @@##                3x   #6637      +/-   ##+ coverage     9816%   982%   +003%     - complexity     6182    6195      +13       files           678     678                lines         44801   44806       +5       branches       6177    6177              + hits          43981   44002      +21     + misses          278     276       -2     + partials        542     528      -14```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava3/internal/schedulers/computationschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0nvbxb1dgf0aw9uu2nozwr1bgvylmphdme) | `9753% <ø> (ø)` | `14 <0> (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <ø> (ø)` | `540 <0> (ø)` | :arrow_down: || [xjava3/internal/schedulers/newthreadschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl05ld1rocmvhzfnjagvkdwxlci5qyxzh) | `100% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: || [va/io/reactivex/rxjava3/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zy2hlzhvszxjzl1njagvkdwxlcnmuamf2yq) | `100% <ø> (ø)` | `11 <0> (ø)` | :arrow_down: || [x/rxjava3/internal/schedulers/singleschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1npbmdszvnjagvkdwxlci5qyxzh) | `9294% <ø> (ø)` | `15 <0> (ø)` | :arrow_down: || [tivex/rxjava3/internal/schedulers/ioschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0lvu2nozwr1bgvylmphdme) | `8936% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `565 <1> (ø)` | :arrow_down: || [ava3/internal/schedulers/schedulerpoolfactoryjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl1njagvkdwxlclbvb2xgywn0b3j5lmphdme) | `100% <100%> (ø)` | `19 <6> (+6)` | :arrow_up: || [main/java/io/reactivex/rxjava3/core/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1njagvkdwxlci5qyxzh) | `100% <100%> (ø)` | `11 <0> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8819% <0%> (-625%)` | `2% <0%> (ø)` | ||  and [25 more](https://codecovio/gh/reactivex/rxjava/pull/6637/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&elfooter) last update [97790c62e7246d](https://codecovio/gh/reactivex/rxjava/pull/6637?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ok ||
1,0,0,0,0,0,1,0,3x: update javadoc for observeon to mention its eagerness update javadoc to reflect the eagerness property of `observeon` in `flowable` and `observable` classesresolves #6697 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&elh1) report> merging [#6700](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/b9727da4fec4c16ce15813b7be3df09f86eb2af0?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6700/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6700      +/-   ##+ coverage     9812%   9814%   +001%     + complexity     6189     6188       -1       files           677      677                lines         44657    44657                branches       6170     6170              + hits          43821    43827       +6     + misses          300      294       -6       partials        536      536```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <ø> (ø)` | `559 <0> (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <ø> (ø)` | `537 <0> (ø)` | :arrow_down: || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% <0%> (-313%)` | `2% <0%> (ø)` | || [activex/rxjava3/internal/queue/spscarrayqueuejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9xdwv1zs9tchnjqxjyyxlrdwv1zs5qyxzh) | `9761% <0%> (-239%)` | `22% <0%> (-1%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `96% <0%> (-15%)` | `10% <0%> (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% <0%> (-114%)` | `3% <0%> (ø)` | || [operators/observable/observablemergewithmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrotwf5ymuuamf2yq) | `9909% <0%> (-091%)` | `2% <0%> (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9708% <0%> (-065%)` | `6% <0%> (ø)` | ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6700/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&elfooter) last update [b9727dab0e26a3](https://codecovio/gh/reactivex/rxjava/pull/6700?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! much appreciated!would you like to backport the changes to the 2x branch? ||
1,0,0,0,0,0,1,0,3x: add maybe marble diagrams (14 cases) related #5806----![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybezipipng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybezipnpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeziparraypng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybezipwithpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecontainsopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeunsubscribeonpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonterminatedetachpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybecastpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeliftpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedooneventpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaysubscriptiontpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaysubscriptiontspng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedelaysubscriptionppng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&elh1) report> merging [#6730](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/e65cd8d19986ac33b3081e7e6f81b742ec95e936?srcpr&eldesc) will **decrease** coverage by `007%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6730/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6730      +/-   ##- coverage     9818%   9811%   -008%       complexity     6190     6190                files           677      677                lines         44663    44663                branches       6171     6171              - hits          43852    43820      -32     - misses          285      309      +24     - partials        526      534       +8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `172 <0> (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9029% <0%> (-712%)` | `6% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `927% <0%> (-219%)` | `2% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% <0%> (-117%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9625% <0%> (-107%)` | `5% <0%> (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `96% <0%> (-1%)` | `10% <0%> (ø)` | || [3/internal/operators/flowable/flowablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvqdwjsaxnolmphdme) | `9753% <0%> (-099%)` | `16% <0%> (-1%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9665% <0%> (-084%)` | `3% <0%> (ø)` | ||  and [11 more](https://codecovio/gh/reactivex/rxjava/pull/6730/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&elfooter) last update [e65cd8d6efed6f](https://codecovio/gh/reactivex/rxjava/pull/6730?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,3x: [java 8] upgrade to java 8 add flowablefromx operators this pr upgrades rxjava to use and compile with java 8- build target set to 8- animalsniffer set to 8- javadocs link to the official jdk set to 8- implemented operators:  - `flowablefromoptional`  - `flowablefromcompletionstage`  - `flowablefromstream`- applied `@safevarargs` to many methods- created marblesrelated #6695![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromoptionalfpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromcompletionstagefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/fromstreamfpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&elh1) report> merging [#6765](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/f96821f14c91752d323877a7874f480fd6b02f12?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `9938%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6765/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6765      +/-   ##+ coverage     9819%   9821%   +001%     - complexity     6196     6205       +9       files           679      681       +2       lines         44622    44784     +162       branches       6138     6164      +26     + hits          43817    43983     +166     + misses          283      281       -2     + partials        522      520       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/reactivex/rxjava3/observers/basetestconsumerjava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9vynnlcnzlcnmvqmfzzvrlc3rdb25zdw1lci5qyxzh) | `9723% <ø> (ø)` | `69 <0> (ø)` | :arrow_down: || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `562 <3> (+3)` | :arrow_up: || [va3/internal/jdk8/flowablefromcompletionstagejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrnjvbunvbxbszxrpb25tdgfnzs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [ivex/rxjava3/internal/jdk8/flowablefromstreamjava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l0zsb3dhymxlrnjvbvn0cmvhbs5qyxzh) | `9923% <9923%> (ø)` | `5 <5> (?)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8591% <0%> (-916%)` | `2% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9416% <0%> (-25%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9418% <0%> (-233%)` | `2% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9204% <0%> (-114%)` | `3% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6765/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&elfooter) last update [f96821f3c19f8d](https://codecovio/gh/reactivex/rxjava/pull/6765?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || with this move there are many we can help || should remove the usage of `optionalof` with `optionalofnullable` ||
1,0,1,0,0,0,1,0,add functionalinterface annotations resolves #6768 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elh1) report> merging [#6773](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/6ba932c9a3752c6d85d65bd2292c3a47cab64fd6?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6773/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eltree)```diff@@             coverage diff             @@##               3x    #6773      +/-   ##+ coverage     982%   9821%   +<01%     - complexity    6183     6190       +7       files          681      681                lines        44776    44776                branches      6164     6164              + hits         43973    43977       +4     + misses         280      279       -1     + partials       523      520       -3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9366% <0%> (-282%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9047% <0%> (-239%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `901% <0%> (-105%)` | `2% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% <0%> (-095%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9743% <0%> (-086%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpynnlcnzlt24uamf2yq) | `9665% <0%> (-084%)` | `3% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `9583% <0%> (-084%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9416% <0%> (-073%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `936% <0%> (-059%)` | `2% <0%> (ø)` | || [ternal/operators/flowable/flowablewindowtimedjava](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvxaw5kb3duaw1lzc5qyxzh) | `9662% <0%> (-057%)` | `5% <0%> (ø)` | ||  and [14 more](https://codecovio/gh/reactivex/rxjava/pull/6773/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&elfooter) last update [6ba932c23ad4b9](https://codecovio/gh/reactivex/rxjava/pull/6773?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,1,1,1,1,diamond operators in unit tests observable package hello in this pull request ive changed all ide marked explicit types with diamond operator affected package is internal/operators/observable there is one test fail in completabletestrepeatnormal  but diamond is not the cause there is last stack entry: javalangassertionerror: expected:<6> but was:<5>	at orgjunitassertfail(assertjava:88)this pr is part of  #6767 issue resolving # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&elh1) report> merging [#6786](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/dba670554c69d6c09d28643505880c1a468af3db?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6786/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6786      +/-   ##+ coverage     9824%   9827%   +003%     - complexity     6286     6288       +2       files           696      696                lines         45390    45390                branches       6233     6233              + hits          44592    44609      +17     + misses          277      268       -9     + partials        521      513       -8```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% <0%> (-095%)` | `2% <0%> (ø)` | || [va3/internal/operators/parallel/parallelrunonjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxsdw5pbi5qyxzh) | `9661% <0%> (-049%)` | `8% <0%> (ø)` | || [a/io/reactivex/rxjava3/subjects/replaysubjectjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9zdwjqzwn0cy9szxbsyxltdwjqzwn0lmphdme) | `9709% <0%> (-042%)` | `50% <0%> (ø)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `8963% <0%> (-034%)` | `3% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9829% <0%> (ø)` | `2% <0%> (ø)` | :arrow_down: || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9591% <0%> (+031%)` | `3% <0%> (ø)` | :arrow_down: || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9773% <0%> (+032%)` | `6% <0%> (ø)` | :arrow_down: || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9583% <0%> (+052%)` | `2% <0%> (ø)` | :arrow_down: || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9368% <0%> (+052%)` | `3% <0%> (ø)` | :arrow_down: ||  and [8 more](https://codecovio/gh/reactivex/rxjava/pull/6786/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&elfooter) last update [dba670541ad820](https://codecovio/gh/reactivex/rxjava/pull/6786?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,3x: xprocessoroffer to throw npe immediately make `offer` throw a `nullpointerexception` immediately instead of turning it into an error signal in addition have `multicastprocessoroffer` throw an `illegalstateexception` if called when the processor is in fusion moderesolves #6794 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elh1) report> merging [#6799](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3d00eb188bad1d49aa058e896ad9d1b5026eba7d?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6799/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6799      +/-   ##- coverage     9821%   9817%   -005%       complexity     6375     6375                files           711      711                lines         46217    46214       -3       branches       6329     6330       +1     - hits          45393    45370      -23     - misses          298      309      +11     - partials        526      535       +9```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9802% <100%> (+144%)` | `49 <4> (-2)` | :arrow_down: || [reactivex/rxjava3/processors/publishprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1b1ymxpc2hqcm9jzxnzb3iuamf2yq) | `100% <100%> (ø)` | `42 <4> (-1)` | :arrow_down: || [activex/rxjava3/processors/multicastprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl011bhrpy2fzdfbyb2nlc3nvci5qyxzh) | `9868% <100%> (+132%)` | `84 <4> (+1)` | :arrow_up: || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% <0%> (-1966%)` | `2% <0%> (ø)` | || [observable/observablewindowsubscribeinterceptjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93u3vic2nyawjlsw50zxjjzxb0lmphdme) | `875% <0%> (-125%)` | `4% <0%> (-1%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9285% <0%> (-318%)` | `2% <0%> (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9181% <0%> (-273%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9114% <0%> (-261%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablewindowjava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlv2luzg93lmphdme) | `9818% <0%> (-182%)` | `3% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% <0%> (-175%)` | `2% <0%> (ø)` | ||  and [18 more](https://codecovio/gh/reactivex/rxjava/pull/6799/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&elfooter) last update [3d00eb1482bd2b](https://codecovio/gh/reactivex/rxjava/pull/6799?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,3x: remove a pointless observableconcatmapiterable overload remove the `concatmapiterable(function int)` overload as there is no buffering involved with the operatorresolves #6828  
0,0,0,0,0,1,0,0,3x: enable javac parameter saving in class files related #6832 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&elh1) report> merging [#6839](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/c67263fffe26a0c4970fd34789766fb18a7411a8?srcpr&eldesc) will **decrease** coverage by `004%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6839/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&eltree)```diff@@             coverage diff             @@##                3x   #6839      +/-   ##- coverage     9824%   982%   -005%     - complexity     6376    6378       +2       files           715     715                lines         46532   46532                branches       6388    6388              - hits          45715   45695      -20     - misses          293     310      +17     - partials        524     527       +3```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% <0%> (-1881%)` | `2% <0%> (ø)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% <0%> (-826%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelreducefulljava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxszwr1y2vgdwxslmphdme) | `9108% <0%> (-397%)` | `2% <0%> (ø)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9244% <0%> (-291%)` | `2% <0%> (ø)` | || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% <0%> (-247%)` | `50% <0%> (ø)` | || [perators/single/singleflatmapiterableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszuzsyxrnyxbjdgvyywjszuzsb3dhymxllmphdme) | `95% <0%> (-167%)` | `2% <0%> (ø)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [nternal/operators/parallel/parallelsortedjoinjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxtb3j0zwrkb2lulmphdme) | `9489% <0%> (-073%)` | `2% <0%> (ø)` | || [ternal/operators/observable/observablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlr3jvdxbces5qyxzh) | `9508% <0%> (-055%)` | `2% <0%> (ø)` | || [/reactivex/rxjava3/processors/replayprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl1jlcgxhevbyb2nlc3nvci5qyxzh) | `9738% <0%> (-041%)` | `52% <0%> (ø)` | ||  and [11 more](https://codecovio/gh/reactivex/rxjava/pull/6839/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&elfooter) last update [c67263f74cd343](https://codecovio/gh/reactivex/rxjava/pull/6839?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: fix method argument naming across types make method argument naming consistent between the base reactive classes adjust some of the naming for allin addition the null-check was missing from `blockingmostrecent`resolves #6832 the utility program has to be run manually to list the inconsistencies the remaining inconsistency is due to `merge` because its argument is `sources` for `flowable`/`observable` but `source` for `single`/`maybe` nested # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&elh1) report> merging [#6853](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/021d07b4c602a8c86605f1e218aa81466b5f36b8?srcpr&eldesc) will **decrease** coverage by `013%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6853/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6853      +/-   ##- coverage     9835%   9822%   -014%     + complexity     6379     6378       -1       files           715      715                lines         46522    46524       +2       branches       6387     6387              - hits          45758    45697      -61     - misses          268      298      +30     - partials        496      529      +33```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `576 <15> (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <100%> (ø)` | `178 <10> (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `120 <14> (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `151 <14> (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <100%> (ø)` | `551 <26> (ø)` | :arrow_down: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `8732% <0%> (-916%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8809% <0%> (-874%)` | `2% <0%> (ø)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9145% <0%> (-77%)` | `2% <0%> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% <0%> (-459%)` | `2% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6853/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&elfooter) last update [021d07b4ed4635](https://codecovio/gh/reactivex/rxjava/pull/6853?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,3x: add onerrorcomplete to flowable observable and single add the `onerrorcomplete()` and `onerrorcomplete(predicate)` operators to the remaining base classesalso created the missing marble for `maybeonerrorcomplete` + 1related #6852 #5806 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/flowableonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/observableonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleonerrorcompletefpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorcompletepng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybeonerrorcompletefpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elh1) report> merging [#6867](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/13473da61366945f49aed5a29729841836abf2ab?srcpr&eldesc) will **decrease** coverage by `002%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6867/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6867      +/-   ##- coverage     9824%   9821%   -003%     - complexity     6417     6430      +13       files           716      719       +3       lines         46668    46744      +76       branches       6397     6401       +4     + hits          45847    45911      +64     - misses          295      309      +14     + partials        526      524       -2```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `185 <0> (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `157 <2> (+2)` | :arrow_up: || [al/operators/flowable/flowableonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvpbkvycm9yq29tcgxldguuamf2yq) | `100% <100%> (ø)` | `2 <2> (?)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <100%> (ø)` | `578 <2> (+2)` | :arrow_up: || [perators/observable/observableonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlt25fcnjvcknvbxbszxrllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <100%> (ø)` | `553 <2> (+2)` | :arrow_up: || [internal/operators/maybe/maybeonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvpbkvycm9yq29tcgxldguuamf2yq) | `100% <100%> (ø)` | `2 <1> (ø)` | :arrow_down: || [ternal/operators/single/singleonerrorcompletejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvc2luz2xll1npbmdszu9urxjyb3jdb21wbgv0zs5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `7948% <0%> (-2052%)` | `2% <0%> (ø)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `838% <0%> (-1198%)` | `2% <0%> (ø)` | ||  and [26 more](https://codecovio/gh/reactivex/rxjava/pull/6867/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&elfooter) last update [13473da58dbf8a](https://codecovio/gh/reactivex/rxjava/pull/6867?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: add single/completable retryuntil + marbles `retryuntil` was missing from `single` and `completable`added marble for `maybe` as wellrelated #6852 #5806![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/singleretryuntilpng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/mayberetryuntilpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elh1) report> merging [#6869](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/320a675ec124cde872124d3bafd685e6a8998d0a?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6869/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6869      +/-   ##+ coverage     9825%   9829%   +004%     - complexity     6430     6433       +3       files           719      719                lines         46746    46750       +4       branches       6401     6401              + hits          45929    45953      +24     + misses          293      283      -10     + partials        524      514      -10```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `185 <0> (ø)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `126 <1> (+1)` | :arrow_up: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <100%> (ø)` | `158 <1> (+1)` | :arrow_up: || [eactivex/rxjava3/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wcm9jzxnzb3jzl0jlagf2aw9yuhjvy2vzc29ylmphdme) | `9655% <0%> (-247%)` | `50% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9157% <0%> (-211%)` | `3% <0%> (ø)` | || [ternal/operators/observable/observablepublishjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxluhvibglzac5qyxzh) | `9729% <0%> (-181%)` | `16% <0%> (-1%)` | || [ternal/operators/flowable/flowablesubscribeonjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtdwjzy3jpymvpbi5qyxzh) | `9661% <0%> (-17%)` | `2% <0%> (ø)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9439% <0%> (-141%)` | `3% <0%> (ø)` | || [ernal/operators/flowable/flowablefromiterablejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgcm9tsxrlcmfibguuamf2yq) | `9518% <0%> (-107%)` | `5% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9531% <0%> (-105%)` | `2% <0%> (ø)` | ||  and [13 more](https://codecovio/gh/reactivex/rxjava/pull/6869/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&elfooter) last update [320a675fab5b58](https://codecovio/gh/reactivex/rxjava/pull/6869?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,1,3x: add maybedematerialize add the `dematerialize` operator to `maybe` to be in sync with the other classesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/maybedematerializepng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&elh1) report> merging [#6871](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/53ba4352c447562ccbba507f4d4f5493a07ab889?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6871/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6871      +/-   ##+ coverage     9827%   9829%   +001%     - complexity     6446     6447       +1       files           722      723       +1       lines         46783    46817      +34       branches       6401     6404       +3     + hits          45977    46019      +42     + misses          289      282       -7     + partials        517      516       -1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <ø> (ø)` | `160 <0> (ø)` | :arrow_down: || [3/internal/operators/maybe/maybedematerializejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvezw1hdgvyawfsaxpllmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <100%> (ø)` | `188 <1> (+1)` | :arrow_up: || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9154% <0%> (-564%)` | `2% <0%> (ø)` | || [/operators/flowable/flowableblockingsubscribejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvcbg9ja2luz1n1ynnjcmlizs5qyxzh) | `9302% <0%> (-466%)` | `10% <0%> (-1%)` | || [ctivex/rxjava3/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc91dglsl1f1zxvlrhjhaw5izwxwzxiuamf2yq) | `9722% <0%> (-278%)` | `56% <0%> (-2%)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9594% <0%> (-136%)` | `2% <0%> (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9611% <0%> (-13%)` | `6% <0%> (ø)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9604% <0%> (-113%)` | `6% <0%> (ø)` | ||  and [17 more](https://codecovio/gh/reactivex/rxjava/pull/6871/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&elfooter) last update [53ba435f41fb2e](https://codecovio/gh/reactivex/rxjava/pull/6871?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,1,1,0,3x: add completablesequenceequal the operator was available in all other classesrelated #6852 ![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completablesequenceequalpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&elh1) report> merging [#6884](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/9283700d3a04d495b0845f947ed119c1ed10ee94?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6884/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6884      +/-   ##- coverage     9829%   9828%   -002%       complexity     6548     6548                files           735      735                lines         47163    47166       +3       branches       6432     6432              - hits          46359    46356       -3     - misses          289      294       +5     - partials        515      516       +1```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <100%> (ø)` | `135 <1> (+1)` | :arrow_up: || [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `8644% <0%> (-848%)` | `24% <0%> (-2%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `9295% <0%> (-282%)` | `2% <0%> (ø)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9375% <0%> (-209%)` | `2% <0%> (ø)` | || [/internal/disposables/listcompositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9kaxnwb3nhymxlcy9maxn0q29tcg9zaxrlrglzcg9zywjszs5qyxzh) | `98% <0%> (-2%)` | `34% <0%> (-1%)` | || [ava3/internal/operators/parallel/paralleljoinjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvcgfyywxszwwvugfyywxszwxkb2lulmphdme) | `9166% <0%> (-152%)` | `3% <0%> (ø)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9644% <0%> (-13%)` | `6% <0%> (ø)` | || [rnal/operators/observable/observableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlu3dpdgnotwfwlmphdme) | `9263% <0%> (-106%)` | `3% <0%> (ø)` | || [rxjava3/internal/schedulers/executorschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9zy2hlzhvszxjzl0v4zwn1dg9yu2nozwr1bgvylmphdme) | `9589% <0%> (-092%)` | `10% <0%> (ø)` | || [/operators/observable/observablecombinelatestjava](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq29tymluzuxhdgvzdc5qyxzh) | `9617% <0%> (-064%)` | `6% <0%> (ø)` | ||  and [12 more](https://codecovio/gh/reactivex/rxjava/pull/6884/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&elfooter) last update [928370012aa0dc](https://codecovio/gh/reactivex/rxjava/pull/6884?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,1,0,0,0,1,0,3x: fix marble dimensions add program that checks them resolves #6872also added 2 diagrams missing![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/switchmapmaybeopng)![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/switchmapmaybedelayerroropng)and fixed 1 diagram wrongly exported![image](https://rawgithubcom/wiki/reactivex/rxjava/images/rx-operators/completableconcatarraydelayerrorpng) # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&elh1) report> merging [#6890](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/2d8660e070fe65b8089855ba1a58ef49d7c1b70a?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6890/graphs/treesvg?width650&tokenwtcc2htjm2&height150&srcpr)](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6890      +/-   ##+ coverage     9822%   9824%   +001%       complexity     6594     6594                files           739      741       +2       lines         47329    47334       +5       branches       6433     6432       -1     + hits          46489    46501      +12     + misses          315      304      -11     - partials        525      529       +4```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `100% <ø> (ø)` | `591 <0> (ø)` | :arrow_down: || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `100% <ø> (ø)` | `209 <0> (-1)` | :arrow_down: || [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `100% <ø> (ø)` | `140 <0> (ø)` | :arrow_down: || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `100% <ø> (ø)` | `188 <0> (ø)` | :arrow_down: || [o/reactivex/rxjava3/parallel/parallelflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9wyxjhbgxlbc9qyxjhbgxlbezsb3dhymxllmphdme) | `100% <ø> (ø)` | `57 <0> (ø)` | :arrow_down: || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `100% <ø> (ø)` | `561 <0> (ø)` | :arrow_down: || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `899% <0%> (-826%)` | `2% <0%> (ø)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `8888% <0%> (-635%)` | `2% <0%> (ø)` | || [nternal/operators/flowable/flowablescalarxmapjava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvty2fsyxjytwfwlmphdme) | `9655% <0%> (-345%)` | `6% <0%> (-1%)` | || [l/operators/observable/observableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hce1hewjllmphdme) | `845% <0%> (-282%)` | `2% <0%> (ø)` | ||  and [28 more](https://codecovio/gh/reactivex/rxjava/pull/6890/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&elfooter) last update [2d8660e3a5e88e](https://codecovio/gh/reactivex/rxjava/pull/6890?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,0,1,1,1,3x: fix replay() not resetting when the connection is disposed disposing a `replay()`-based connectable should reset the operator to its fresh state this was supposed to happen but the relevant code changes were not enabled the pr fixes this for both `flowable` and `observable`-based implementationsthe `publish`-based connectables work as intendedfixes #6920 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elh1) report> merging [#6921](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/042dee38fc9b1655f68a2296ee94035ba5e6efa1&eldesc) will **decrease** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6921/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6921      +/-   ##- coverage     9965%   9965%   -001%     + complexity     6670     6669       -1       files           742      742                lines         47217    47220       +3       branches       6367     6367                hits          47055    47055              - misses           48       50       +2     - partials        114      115       +1     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% <000%> (-459%)` | `200% <000%> (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9444% <000%> (-239%)` | `200% <000%> (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% <000%> (-233%)` | `200% <000%> (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwtwf5ymuuamf2yq) | `9585% <000%> (-208%)` | `200% <000%> (ø%)` | || [ternal/operators/completable/completablemergejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvy29tcgxldgfibguvq29tcgxldgfibgvnzxjnzs5qyxzh) | `9729% <000%> (-136%)` | `200% <000%> (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% <000%> (-108%)` | `2100% <000%> (-100%)` | || [perators/observable/observablemergewithsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxltwvyz2vxaxrou2luz2xllmphdme) | `9905% <000%> (-095%)` | `200% <000%> (ø%)` | || [ternal/operators/observable/observableflatmapjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcc5qyxzh) | `9817% <000%> (ø)` | `300% <000%> (ø%)` | :arrow_up: || [3/internal/operators/flowable/flowablegroupbyjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvhcm91cej5lmphdme) | `9968% <000%> (+031%)` | `300% <000%> (ø%)` | :arrow_up: || [operators/flowable/flowableconcatmapschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdb25jyxrnyxbty2hlzhvszxiuamf2yq) | `9960% <000%> (+039%)` | `400% <000%> (ø%)` | :arrow_up: ||  and [7 more](https://codecovio/gh/reactivex/rxjava/pull/6921/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&elfooter) last update [042dee332f5dbb](https://codecovio/gh/reactivex/rxjava/pull/6921?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,0,0,1,0,update image urls to non-transparent version updated image urls to use non-transparent ones as per #6883resolves #6883 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elh1) report> merging [#6944](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/a2128ae70dc98410d3b009943cd46f1b0e73049b&eldesc) will **increase** coverage by `000%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6944/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eltree)```diff@@            coverage diff            @@##                3x    #6944   +/-   ##  coverage     9963%   9964%           - complexity     6666     6667    +1       files           742      742             lines         47220    47220             branches       6367     6367           + hits          47049    47051    +2     + misses           54       50    -4     - partials        117      119    +2     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [in/java/io/reactivex/rxjava3/core/completablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0nvbxbszxrhymxllmphdme) | `10000% <ø> (ø)` | `14000 <000> (ø)` | || [/main/java/io/reactivex/rxjava3/core/flowablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll0zsb3dhymxllmphdme) | `10000% <ø> (ø)` | `59500 <000> (ø)` | || [src/main/java/io/reactivex/rxjava3/core/maybejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll01hewjllmphdme) | `10000% <ø> (ø)` | `21400 <000> (ø)` | || [ain/java/io/reactivex/rxjava3/core/observablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll09ic2vydmfibguuamf2yq) | `10000% <ø> (ø)` | `56500 <000> (ø)` | || [rc/main/java/io/reactivex/rxjava3/core/singlejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9jb3jll1npbmdszs5qyxzh) | `10000% <ø> (ø)` | `19600 <000> (ø)` | || [activex/rxjava3/flowables/connectableflowablejava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9mbg93ywjszxmvq29ubmvjdgfibgvgbg93ywjszs5qyxzh) | `10000% <ø> (ø)` | `1200 <000> (ø)` | || [operators/flowable/blockingflowablemostrecentjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvqmxvy2tpbmdgbg93ywjszu1vc3rszwnlbnquamf2yq) | `10000% <ø> (ø)` | `200 <000> (ø)` | || [ernal/operators/flowable/blockingflowablenextjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvqmxvy2tpbmdgbg93ywjszu5lehquamf2yq) | `9836% <ø> (ø)` | `200 <000> (ø)` | || [ators/observable/blockingobservablemostrecentjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9cbg9ja2luz09ic2vydmfibgvnb3n0umvjzw50lmphdme) | `10000% <ø> (ø)` | `200 <000> (ø)` | || [l/operators/observable/blockingobservablenextjava](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9cbg9ja2luz09ic2vydmfibgvozxh0lmphdme) | `9836% <ø> (ø)` | `200 <000> (ø)` | ||  and [22 more](https://codecovio/gh/reactivex/rxjava/pull/6944/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&elfooter) last update [a2128ae96573bc](https://codecovio/gh/reactivex/rxjava/pull/6944?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks the new v3 images load in properly || glad to help ||
1,0,0,1,1,1,1,1,suppress undeliverableexception handling in tests (#6987) i used a junit testrule to suppress handling of undeliverableexception for test methods annotated with @suppressundeliverable this approach is coarser than the suggested approach (it suppresses the handling of all undeliverableexceptions for the entire annotated test method)i thought this approach was clean but i can switch to the suggested approach if preferredi added @suppressundeliverable to most tests that were logging undeliverableexceptions with the test method in the stack trace this may be more suppression than was required so just let me knowfixes #6987 # [codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elh1) report> merging [#6996](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eldesc) into [3x](https://codecovio/gh/reactivex/rxjava/commit/3f386be351eb7c62379d124a2f65894a9961e604&eldesc) will **decrease** coverage by `005%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/6996/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eltree)```diff@@             coverage diff              @@##                3x    #6996      +/-   ##- coverage     9957%   9951%   -006%     + complexity     6670     6667       -3       files           742      742                lines         47270    47270                branches       6373     6373              - hits          47070    47042      -28     - misses           92      107      +15     - partials        108      121      +13     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [xjava3/internal/observers/futuremultiobserverjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vynnlcnzlcnmvrnv0dxjltxvsdglpynnlcnzlci5qyxzh) | `9152% <000%> (-509%)` | `2600% <000%> (-100%)` | || [tivex/rxjava3/internal/jdk8/parallelcollectorjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9qzgs4l1bhcmfsbgvsq29sbgvjdg9ylmphdme) | `9357% <000%> (-459%)` | `200% <000%> (ø%)` | || [rnal/operators/flowable/flowableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvgbgf0twfwu2luz2xllmphdme) | `9534% <000%> (-233%)` | `200% <000%> (ø%)` | || [tivex/rxjava3/disposables/compositedisposablejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9kaxnwb3nhymxlcy9db21wb3npdgveaxnwb3nhymxllmphdme) | `9814% <000%> (-186%)` | `3900% <000%> (-100%)` | || [internal/operators/flowable/flowableswitchmapjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvtd2l0y2hnyxauamf2yq) | `9858% <000%> (-142%)` | `300% <000%> (ø%)` | || [a3/internal/operators/flowable/flowablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvdcmvhdguuamf2yq) | `9773% <000%> (-130%)` | `600% <000%> (ø%)` | || [ava3/internal/operators/maybe/maybemergearrayjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvbwf5ymuvtwf5ymvnzxjnzufycmf5lmphdme) | `9887% <000%> (-113%)` | `600% <000%> (ø%)` | || [a3/internal/operators/flowable/flowablereplayjava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvzmxvd2fibguvrmxvd2fibgvszxbsyxkuamf2yq) | `9892% <000%> (-086%)` | `2100% <000%> (ø%)` | || [nternal/operators/observable/observablecreatejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlq3jlyxrllmphdme) | `9658% <000%> (-086%)` | `200% <000%> (ø%)` | || [/operators/observable/observableflatmapsinglejava](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvcnhqyxzhmy9pbnrlcm5hbc9vcgvyyxrvcnmvb2jzzxj2ywjszs9pynnlcnzhymxlrmxhde1hcfnpbmdszs5qyxzh) | `9761% <000%> (-080%)` | `200% <000%> (ø%)` | ||  and [6 more](https://codecovio/gh/reactivex/rxjava/pull/6996/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&elfooter) last update [3f386be2021748](https://codecovio/gh/reactivex/rxjava/pull/6996?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thanks! ||
1,0,0,1,0,1,1,1,2x: introduce property rx2scheduleruse- otime (#7154) fixes #7169 @akarnokd  i had to create a new `schedulertest` class because on the 2x branch the package did not match the package of `scheduler` therefore i could not access the field (package-private) || # [codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elh1) report> merging [#7170](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eldesc) (2c46d3e) into [2x](https://codecovio/gh/reactivex/rxjava/commit/f31aed36fd9d47edf0177164c54c64d4dc28c818?eldesc) (f31aed3) will **increase** coverage by `008%`> the diff coverage is `10000%`[![impacted file tree graph](https://codecovio/gh/reactivex/rxjava/pull/7170/graphs/treesvg?width650&height150&srcpr&tokenwtcc2htjm2)](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eltree)```diff@@             coverage diff              @@##                2x    #7170      +/-   ##+ coverage     9818%   9826%   +008%     - complexity     6345     6349       +4       files           677      677                lines         45553    45557       +4       branches       6342     6342              + hits          44724    44765      +41     + misses          263      254       -9     + partials        566      538      -28     ```| [impacted files](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/io/reactivex/schedulers/schedulersjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvc2nozwr1bgvycy9ty2hlzhvszxjzlmphdme) | `10000% <ø> (ø)` | `1100 <000> (ø)` | || [src/main/java/io/reactivex/schedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvu2nozwr1bgvylmphdme) | `10000% <10000%> (ø)` | `1300 <400> (+200)` | || [tivex/internal/schedulers/trampolineschedulerjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvc2nozwr1bgvycy9ucmftcg9saw5lu2nozwr1bgvylmphdme) | `9610% <000%> (-260%)` | `600% <000%> (ø%)` | || [ava/io/reactivex/processors/behaviorprocessorjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvchjvy2vzc29ycy9czwhhdmlvclbyb2nlc3nvci5qyxzh) | `9686% <000%> (-225%)` | `6000% <000%> (ø%)` | || [ernal/operators/flowable/flowableflatmapmaybejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlrmxhde1hce1hewjllmphdme) | `8888% <000%> (-145%)` | `200% <000%> (ø%)` | || [a/io/reactivex/internal/util/queuedrainhelperjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvdxrpbc9rdwv1zuryywlusgvscgvylmphdme) | `9861% <000%> (-139%)` | `5700% <000%> (-100%)` | || [perators/mixed/observableswitchmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvtd2l0y2hnyxbdb21wbgv0ywjszs5qyxzh) | `9894% <000%> (-106%)` | `300% <000%> (ø%)` | || [/operators/mixed/flowableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl0zsb3dhymxlq29uy2f0twfwq29tcgxldgfibguuamf2yq) | `9914% <000%> (-086%)` | `200% <000%> (ø%)` | || [internal/operators/flowable/flowableobserveonjava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl2zsb3dhymxll0zsb3dhymxlt2jzzxj2zu9ulmphdme) | `9665% <000%> (-056%)` | `300% <000%> (ø%)` | || [perators/mixed/observableconcatmapcompletablejava](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9pby9yzwfjdgl2zxgvaw50zxjuywwvb3blcmf0b3jzl21pegvkl09ic2vydmfibgvdb25jyxrnyxbdb21wbgv0ywjszs5qyxzh) | `9924% <000%> (ø)` | `300% <000%> (ø%)` | ||  and [19 more](https://codecovio/gh/reactivex/rxjava/pull/7170/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&elfooter) last update [f31aed32c46d3e](https://codecovio/gh/reactivex/rxjava/pull/7170?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||

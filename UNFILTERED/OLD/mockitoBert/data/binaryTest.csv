Util,Network,Interpreter,i18n,Logic,Test,IO,Security,corpus
1,1,1,1,1,1,1,0,"fix #128 : deep stubbing with generic responses in the call chain is not working   also i kind of like the original unit test in #128 i propose you include it in this pr it could be name like : `orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest` if you can amend the change ill merge the pr || done - not sure its exactly what you were asking for but i dont see other option at the moment || the final diff looks good to me !could you squash the 6 commits in a single one (in the same branch / pr) ? better for the history ) || btw you should be able to do that this way : ``` bashgit reset --soft head~6git commit --message""fixes issue #128 for deep stubs with mixed raw generics type""``` || i was off for few days - i see szczepan did the job so theres noting left for me :)btw happy new year!cheers || "
1,1,1,1,1,1,1,1,"make propertyandsetterinjection field sorting consistent #155 is caused by calling `collectionssort` with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type `[iterable integer number]` it gives `iterable  integer` and `iterable  number` but also an inconsistent `integer < number`im not sure its possible to sort consistently with a stateless `comparator` so this change switches to a `sortsupertypeslast` method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy `comparator` that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original orderfixes #155 wow nice pr thanks for diving in the problem !so i agree on the idea but ive mixed feelings on having a custom sort therealso i agree speed is not the real issue here anyway id prefer the algorithm to be deterministic || finally i like the comment in the commit messages though it would be better if the last 2 commit were amended properly :) || overall its really nice work :sparkles: i you think its possible to rewrite with a comparator and rewrite a clean history ill merge _asap_ :) || thanks ive rebased to clean up historyusing `comparator` is trickier id really prefer to do that and i spent some time thinking about what state could be calculated to allow pairwise comparison however this is essentially a topological sort and i cant think of a way to do this short of using a custom sort and then preparing a `comparator` that checks indexes in that versionactually checking now thats exactly the fallback suggested in [this stackoverflow answer](http://stackoverflowcom/questions/28099307/how-to-write-a-transitive-comparator-when-equality-implies-order-doesnt-matt):> the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation || mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose 2 things then :1 without comparator it would be better to externalize the sorting in some class instead of a method could be used like       ``` java   sorted  new orgmockitointernalutilreflectiontopologysorter()sort()   ```2 thanks for the amend i propose that the proper commits starts `fixes #155` like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release :)also tests are finethanks for the feedback and the interesting links :) || :star2: thanks for the modifications @josephw perfect pr :) || by the way do you have any remarks on the contributing guide (missing info style guideline git stuff etc) || its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over-emphasise:>  at least one commit message in the pr contains ""fixes #id""and suggest a template commit message> clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix-ups?thanks for the feedback -- everything else seemed specific enough that a review was the only way to pick it up || @josephw ok thanks for the feedback too || "
1,0,0,0,1,1,0,0,fixes #200 : argumentcaptorforclass is more friendly with generic types we modify the signature of `argumentcaptorfromclass(class<t>)` to better express the type relationship between the argument and the return type  there is no change to the behavior of the method  this change is to allow expressions such as:``` javaargumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```to type check which is desirable as a convenience to users of `argumentcaptor`we also add two tests to document this extension to the api both of which fail to compile without this change to `argumentcaptorfromclass`  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of `argumentcaptor` not its behavior almost perfect pr :)maybe the contributing guide is missing something here but the exemple `#id` should have been expended to the real gh issue number actually the commit message should be something like :```fixes #200 : tweak generic signature of argumentcaptorfromclass```ill merge it asap :)thanks for the pr by the way ! || i updated the contributing guide with an exemple :)if youre unsure how to rename the commit :``` bashgit commit --amendgit push --force``` || the travis build is broken in some way your code is fine thanks for the change :) ||
1,0,0,1,1,1,1,0,better protection against incompatible returned value of default answer and get safely mock name fixes issue #187the value returned by the default answer is now validated to make sure there wont be a `classcastexception` if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a `classcastexception` when reporting a verification issue build is ok but fail on travis ||
1,0,0,0,1,1,0,0,fixes #212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions follow-up to #212 thanks @mkordas  ||
1,1,1,1,1,1,1,0,fixes #212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions follow-up to #212 thanks @mkordas  ||
0,1,0,1,1,0,0,0,fixes #203 : introduce bdd inorder verification follow-up to #203  
1,1,0,1,1,1,0,0,fixes #228: fixed a verify() call example in @captor javadoc   thanks for the fix :) ||
1,1,1,1,1,1,1,0,cannot instantiate type with public method of a public parent class having a non public types in signature this should fix #233(awaiting delivery of bytebuddy fix https://githubcom/raphw/byte-buddy/commit/6f223d93ee57b199abf0e7abaf4837df6d041f41)thanks @raphw actually fixed in bytebuddy 0610 in commit https://githubcom/raphw/byte-buddy/commit/1cf6c6aa0ef0ff47238e58f27df16637cdfe96c2 ||
1,1,0,1,1,1,1,0,fixes #220 constructor invoking methods raise npe in some recent version of mockito `@spy` annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls (unconfirmed at this point)this pr aims to fix that by calling real code if interceptor is not set which can only happen if `constructorinstanciator` is usedthanks to @raphw for his tip on this regard as well : https://githubcom/raphw/byte-buddy/issues/32#issuecomment-113269844 i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input values?i added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor (might be unsuitable for spies) i think i also found a better alternative for thati just send you a pull request on monday || yes for constructors that made sense (when spy is instantiated with constructor) though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there ||
1,0,0,0,1,1,0,0,reintroduce null check on mockutilismock() will fix #243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check ## [current coverage](https://codecovio/github/mockito/mockito?ref27e074066ecec55ed086f7430246ef1c8818819f) is `8373%`> merging **#280** into **master** will not affect coverage as of [`27e0740`](https://codecovio/github/mockito/mockito/commit/27e074066ecec55ed086f7430246ef1c8818819f)``` diff@@            master    #280   diff @@  files          270     270         stmts         4627    4627         branches       753     753         methods          0       0         hit           3874    3874         partial        221     221         missed         532     532       ```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/2f88f06d6b0e851ff8ed2125085d3faac3f4ee1b27e074066ecec55ed086f7430246ef1c8818819f) as of [`27e0740`](https://codecovio/github/mockito/mockito/commit/27e074066ecec55ed086f7430246ef1c8818819f)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref27e074066ecec55ed086f7430246ef1c8818819f)1 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref27e074066ecec55ed086f7430246ef1c8818819f#97) 2 `+010%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref27e074066ecec55ed086f7430246ef1c8818819f#60) 3 `+010%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref27e074066ecec55ed086f7430246ef1c8818819f#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref27e074066ecec55ed086f7430246ef1c8818819f)_> powered by [codecov](https://codecovio) updated on successful ci builds ||
1,1,0,1,1,1,0,0,reintroduce null check on mockutilismock() will fix #243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check ## [current coverage](https://codecovio/github/mockito/mockito?ref27e074066ecec55ed086f7430246ef1c8818819f) is `8373%`> merging **#280** into **master** will not affect coverage as of [`27e0740`](https://codecovio/github/mockito/mockito/commit/27e074066ecec55ed086f7430246ef1c8818819f)``` diff@@            master    #280   diff @@  files          270     270         stmts         4627    4627         branches       753     753         methods          0       0         hit           3874    3874         partial        221     221         missed         532     532       ```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/2f88f06d6b0e851ff8ed2125085d3faac3f4ee1b27e074066ecec55ed086f7430246ef1c8818819f) as of [`27e0740`](https://codecovio/github/mockito/mockito/commit/27e074066ecec55ed086f7430246ef1c8818819f)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref27e074066ecec55ed086f7430246ef1c8818819f)1 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref27e074066ecec55ed086f7430246ef1c8818819f#97) 2 `+010%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref27e074066ecec55ed086f7430246ef1c8818819f#60) 3 `+010%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref27e074066ecec55ed086f7430246ef1c8818819f#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref27e074066ecec55ed086f7430246ef1c8818819f)_> powered by [codecov](https://codecovio) updated on successful ci builds ||
0,0,0,0,1,1,0,0,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements fixes #124 ## [current coverage](https://codecovio/github/mockito/mockito?ref08b0daeea01e17a63b0c817ff3139ab918aec710) is `8389%`> merging **#287** into **master** will increase coverage by **+009%** as of [`08b0dae`](https://codecovio/github/mockito/mockito/commit/08b0daeea01e17a63b0c817ff3139ab918aec710)``` diff@@            master    #287   diff @@  files          269     270     +1  stmts         4620    4651    +31  branches       752     753     +1  methods          0       0       + hit           3872    3902    +30  partial        220     220       - missed         528     529     +1```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/495406554354a23980ac40fb991c1dae8f4105aa08b0daeea01e17a63b0c817ff3139ab918aec710) as of [`08b0dae`](https://codecovio/github/mockito/mockito/commit/08b0daeea01e17a63b0c817ff3139ab918aec710)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref08b0daeea01e17a63b0c817ff3139ab918aec710)1 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref08b0daeea01e17a63b0c817ff3139ab918aec710#97) 2 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref08b0daeea01e17a63b0c817ff3139ab918aec710#122) 3 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref08b0daeea01e17a63b0c817ff3139ab918aec710#60) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref08b0daeea01e17a63b0c817ff3139ab918aec710)_> powered by [codecov](https://codecovio) updated on successful ci builds || rebased branch and changed code according to comments of @bric3 to make the inner test test working the inner test should not end with `test` || nice rework || made the impl class package-protected || looks good to me || :+1: thanks for the reviews! || hey timthanks for cool contributions!!!what are your thoughts on improving the verificationcollector idea: the rule would automatically validate all verify methods at the end of the test this way there would be no need to call collectorverify at all (we could leave it as optional for gnarly cases) || @szczepiq i am not really sure what you mean could you provide a code snippet with what you would like to achieve? || current api:``` java     @rule     public verificationcollector collector  mockitojunitcollector()     @test     public void should_fail() {         imethods methods  mock(imethodsclass)         collectorverify(methods)bytereturningmethod()         collectorverify(methods)simplemethod()     }```desired api:``` java     @rule     public mockitorule rule  mockitojunitrule()lazyverify() //just an example no strong opinion here     @test     public void should_fail() {         imethods methods  mock(imethodsclass)         //below just works (strong opinion :)         verify(methods)bytereturningmethod()         verify(methods)simplemethod()     }``` || @szczepiq pr is up at #389 :smile:  ||
1,1,0,1,1,1,1,1,remove validateserializable() fixes #245:remove serializable validation ## [current coverage](https://codecovio/github/mockito/mockito?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26) is `8366%`> merging **#293** into **master** will decrease coverage by **-006%** as of [`0b451d2`](https://codecovio/github/mockito/mockito/commit/0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)``` diff@@            master    #293   diff @@  files          270     270         stmts         4627    4623     -4  branches       753     752     -1  methods          0       0       - hit           3874    3868     -6+ partial        221     220     -1- missed         532     535     +3```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/a821f7b0ec47f3214bf6f0361df5deb211fa22140b451d2b9b7abc75d869bea7ac5fe2ee61d54b26) as of [`0b451d2`](https://codecovio/github/mockito/mockito/commit/0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)1 `+016%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26#97) 2 `+011%` via [ns/pluginloaderjava#6064](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/configuration/plugins/pluginloaderjava?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26#60) 3 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?ref0b451d2b9b7abc75d869bea7ac5fe2ee61d54b26)_> powered by [codecov](https://codecovio) updated on successful ci builds ||
1,1,1,1,1,1,1,0,remove deprecated code fixes for #374 - more left though ## [current coverage](https://codecovio/github/mockito/mockito?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c) is `8561%`> merging **#386** into **master** will increase coverage by **+013%** as of [`a27a7f9`](https://codecovio/github/mockito/mockito/commit/a27a7f906bc285dd4d21df86389e7f8a7c6a554c)``` diff@@            master    #386   diff @@  files          271     266     -5  stmts         4693    4679    -14  branches       759     759         methods          0       0       - hit           4012    4006     -6  partial        167     167       + missed         514     506     -8```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/196ff979da156caa07e19f57e4849637d8bede1aa27a7f906bc285dd4d21df86389e7f8a7c6a554c) as of [`a27a7f9`](https://codecovio/github/mockito/mockito/commit/a27a7f906bc285dd4d21df86389e7f8a7c6a554c)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c)1 `+019%` via [rningscollectorjava#2331](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/debugging/warningscollectorjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#23) 2 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#97) 3 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c)_> powered by [codecov](https://codecovio) updated on successful ci builds || @davidkarlsen - [x] the method [mockitostubvoid()](https://githubcom/mockito/mockito/blob/master/src/main/java/org/mockito/mockitojava#l1889) is deprecated but lacks the annotation `@deprecated` can you take care of it? || on it - ill be back! (the terminator) :) || @christianschwarz ok added removal of stubvoid in https://githubcom/davidkarlsen/mockito/tree/removestubvoid (which is a fork of this pr) || wdyt? || @davidkarlsen looks good! there is only one reference in the javadocs that should be removed i added a note in your commit  || @christianschwarz fixed - ping || @szczepiq intersted in this? || love it thanks! || @szczepiq what about https://githubcom/mockito/mockito/pull/394 (which is https://githubcom/davidkarlsen/mockito/tree/removestubvoid) - if you read the thread above? ||
0,1,0,1,1,0,0,0,remove deprecated code fixes for #374 - more left though ## [current coverage](https://codecovio/github/mockito/mockito?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c) is `8561%`> merging **#386** into **master** will increase coverage by **+013%** as of [`a27a7f9`](https://codecovio/github/mockito/mockito/commit/a27a7f906bc285dd4d21df86389e7f8a7c6a554c)``` diff@@            master    #386   diff @@  files          271     266     -5  stmts         4693    4679    -14  branches       759     759         methods          0       0       - hit           4012    4006     -6  partial        167     167       + missed         514     506     -8```> review entire [coverage diff](https://codecovio/github/mockito/mockito/compare/196ff979da156caa07e19f57e4849637d8bede1aa27a7f906bc285dd4d21df86389e7f8a7c6a554c) as of [`a27a7f9`](https://codecovio/github/mockito/mockito/commit/a27a7f906bc285dd4d21df86389e7f8a7c6a554c)---### [uncovered suggestions](https://codecovio/github/mockito/mockito/features/suggestions?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c)1 `+019%` via [rningscollectorjava#2331](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/debugging/warningscollectorjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#23) 2 `+015%` via [ializablemethodjava#97103](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/invocation/serializablemethodjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#97) 3 `+011%` via [lizationsupportjava#122126](https://codecovio/github/mockito/mockito/src/main/java/org/mockito/internal/creation/bytebuddy/bytebuddycrossclassloaderserializationsupportjava?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c#122) 4 _[see 7 more](https://codecovio/github/mockito/mockito/features/suggestions?refa27a7f906bc285dd4d21df86389e7f8a7c6a554c)_> powered by [codecov](https://codecovio) updated on successful ci builds || @davidkarlsen - [x] the method [mockitostubvoid()](https://githubcom/mockito/mockito/blob/master/src/main/java/org/mockito/mockitojava#l1889) is deprecated but lacks the annotation `@deprecated` can you take care of it? || on it - ill be back! (the terminator) :) || @christianschwarz ok added removal of stubvoid in https://githubcom/davidkarlsen/mockito/tree/removestubvoid (which is a fork of this pr) || wdyt? || @davidkarlsen looks good! there is only one reference in the javadocs that should be removed i added a note in your commit  || @christianschwarz fixed - ping || @szczepiq intersted in this? || love it thanks! || @szczepiq what about https://githubcom/mockito/mockito/pull/394 (which is https://githubcom/davidkarlsen/mockito/tree/removestubvoid) - if you read the thread above? ||
1,1,1,1,1,1,1,0,refactored class reporter to a static utillity fixes #426 for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            reporter()noargumentvaluewascaptured()            return null        } else {            return argumentsgetlast()        }}```the above code snipped can be rewritten to this:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            throw noargumentvaluewascaptured()        }         return argumentsgetlast()}```  
0,0,0,0,1,1,0,0,modified javadoc for argumentmatcher to fix #453 - this is the amendment to the `argumentmatcher` javadoc ## [current coverage](https://codecovio/gh/mockito/mockito/pull/454?srcpr) is **8780%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/454/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/454?srcpr)> no coverage report found for **master** at ce95784> > powered by [codecov](https://codecovio?srcpr) last updated by [ce957849994bb3](https://codecovio/gh/mockito/mockito/compare/ce957844a9adc8403434ccf893b9d68d047573e99994bb39c480cf77a0f422e22e264e7002afea1a) || lgtm ||
0,0,0,1,1,1,0,0,deprecate whitebox and corresponding verboserunner and junitfailureha… a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit 5 as part of #390 therefore the intent is to deprecate these classes and remove them in mockito 30fixes #489 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/491?srcpr) is 8835% (diff: 5555%)> merging [#491](https://codecovio/gh/mockito/mockito/pull/491?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will increase coverage by **054%**``` diff@@             master       #491   diff @@  files           265        275    +10     lines          5061       5566   +505     methods           0          0            messages          0          0            branches        826        900    +74   + hits           4444       4918   +474   - misses          444        469    +25   - partials        173        179     +6   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/491/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [4ce9ac2033e211](https://codecovio/gh/mockito/mockito/compare/4ce9ac2ea38153f4f0c7e272d52fdf9a494ccb14033e211b59dfe72ef84032a37d52173bd0dce8bb?srcpr) || dont remove this runner a few people were relying on this it may not show up on open source projectin my opinion `whitebox` should be removed though so it could be possible to use other internal reflection utils like `fieldgetter` / `fieldsetter` || @timvdlippe @bric3 what do you think about deprecating all mockito-runners in order to promote the uses of `mockitorule`? motivation: - mockito should promote only one api to initialize annotated fields cause it may confuse users what to choose when (runners vs rule) - `mockitorule`does the same as the runners but is more flexible cause it allows to uses other runners eg for parameterized tests which is a often requested feature || i do not think we should deprecate them junit (4) still has runners as a non-deprecated feature we should deprecate the runners once they do the same a lot of people still rely on old junit versions where runners are the only option we can however add proper documentation that indicates that runners should be the second choice || @raphw even if i disagree at some points i accept the core-team decision > a lot of people still rely on old junit versions where runners are the only optioni see you point but i think that people that update to mockito 2x can also update there junit version also deprecating doesnt mean that it is removed in 20 it will still be usable and indicate that a better alternative exist > we can however add proper documentation that indicates that runners should be the second choicegood idea here we go #531 || the reason to deprecate this runner is because the new mockito runner is strict and is a lot more userfriendly than this runner to promote the strict runner we should deprecate this one and use the strict version imoregarding runners vs rules: we can state our preference but we should keep the possibility || ill tidy up the verbose runner documentation i dont think it is useful given the work on #384 and #401 || ok deprecation sounds good to me however id remove `whitebox` its internal after alllets just replace the methods in `junitfailurehacker` at [line 19](https://githubcom/mockito/mockito/pull/491/files#diff-a041e60ee2d1a736352af1c34c19b1f4r19) and at [line 26](https://githubcom/mockito/mockito/pull/491/files#diff-a041e60ee2d1a736352af1c34c19b1f4r26) by private methods || rebased and updated pull request with feedback ptal :smile:  || indeed the timeout test is picky especially with openjdk 6 i restarted the job 2 times || verbose runner and console spamming runner are now both deprecated lets kill them in 30 :) ||
1,0,0,1,1,1,0,0,"revert ""remove deprecated method"" simple git revert for an accidental removal of a deprecated api since 20 instead of 1xfixes #482 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/492?srcpr) is **8785%**[![sunburst](https://codecovio/gh/mockito/mockito/pull/492/graphs/sunburstsvg?srcpr&size150)](https://codecovio/gh/mockito/mockito/pull/492?srcpr)> no coverage report found for **master** at 5dd0f71> > powered by [codecov](https://codecovio?srcpr) last updated by [5dd0f718d7489c](https://codecovio/gh/mockito/mockito/compare/5dd0f71ae37f75f3abc9b3d9ba7ad5cb4b79f38a8d7489cf9c28b858c0276022b8aaef2553e8545a?srcpr) ||"
1,1,1,1,1,1,1,0,"fixes #194 tweaks any matchers details is #194 i took the opportunity to - replace `testbaseassertthat` by more powerful assertj equivalent theres still some work to be done in this class- add iterable matchersbefore merging- [x] i ponder to make `anyobject()` not to accept `null` currently `any()` is an alias of `anyobject()` > keeping the `anyobjet` behaviour and deprecate the method- [x] i need to update `anyint` family description ## [current coverage](https://codecovio/gh/mockito/mockito/pull/510?srcpr) is 8769% (diff: 9857%)![sunburst](https://codecovio/gh/mockito/mockito/pull/510/graphs/sunburstsvg?srcpr&size150)> no coverage report found for **master** at 2e1e51c> > powered by [codecov](https://codecovio?srcpr) last update [2e1e51c3bdf848](https://codecovio/gh/mockito/mockito/compare/2e1e51cf0f9178c68bcba1c97bcbe3213e002f343bdf8481132b1ef22562b1f1308ee69801efecd6?srcpr) || heres some poll on twitter (values are from the time this comment was edited `fri jul 29 15:35:28 cest 2016`) :- https://twittercom/bricedutheil/status/758967944881639424    > #mockito any(class) will check the type in mockito 20 but should it match theres still the matcher isnull  > - 38% null and non-null  > - 62% only non-null  >   > 25 votes- https://twittercom/bricedutheil/status/758969135489388544    > #mockito anyint and other primitive matchers should they match   > (there is still isnull)  > - 07% null and non-null integer  > - 93% only non-null integer  >   > 27 votesi feel this pr is safe to merge not much voters but the poll trend ratio shouldnt change that much and those trends agrees with the changes brought by this pr || 30 votes and i merge the pr ill monitor the poll after my holidays || if i understand correctly `list<t> anylistof(class<t> clazz)` was deprecated in favour of `list anylist()` shouldnt the latter then be made generic? when i replace one with the other i get ""unchecked conversion"" warnings(idem for `anyset` `anymap` `anycollection` and `anyiterable`) || @stephan202 thanks for the feedback yes it was deprecated for people that use java8 as documented in the javadoc and the deprecation announces removal in mockito 3 which will be java 8 minimum || @bric3: i am on java 8 and did migrate as suggested i agree this is a change for the better :)my point is that this replaces a deprecation warning with an unchecked conversion warning the question is shouldnt the following type of change be applied to all aforementioned methods?``` diff--- a/src/main/java/org/mockito/argumentmatchersjava+++ b/src/main/java/org/mockito/argumentmatchersjava@@ -4749 +4749 @@ public class argumentmatchers {      * @see #isnull()      * @see #isnull(class)      */-    public static list anylist() {+    public static <t> list<t> anylist() {         reportmatcher(new instanceof(listclass ""<any list>""))-        return new arraylist(0)+        return new arraylist<t>(0)     }``` || > shouldnt the following type of change be applied to all aforementioned methods?what do you mean by that ?> this replaces a deprecation warning with an unchecked conversion warningdo you mean that ides show an unchecked conversion when using `anylist()`  || > > shouldnt the following type of change be applied to all aforementioned methods?> > what do you mean by that ?im not sure what more to explain: the diff shows the addition of a generic type argument to `argumentmatchers#anylist` i propose this change is made to said method as well as `argumentmatchers#{anysetanymapanycollectio yiterable}`> > this replaces a deprecation warning with an unchecked conversion warning> > do you mean that ides show an unchecked conversion when using anylist()my compiler does and we compile with `-werror` sure i can suppress the warning on our side but the changes im proposing is in line with `argumentmatchers#any` so it seems to ""make sense"" || oh thanks it seems i forgot to stash these lines i thought it was in the commit !im fixing that right now || cool :) || see #528 || "
1,0,0,0,1,0,0,0,refactored mockutil to a static utility class (#426)   ## [current coverage](https://codecovio/gh/mockito/mockito/pull/514?srcpr) is 8766% (diff: 9000%)> merging [#514](https://codecovio/gh/mockito/mockito/pull/514?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **002%**``` diff@@             master       #514   diff @@  files           268        268            lines          4818       4807    -11     methods           0          0            messages          0          0            branches        793        793          - hits           4225       4214    -11     misses          423        423            partials        170        170          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/514/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [b1a7090f25bb62](https://codecovio/gh/mockito/mockito/compare/b1a7090c2647bc02d3aff4c8b5788fd7b57133daf25bb62ca53779e99986bb0e9becfc9816221619?srcpr) ||
1,1,1,1,1,1,1,0,inlined arrayutilsisempty() in argumentsprocessor inlined arrayutilsisempty() in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty() was renamed to isnullorempty() for clarityrelates to #426 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/540?srcpr) is 8785% (diff: 000%)> merging [#540](https://codecovio/gh/mockito/mockito/pull/540?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **002%**``` diff@@             master       #540   diff @@  files           266        265     -1     lines          5065       5064     -1     methods           0          0            messages          0          0            branches        830        830          - hits           4451       4449     -2     misses          442        442          - partials        172        173     +1   ```![sunburst](https://codecovio/gh/mockito/mockito/pull/540/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [dc1fb1b684fa76](https://codecovio/gh/mockito/mockito/compare/dc1fb1b4c2043f4801200c01e277b6c4043c7424684fa76aef801526f12e97d26b25faf4dbcc05f2?srcpr) || lgtm ||
1,0,0,1,1,1,1,0,refactored objectmethodsguru to a static utility class - refactored `objectmethodsguru` to a static utility class- removed unused methods and associated tests:  - `istostring(mockitomethod method)`  - `isequalsmethod(method method)`  - `ishashcodemethod(method method)`- renamed `istostring()` to `istostringmethod()`relates to #426 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/547?srcpr) is 8779% (diff: 9090%)> merging [#547](https://codecovio/gh/mockito/mockito/pull/547?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **005%**``` diff@@             master       #547   diff @@  files           265        265            lines          5064       5057     -7     methods           0          0            messages          0          0            branches        830        825     -5   - hits           4449       4440     -9   - misses          442        444     +2     partials        173        173          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/547/graphs/sunburstsvg?size150&srcpr)> powered by [codecov](https://codecovio?srcpr) last update [17b8dcaa3264c0](https://codecovio/gh/mockito/mockito/compare/17b8dca7bd455a887051095d877361ea74daa364a3264c0e78115a5a09366c1187d387495b6f9113?srcpr) || lgtm ||
1,1,1,0,1,1,1,0,fixes #548 from now on verification happens always call in other thre… should fix problems with #548 and #601 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/619?srcpr) is 8824% (diff: 100%)> merging [#619](https://codecovio/gh/mockito/mockito/pull/619?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #619   diff @@  files           266        266            lines          5163       5163            methods           0          0            messages          0          0            branches        847        847            hits           4556       4556            misses          429        429            partials        178        178          ```![sunburst](https://codecovio/gh/mockito/mockito/pull/619/graphs/sunburstsvg?srcpr&size150)> powered by [codecov](https://codecovio?srcpr) last update [130a5c72ea6ea9](https://codecovio/gh/mockito/mockito/compare/130a5c7c25a2c2b669ebf842b7f5ea971cec25e92ea6ea9d2114cd034fdc0d1855a2dd8559202ec8?srcpr) || i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist : https://gistgithubcom/lukasz-szewc/f1ca9cece0a8997e898e5b6ba1a65f0c || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now! :tada:  || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||
0,0,0,0,1,1,0,0,renamed failuredetecter to failure detector also renamed misspelled issussessful() to issuccessful()fixes: #653 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/654?srcpr) is 8822% (diff: 6666%)> merging [#654](https://codecovio/gh/mockito/mockito/pull/654?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will not change coverage``` diff@@             master       #654   diff @@  files           266        266            lines          5154       5154            methods           0          0            messages          0          0            branches        843        843            hits           4547       4547            misses          429        429            partials        178        178          ```> powered by [codecov](https://codecovio?srcpr) last update [bde8b406f19ea0](https://codecovio/gh/mockito/mockito/compare/bde8b406f7988a7434d9edd2866e61817c13e05e6f19ea0f623bee81cb58794116cd2a471aebaa42?srcpr) || thanks oliver! ||
1,0,0,0,0,1,0,0,fixes #731 implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in #731 to gain back stability on the build ## [current coverage](https://codecovio/gh/mockito/mockito/pull/771?srcpr) is 8658% (diff: 100%)> no coverage report found for **release/2x** at fc9329c> powered by [codecov](https://codecovio?srcpr) last update [fc9329cb109fe6](https://codecovio/gh/mockito/mockito/compare/fc9329cba14c55310c3d4640b6667cf0230d042ab109fe6abec8564c9bbac61978ec4b7ee4c44614?srcpr) || the amount of import reordering and stylistic changes is quite high sadly would be nice to prevent these for new prs || > the amount of import reordering and stylistic changes is quite high sadly would be nice to prevent these for new prsregarding the imports i followed the new style guide to lower this noise we can apply the style guide on the whole project also i think its possible to export/import the intellij/eclipse style config || @bric3 yes it is good you enforce it its that others dont :p seems like a good idea to fix it once and then block prs if they change it ||
1,0,0,0,1,0,0,0,"new opt-in stubbing strictness implemented in junit rules new api (for rationale see #769 for code review history see #770):```java//existing api:@rule public mockitorule mockito  mockitojunitrule()//proposed improvements:rule()strictness(strictnesslenient)rule()strictness(strictnesswarn)       // <-- is the defaultrule()strictness(strictnessstrict_stubs)  // <-- mockito 30 default```what ""strict stubbing"" means?- improved debuggability: the test fails early when code under test invokes stubbed method with different arguments- cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared- cleaner more dry tests (""dont repeat yourself""): if you use mockitoverifynomoreinteractions() you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out [szczepans article on linkedin](https://wwwlinkedincom/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber) with interactive rebase you can squash commits away or use `git reset --soft head~2` to reset the last 2 commits :smile:  || ## [current coverage](https://codecovio/gh/mockito/mockito/pull/807?srcpr) is 8669% (diff: 9464%)> no coverage report found for **release/2x** at 613977a> powered by [codecov](https://codecovio?srcpr) last update [613977a3645794](https://codecovio/gh/mockito/mockito/compare/613977ad6c20edcfb86af8841fde9513148949a536457940f777fc35758087d64a4c567b2e37bb5c?srcpr) || thanks for the hint on slack about ""git push -f"" i could have used it to fix the original pr :) || for extra safety prefer `git push --force-with-lease` :) || agreed with @timvdlippe its simplier if you rebase interractively on your machine then push force-with-lease ) || "
1,0,0,1,1,1,0,0,test clean up according to discussions for rememberinglisteners according to issue @719 we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in #825 that build was failing for some reason not obvious and had 1 merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr ## [current coverage](https://codecovio/gh/mockito/mockito/pull/831?srcpr) is 8667% (diff: 100%)> merging [#831](https://codecovio/gh/mockito/mockito/pull/831?srcpr) into [release/2x](https://codecovio/gh/mockito/mockito/branch/release/2x?srcpr) will not change coverage```diff@@           release/2x       #831   diff @@  files              284        284            lines             5666       5666            methods              0          0            messages             0          0            branches           924        924            hits              4911       4911            misses             563        563            partials           192        192          ```> powered by [codecov](https://codecovio?srcpr) last update [2105afcda28c81](https://codecovio/gh/mockito/mockito/compare/2105afc9792643c362f46a64d92a15e9642e6e8eda28c8186faf640d198a0c1f9e49e21b76d591e5?srcpr) || @bric3 @timvdlippe sorry for this new pr with the same code previously we were discussing #825 in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge || looks good to me thanks for the improvement ||
1,1,1,0,1,1,1,0,"fixes #838 : adds a matches(pattern) following discussion in #838 it is sensible to add a mockito matcher that can take a `pattern` as an argumentthe usage is the same as `matches(string)````javawhen(mockonearg(matches(patterncompile(""[a-z]+\\d\\d""))))thenreturn()```although it allows to build more complex regex especially with regular expression flags @mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away || >@mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks @bric3! || yes exactly :) ||"
1,1,1,0,1,1,1,0,fixes #879: argumentmatchers javadoc grammar improvement fixed grammar issue in `argumentmatchers`:> this implementation is due static type safety imposed by java compilershould be:> this implementation is due to static type safety imposed by java compilerthis pr fixes issue #879 ## [current coverage](https://codecovio/gh/mockito/mockito/pull/880?srcpr) is 8646% (diff: 100%)> merging [#880](https://codecovio/gh/mockito/mockito/pull/880?srcpr) into [master](https://codecovio/gh/mockito/mockito/branch/master?srcpr) will decrease coverage by **009%**```diff@@             master       #880   diff @@  files           287        287            lines          5704       5703     -1     methods           0          0            messages          0          0            branches        917        915     -2   - hits           4937       4931     -6   - misses          573        575     +2   - partials        194        197     +3   ```> powered by [codecov](https://codecovio?srcpr) last update [64c2f61a036d08](https://codecovio/gh/mockito/mockito/compare/64c2f61274a59eb3d86f1f122d71a80d9a1231bea036d08e2637dff2ce26ab7b61296a57c7e79c7a?srcpr) || thanks! ||
1,1,0,0,1,1,0,0,clarify documentation for consecutive stubbing fixes #895as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn() statements and using multiple when/thenreturn statements when someone attempts to perform consecutive stubbingi added a warning/clarification in the documentation with a corresponding example so that its more clear (especially for new users of mockito) ## [current coverage](https://codecovio/gh/mockito/mockito/pull/896?srcpr) is 8657% (diff: 100%)> no coverage report found for **release/2x** at e983acd> powered by [codecov](https://codecovio?srcpr) last update [e983acd85c6a4d](https://codecovio/gh/mockito/mockito/compare/e983acdef8da0076f1980f622363d179e1eff68085c6a4deae289d6c607adef2d4c68d98a9767870?srcpr) || hi @dimosr thank you for the javadoc update !could you rework the javadoc a bit ? ||
1,0,0,1,1,1,0,0,simplified the creation of argumentsaredifferent-exceptions relates to #426 this pr simplifies the creation of argumentsaredifferent-exceptions saving 2 classes and ~40 lines of code # [codecov](https://codecovio/gh/mockito/mockito/pull/908?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`release/2x@1cbc7f8`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)> the diff coverage is `80%````diff@@              coverage diff               @@##             release/2x     #908   +/-   ##  coverage               ?   8669%             complexity             ?     2256             files                  ?      287             lines                  ?     5736             branches               ?      664             hits                   ?     4973             misses                 ?      574             partials               ?      189```| [impacted files](https://codecovio/gh/mockito/mockito/pull/908?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/compare/1cbc7f821d48c38cd006036dcc2b90c0266939bd26094a57494794fe5b578342d477922f7fdac09e?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9166% <100%> (ø)` | `88 <ø> (?)` | || [a/org/mockito/internal/junit/exceptionfactoryjava](https://codecovio/gh/mockito/mockito/compare/1cbc7f821d48c38cd006036dcc2b90c0266939bd26094a57494794fe5b578342d477922f7fdac09e?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9fegnlchrpb25gywn0b3j5lmphdme) | `7857% <7857%> (ø)` | `5 <5> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/908?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/908?srcpr&elfooter) last update [1cbc7f826094a5](https://codecovio/gh/mockito/mockito/compare/1cbc7f821d48c38cd006036dcc2b90c0266939bd26094a57494794fe5b578342d477922f7fdac09e?srcpr&elfooter&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @szczepiq @bric3 the tests are in place now || bump || why the hell it is so important to end a java file with a new-line seriously why the build must break??? same goes for a single whitespace at the end of a line it adds a lot of more workload to fix this non issues for no benefit || @christianschwarz the checkstyle configuration is incubating at the moment primarily it enforces the same code style such that we as reviewers have an easier time and process pull requests faster (cutting out the noise) these issues you can check by running `/gradlew build` locally so you should not rely on ci to error on them || i know!  || better provide a formatter template so it can be done by the ide doing it by hand is a stubid frustrating job || @christianschwarz hm i have configured my intellij to do this automatically for me so it is not bothering my workflow maybe you can configure your ide to do the same? that was actually the goal of enforcing checkstyle: every developer configures the ide to fix this automatically || can you export your formatter and add a download-link to wiki contribution guidelines? || finally ready to merge ||
1,0,1,0,1,0,0,0,support for return type void in doesnothinganswer fixes #927 this pr allows to use `donothing()` for methods with return type `javalangvoid` like void-methods  to solve this `invocationinfoisvoid()` checks now the return type for the pseudo-type of the keyword `void` or `void` # [codecov](https://codecovio/gh/mockito/mockito/pull/933?srcpr&elh1) report> :exclamation: no coverage uploaded for pull request base (`release/2x@3e9a94b`) [click here to learn what that means](https://docscodecovio/docs/error-reference#section-missing-base-commit)```diff@@              coverage diff               @@##             release/2x     #933   +/-   ##  coverage               ?   8656%             complexity             ?     2254             files                  ?      289             lines                  ?     5738             branches               ?      663             hits                   ?     4967             misses                 ?      582             partials               ?      189```| [impacted files](https://codecovio/gh/mockito/mockito/pull/933?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [kito/internal/stubbing/answers/invocationinfojava](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0ludm9jyxrpb25jbmzvlmphdme) | `95% <100%> (ø)` | `17 <3> (?)` | || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `909% <100%> (ø)` | `18 <1> (?)` | || [mockito/internal/stubbing/answers/doesnothingjava](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0rvzxnob3roaw5nlmphdme) | `100% <100%> (ø)` | `6 <3> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/933?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/933?srcpr&elfooter) last update [3e9a94b837ba54](https://codecovio/gh/mockito/mockito/compare/3e9a94b7b9938dbdb882e28c24c2b163c2d19390837ba54e74e1bf3f1663ffc791f3b079e81e75b2?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,1,1,1,1,1,0,verifies #688: acceptance test to prevent future regression added an acceptance test to verify #688 this is going to fail until mockito updates to the next version of byte buddy (that re-fixes #688) that contains the following commit: https://githubcom/raphw/byte-buddy/commit/98eaf113681b97053419b292ff342f4ea3321879 || could you rebase on `release/2x`? this test should pass now :smile:  || @timvdlippe rebased on `release/2x` and tests are passing now || # [codecov](https://codecovio/gh/mockito/mockito/pull/972?srcpr&elh1) report> merging [#972](https://codecovio/gh/mockito/mockito/pull/972?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/0fe2644767b4526e4db961b511f9c59c34158e6c?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/972/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/972?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x     #972   +/-   ##  coverage          8686%   8686%             complexity          2290     2290             files                287      287             lines               5801     5801             branches             684      684             hits                5039     5039             misses               571      571             partials             191      191```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/972?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/972?srcpr&elfooter) last update [0fe264479c660b](https://codecovio/gh/mockito/mockito/pull/972?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you guys! nice and clean change and makes mockito safer for our users!!! ||
1,1,1,0,1,1,1,0,fixes #981: update javadoc about the mockito-inline artifact this pr fixes #981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that # [codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elh1) report> merging [#985](https://codecovio/gh/mockito/mockito/pull/985?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/1599dfe84f953d5ef85c17471296fabbdd1b9a2b?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a````diff@@              coverage diff              @@##             release/2x    #985   +/-   ##  coverage           868%   868%             complexity          2275    2275             files                287     287             lines               5769    5769             branches             675     675             hits                5008    5008             misses               571     571             partials             190     190```| [impacted files](https://codecovio/gh/mockito/mockito/pull/985?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/compare/1599dfe84f953d5ef85c17471296fabbdd1b9a2b85c7df0afd0cbadaa1c7ac096af6a7734d1eba89?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :x: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/985?srcpr&elfooter) last update [1599dfe85c7df0](https://codecovio/gh/mockito/mockito/compare/1599dfe84f953d5ef85c17471296fabbdd1b9a2b85c7df0afd0cbadaa1c7ac096af6a7734d1eba89?elfooter&srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,1,1,0,0,fixed #1065 add information about donothing() method to cannotstubvo…   # [codecov](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&elh1) report> merging [#1079](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/761de40d05b4eddae8328ab1d7e5bdacd882a3be?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1079/graphs/treesvg?tokenmx80slder0&srcpr&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1079   +/-   ##  coverage          8682%   8682%             complexity          2288     2288             files                286      286             lines               5798     5798             branches             684      684             hits                5034     5034             misses               568      568             partials             196      196```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9166% <ø> (ø)` | `88 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&elfooter) last update [761de40f7b5117](https://codecovio/gh/mockito/mockito/pull/1079?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,0,1,1,1,0,1,fixes #1083: interfaces only declare tostring implicitly and should t… …herefore override it explicitly from the inline mock maker  
1,0,0,0,1,1,1,0,"made it possible to delay the return of a mock or spy  (#1117) this is a useful aid in debugging race conditions and other synchronicity problems # [codecov](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&elh1) report> merging [#1119](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eldesc) into [master](https://codecovio/gh/mockito/mockito/commit/17db34508543150a70573fba3ca04bc4ba37a821?srcpr&eldesc) will **decrease** coverage by `001%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1119/graphs/treesvg?tokenmx80slder0&srcpr&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree)```diff@@             coverage diff              @@##             master    #1119      +/-   ##- coverage     8663%   8662%   -002%     - complexity     2214     2217       +3       files           287      288       +1       lines          5711     5721      +10       branches        663      663              + hits           4948     4956       +8     - misses          569      572       +3     + partials        194      193       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/additionalanswersjava](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9bzgrpdglvbmfsqw5zd2vycy5qyxzh) | `9523% <100%> (+023%)` | `18 <1> (+1)` | :arrow_up: || [to/internal/stubbing/answers/answerswithdelayjava](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9hbnn3zxjzl0fuc3dlcnnxaxrorgvsyxkuamf2yq) | `8888% <8888%> (ø)` | `3 <3> (?)` | || [eation/bytebuddy/typecachingbytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvvhlwzunhy2hpbmdcexrly29kzudlbmvyyxrvci5qyxzh) | `8378% <0%> (-136%)` | `8% <0%> (-1%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&elfooter) last update [17db3452b3ff4d](https://codecovio/gh/mockito/mockito/pull/1119?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || re: revert no problem i was applying the boy scout method and killing off warnings but i wasnt sure if that change would be acceptable i could tell you were targeting older java versions but wasnt sure if thats important in this test tooive provided it without the java 8 dependent changes || great this looks good to me signing off on this one but want one other pair of :eyes: to check this pr :smile:  || imho the prs title is misleading - in the first place i thought it meant delay on `mockitomock()`/`mockitospy()` which is obviously useless just after reading the code i understood it means answers with delayid change the title to ""add delayed answers"" it will also clarify the release notes 😄 || cant right now because of day job are the release notes drawn from pr titles? || i changed a title in #1117 it should be used to generate release notes (as that pr has no labels)by the way we will test a new cd mechanism - notable version release thanks for your contribution @myrle-krantz! || my bad i didnt spot that pr was raised against master not 2x || btw release notes dont look very good i created #1123 || nice contribution thank you! || youre welcome it was my pleasure: given how intensively mockito helps me every day this was the least i could dothank you!myrle || "
1,0,0,0,0,1,1,0,"fix for #1155 thenthrow(class) fix for #1155 mockitothenthrow(class) now fails when the given throwable type is not declared on the stubbed method the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributors || >the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributorsi will look into that thank you || # [codecov](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&elh1) report> merging [#1162](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/9e4de546d7ea2ec675e15d8b6960a3b8ffe324f7?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `8275%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1162/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1162      +/-   ##+ coverage          8711%   8716%   +004%     - complexity          2287     2289       +2       files                287      286       -1       lines               5791     5795       +4       branches             685      688       +3     + hits                5045     5051       +6       misses               554      554              + partials             192      190       -2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `90% <ø> (ø)` | `5 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8636% <8095%> (-455%)` | `19 <10> (+1)` | || [va/org/mockito/internal/stubbing/basestubbingjava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9cyxnlu3r1ymjpbmcuamf2yq) | `9285% <875%> (+485%)` | `16 <2> (+2)` | :arrow_up: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <0%> (ø)` | `39% <0%> (ø)` | :arrow_down: || [nternal/configuration/mockannotationprocessorjava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul01vy2tbbm5vdgf0aw9uuhjvy2vzc29ylmphdme) | `100% <0%> (ø)` | `6% <0%> (+1%)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9222% <0%> (+055%)` | `89% <0%> (+1%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&elfooter) last update [9e4de54c7fbb61](https://codecovio/gh/mockito/mockito/pull/1162?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @timvdlippe could you please remove the checkstyle rule [newlineatendoffile] it is _not possible_ ~frustrating~ to fix and adds zero value || if you have an editor with editorconfig support it is no manual work both eclipse and intellij support it intellij even right out of the box else you can manually add the newline i think you configured your editor to revert that change somewhere in your preferencesanyways editorconfig makes sure we avoid unnecessary noise when contributing even if you are new to the project and unaware that it exists its thus more friendly to new developers and i dont want to regress in that regard :( || the ide added a newline also i tried to add manually a newline but check style still fails i have no further time to investigated into it----this pr fixes now cleans up the unfinished stubbing state  in case null was passed to thenthrow(class)/dothrow(class) this leaded to unpredictable results in test suites before || you are fixing the wrong files it is stubbingwiththrowables test: https://travis-ciorg/mockito/mockito/jobs/266766666#l303 || strange when i run it locally it complains about the 3 files of the last commit || @mockitocore what is the current state? what is missing? || @christianschwarz nice thanks! while could seems good could you add a test (could just copy the literal test from #1155) to also check that case? i couldnt spot it in the added tests || sure i can add more tests but what you mean by ""that case""? || `when(mockdoit())thenthrow(exceptionclass)` eg with only a literal class passed on expecting this to fail || i am not sure what you mean by ""only a literal class passed on expecting this to fail""maybe a stubbing with an checked exception type where an other checked exception is declared like this:```class exceptiona extends exceptionclass exceptionb extends exceptionpublic void doit() throws exceptionawhen(mockdoit())thenthrow(exceptionbclass) //^^ fails like ""cant throw checked exception >exceptionb< cause it is not declared""``` || the original report states that the following test did not fail i would like to see that literal test as a regression test in our test body:```java@test(expected  mockitoexceptionclass)    public void using_thenthrow_class() {        c mock  mock(cclass)        // set a checked exception that does not matche the method signature        when(mockdoit())thenthrow(exceptionclass)    }``` || @christianschwarz thanks for all your work! || "
1,0,0,0,1,1,1,0,"added new public api for spring-boot use case not intended for merging yet submitted for visibility- for design and rationale see #1191- for usage see ""verificationstartedlistenertest"" classthis is still experimental so refactorings error handling javadoc is missing # [codecov](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&elh1) report> merging [#1192](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/a3a1aaaa47e818f66561e7f5cd5045be4f73b32a?srcpr&eldesc) will **increase** coverage by `009%`> the diff coverage is `9821%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1192/graphs/treesvg?srcpr&tokenmx80slder0&height150&width650)](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1192      +/-   ##+ coverage          8723%   8732%   +009%     - complexity          2292     2304      +12       files                286      287       +1       lines               5805     5855      +50       branches             690      696       +6     + hits                5064     5113      +49     - misses               554      555       +1       partials             187      187```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/main/java/org/mockito/internal/util/mockutiljava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl01vy2tvdglslmphdme) | `931% <ø> (ø)` | `19 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `977% <100%> (+011%)` | `33 <0> (ø)` | :arrow_down: || [g/mockito/internal/util/defaultmockingdetailsjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl0rlzmf1bhrnb2nraw5nrgv0ywlscy5qyxzh) | `100% <100%> (ø)` | `14 <1> (+1)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9239% <100%> (ø)` | `92 <1> (ø)` | :arrow_down: || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8636% <100%> (ø)` | `19 <0> (ø)` | :arrow_down: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9259% <100%> (+059%)` | `42 <5> (+3)` | :arrow_up: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `9772% <100%> (+016%)` | `20 <1> (+1)` | :arrow_up: || [nternal/listeners/verificationstartednotifierjava](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvvmvyawzpy2f0aw9uu3rhcnrlze5vdglmawvylmphdme) | `9722% <9722%> (ø)` | `7 <7> (?)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&elfooter) last update [a3a1aaab41d1c5](https://codecovio/gh/mockito/mockito/pull/1192?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || hey @timvdlippe thank you for review! i will work on this today || >what happens if multiple verificationstartedlisteners set a different mock? is it last-come wins? that could potentially break any framework that would be relying on the fact that the mock it set is the mock that is executed onthe mock object is created only once so there is no practical possibility for 2 different frameworks to add different listenerswe already have in our api similar listeners that are configured at mock creation we did not encounter a problem with this api the new ""verificationstartedlistener"" suggested in this pr follows an existing pattern that was already discussed in the pasthence i think its ok to allow multiple listeners to keep the api consistent and simplethank you for insightful feedback! keep it coming because im finishing this feature off :) || sorry for being vague i am okay with adding multiple listeners but my comment was regarding calling `setmock`  multiple times if franeworks a and b both call `setmock` and rely on its value one of them will break (depending on which one is invoked latest) therefore i would like to block calling `setmock` twice if another framework calls it it should be an exception stating that mocks were overridden and there is an incompatibility between two dependencies wdyt? || >if franeworks a and b both call setmock and rely on its value one of them will break (depending on which one is invoked latest)how can 2 frameworks call setmock? only 1 framework can create mock and pass a listener can you describe the scenario more clearly?happy to work out this scenario to design great api! || fyi: im almost done with the code i would love some feedback! || i have some time tomorrow to write down the exampleon sun 8 oct 2017 18:28 szczepan faber <notifications@githubcom> wrote:> fyi: im almost done with the code i would love some feedback!>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1192#issuecomment-335018420> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdb-cvxjmtnnwc7oc3urgcbsb7mndyks5sqpg5gajpzm4ppxj0>> > || due to issues with gradle from #1202 i am unable to compile or do any work have to wait till that is resolved until i can write the example :cry:  || okay so while trying to write down the example i realized it is a bit more tricky it would essentially require to add multiple listeners on the same `mockitosettings` object:```javalist mock2  mock(listclass mockitowithsettings()verificationstartedlisteners(new verificationstartedlistener() {            public void onverificationstarted(verificationstartedevent event) {                //this is a hack to simulate desired behavior                containeradd(eventgetmock())                eventsetmock(mock1)            }        } new verificationstartedlistener() {            @override            public void onverificationstarted(verificationstartedevent event) {                eventsetmock(mock2)            }        }))```in this case `mock2` will be the final mock if the first listener was added based on framework 1 and the second one by a different one there is a discrepancy between the mock that is actually in the event and the mock the framework expects if framework 1 is relying on the mock being mock1 while at the same time framework 2 relies on the mock being mock2 one of them will breaki would thus like to propose that if `setmock` is invoked twice an exception is thrown this is very explicit to the user indicating: hey you are using two framework listeners together this cant work || hey @timvdlippe i still dont understand the use case1 only one framework can construct a mock object if multiple frameworks integrate with mockito only one of those frameworks can construct given mock the other framework can use the mock of course but it cannot create it (because it is already created) if we need to lets discuss this further on slack2 id like the api to be consistent with other listeners like invocation listeners using an exception makes verification started listeners work differently than invocation listeners because it makes the 1st listener more important than other listeners consistent api is less surprising to users and makes it easy to use predictable3 adding an exception adds some complexity that we need to maintain4 there is no use case to support 2 listeners just like there is no use case to support only 1 listener supporting 2 listeners does not seem incorrect if it is not incorrect id rather keep things simple allowing 2 listeners is more open for experimentation and unexpected use cases using an exception is creating an arbitrary constraint without a use case5 if the use case presents itself for example we have a user bug report im happy to add code to address it perhaps then we add some validationfyi when designing this i had considered supporting just single listener but decided against it thats why i have added ""[listeners_are_executed_in_sequence](https://githubcom/mockito/mockito/pull/1192/files#diff-c7b40da00e36958d90e247ac5f759871r72)"" testgood discussion! thank you for taking the time to describe what you meant do you have feedback about other parts of the api or the implementation? in the heat of the argument lets not forget about the surrounding code :) || the implementation is done would love some feedback!!! || @szpak can you review? theres a discussion about supporting one or many listeners but i dont think it should be blocking the prlets ship this so that spring boot can start using mockitos public api! || its not about one or many listeners it should be possible to add multiplelisteners however i want to limit `setmock` to be invoked only onceon sat 14 oct 2017 05:24 szczepan faber <notifications@githubcom> wrote:> @szpak <https://githubcom/szpak> can you review? theres a discussion> about supporting one or many listeners but i dont think it should be> blocking the pr>> lets ship this so that spring boot can start using mockitos public api!>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> <https://githubcom/mockito/mockito/pull/1192#issuecomment-336606283> or mute> the thread> <https://githubcom/notifications/unsubscribe-auth/afrdbwzrg8lz41svt-2rhzxqk9t9tqdcks5sscmfgajpzm4ppxj0>> > || thank you! im pushing new version soon || "
1,0,0,0,0,1,0,0,add regression test for issue #1174 regression that shows the issue of #1174 i am unable to reproduce this locally lets see what travis sayscloses #1174 # [codecov](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&elh1) report> merging [#1219](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/e10c5409e460c3ecd6b2ef9513a0b3802351d85f?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1219/graphs/treesvg?tokenmx80slder0&width650&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1219   +/-   ##  coverage          8727%   8727%             complexity          2305     2305             files                287      287             lines               5869     5869             branches             703      703             hits                5122     5122             misses               556      556             partials             191      191```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&elfooter) last update [e10c5409f5312b](https://codecovio/gh/mockito/mockito/pull/1219?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you! ||
0,0,0,0,1,1,0,0,update strict_stubs documentation for verifynomoreinteractions fixes #1086 # [codecov](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&elh1) report> merging [#1280](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/2316a320012c09c6b815bfdf00b008732a3ffe75?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1280/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1280   +/-   ##  coverage          8808%   8808%             complexity          2321     2321             files                284      284             lines               5857     5857             branches             702      702             hits                5159     5159             misses               519      519             partials             179      179```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/quality/strictnessjava](https://codecovio/gh/mockito/mockito/pull/1280/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9xdwfsaxr5l1n0cmljdg5lc3muamf2yq) | `100% <ø> (ø)` | `2 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&elfooter) last update [2316a3292b5843](https://codecovio/gh/mockito/mockito/pull/1280?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,1,1,1,1,0,"extend mockitosession(builder) api to enable usage by testing frameworks the first commit in this pr fixes #1232 in the additional commits ive taken the liberty to implement my proposals from https://githubcom/mockito/mockito/issues/445#issuecomment-358407562:- add `mockitosessionbuildername(string)` to pass a name from the testing framework to the `mockitosession`- add `mockitosessionbuilderlogger(mockitosessionlogger)` to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter)- add `mockitosessionfinishmocking(throwable)` to avoid potentially confusing warnings for failing tests- add `mockitosessionsetstrictness(strictness)` to change the strictness of the current session (there were two test cases requiring that)each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to fix #1232to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the `junitrule` implementation to use it # [codecov](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&elh1) report> merging [#1301](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/56a94f04070d8b1b96e98f156ec9b19beec44d2d?srcpr&eldesc) will **increase** coverage by `003%`> the diff coverage is `9666%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1301/graphs/treesvg?height150&width650&tokenmx80slder0&srcpr)](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1301      +/-   ##+ coverage          8809%   8812%   +003%     - complexity          2323     2335      +12       files                284      285       +1       lines               5863     5887      +24       branches             702      708       +6     + hits                5165     5188      +23       misses               519      519              - partials             179      180       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ockito/internal/runners/defaultinternalrunnerjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9ydw5uzxjzl0rlzmf1bhrjbnrlcm5hbfj1bm5lci5qyxzh) | `9677% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: || [/internal/junit/mismatchreportingtestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9naxntyxrjafjlcg9ydgluz1rlc3rmaxn0zw5lci5qyxzh) | `100% <100%> (ø)` | `4 <0> (ø)` | :arrow_down: || [/internal/session/mockitosessionloggeradapterjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zzxnzaw9ul01vy2tpdg9tzxnzaw9utg9nz2vyqwrhchrlci5qyxzh) | `100% <100%> (ø)` | `2 <2> (?)` | || [kito/internal/framework/defaultmockitosessionjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9tzxnzaw9ulmphdme) | `9565% <100%> (+19%)` | `6 <4> (+4)` | :arrow_up: || [ckito/internal/junit/defaulttestfinishedeventjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0vgvzdezpbmlzagvkrxzlbnquamf2yq) | `100% <100%> (ø)` | `3 <1> (-1)` | :arrow_down: || [/mockito/internal/junit/universaltestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9vbml2zxjzywxuzxn0tglzdgvuzxiuamf2yq) | `9285% <100%> (-025%)` | `11 <0> (ø)` | || [mockito/internal/session/mockitologgeradapterjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zzxnzaw9ul01vy2tpdg9mb2dnzxjbzgfwdgvylmphdme) | `100% <100%> (ø)` | `2 <2> (?)` | || [ain/java/org/mockito/internal/junit/junitrulejava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9kvw5pdfj1bguuamf2yq) | `96% <923%> (+034%)` | `4 <2> (+1)` | :arrow_up: || [internal/session/defaultmockitosessionbuilderjava](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zzxnzaw9ul0rlzmf1bhrnb2nraxrvu2vzc2lvbkj1awxkzxiuamf2yq) | `9583% <9473%> (-417%)` | `14 <12> (+8)` | ||  and [2 more](https://codecovio/gh/mockito/mockito/pull/1301/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&elfooter) last update [56a94f06a96433](https://codecovio/gh/mockito/mockito/pull/1301?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || @marcphilipp thank you very much for your pr! it looks like this also includes several changes i introduced in https://githubcom/mockito/mockito/pull/1221/commits/68b71db63a6a90d5f7bbfd8ddead295be6972c86 for #1221 we will need to look how this mergessadly i do not have a lot of time for review but i will try to find some time as soon as possible to provide feedback initial look is promising :smile:  || @mockitoguy ive improved the documentation in 360fb5d@timvdlippe sorry i wasnt aware of your changes in #1221 there will definitely be conflicts but the general direction seems to be the same || >@mockitoguy ive improved the documentation in 360fb5dgreat! taking a look now || @marcphilipp can you configure your pr to allow our pushes? i have minor tweaks i want to do before merging and would like to push to your repo for visibility first ive tried to push to your repo branch but i got this:```~/mockito/src$ git push https://githubcom/marcphilipp/mockitogitto https://githubcom/marcphilipp/mockitogit ! [remote rejected]     marcphilipp-issues/1232-session-additions -> marcphilipp-issues/1232-session-additions (permission denied)error: failed to push some refs to https://githubcom/marcphilipp/mockitogit``` || @marcphilipp this pr is great and im almost ready to merge the updates to the docs are good im making tweaks to this pr in this branch: https://githubcom/mockito/mockito/commits/marcphilipp-issues/1232-session-additions making tweaks helps me understand the code and keeps the docs consistent if you allow upstream pushes from this pr it would be useful!we are very happy to take this contribution thank you! || hmm ""allow edits from maintainers"" is enabled so it should work:> if checked users with write access to mockito/mockito can add new commits to your `issues/1232-session-additions` branch you can always change this setting lateranyway ive sent you an invite as a collaborator to my fork that should work in any case please let me know if it did || @mockito/developers can we get your input on method naming?this pr adds:```sessionsetstrictness(strictness)```since in our api we already use ""strictness"" method i suggest we keep it consistent:```java//existing:mockitorulestrictness(strictness)mockitosession()strictness(strictness)//suggested change for this pr:sessionstrictness(strictness)```thoughts? || @mockitoguy i am okay with that :+1:  || thank you @timvdlippe for feedback! @marcphilipp thoughts on strictness vs setstrictness method? in the next day or two ill finish tweaking this pr push changes upstream to your fork and we should be ready to mergethis is very nice improvement and im looking forward eagerly to merge!!! || i went with the setter to emphasize that the old value might already have been used for previously created mocks but didn‘t want to break the api of the rule implementation however i‘d be fine with `strictness()` too! || @marcphilipp thank you for feedback we should be ready to merge soon todays mockito time budget i used on different pr but i have this one on mind every day :) || @marcphilipp before i merge i have 2 requests: - can you update the version in ""versionproperties"" to next minor number (and also the ```@since``` tags)? i believe it will e 2150 - can you add a paragraph to our main javadoc with concise summary of the public api changes check out how we have done it in the past: https://githubcom/mockito/mockito/blob/release/2x/src/main/java/org/mockito/mockitojava#l1451this is a really really nice improvement of the public api for framework integrations big thanks! || @mockitoguy done! feel free to polish what i wrotei merged master into the pr branch to resolve the conflict in versionproperties ill be on vacation the next few days but please go ahead and rebase squash or merge the commits in this branch || great thank you! making a final review and merging || "
1,0,0,0,1,1,0,0,"update public api of invocationfactory needed for android static mocking fixes #1306a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior  a callable that throws athrowable # [codecov](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&elh1) report> merging [#1307](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/1a3bc2e7cfdaf126f67645b8a954cf315172e580?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1307/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1307      +/-   ##+ coverage          8808%   8809%   +001%     - complexity          2321     2323       +2       files                284      284                lines               5857     5863       +6       branches             702      702              + hits                5159     5165       +6       misses               519      519                partials             179      179```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [va/org/mockito/internal/invocation/realmethodjava](https://codecovio/gh/mockito/mockito/pull/1307/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul1jlywxnzxrob2quamf2yq) | `9333% <100%> (+166%)` | `0 <0> (ø)` | :arrow_down: || [/internal/invocation/defaultinvocationfactoryjava](https://codecovio/gh/mockito/mockito/pull/1307/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0rlzmf1bhrjbnzvy2f0aw9urmfjdg9yes5qyxzh) | `100% <100%> (ø)` | `4 <2> (+2)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&elfooter) last update [1a3bc2e641ef30](https://codecovio/gh/mockito/mockito/pull/1307?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || - ""r call() throws throwable"" would conflict with """"r call() throws exception"" so i cannot use subclassing- when just an anonoymous inner realmethodbehavior that wrapps the callable orgmockitousagebasicapimocksserializationtest failsi added a test case that tests the case where the invocation is handled without a throwable || reviewing || >else you should be able to update our internal fromcallable to use a realmethodbehavior and let both createinvocation call this method that should remove the need for a duplicate inner class (since these classes are in internal anyways)+1 i like @timvdlippes idea to reduce duplication i applied that idea to the changes i made on top @moltmanns branch (https://githubcom/mockito/mockito/commits/moltmann-throwcallable) || @mockitoguy- you change https://githubcom/mockito/mockito/commit/017cf577910c2156ed785a18914396bcba3d51f9 seem to break orgmockitousagebasicapimocksserializationforannotationtest  the same issue i saw- how do i apply your changes? manually via ""git am""? || >you change 017cf57 seem to break orgmockitousagebasicapimocksserializationforannotationtest  the same issue i sawouch i missed that use case we need to make the new interface serializable otherwise non-android use cases like powermockito will use the new public api and break when mocks are being serialized (unless they remember to keep the implementation classes serializable) for android use cases we dont need serialization but this new public api will be used in other context tooour strategy is that public interfaces that we expect our users to extend are marked serializable if they are needed for mockitos serialization feature>how do i apply your changes? manually via ""git am""?just pull my changes on top of your branch alternatively configure your pr to allow pushes from mockito devs (did you do it already?) || ""allow edits from maintainers"" should be enabled || @timvdlippe once the build passes im merging thanks for review! || "
1,1,0,1,1,1,1,0,"avoid bytebuddy import issue to enable repackaging without bytebuddy this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest: grep -r -e ""import org\mockito\internal\creation\bytebuddy\[^\]*$"" src/main does not return anythingoffers workaround for #1112 # [codecov](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&elh1) report> merging [#1320](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/723300cc655e14c719233901d8adfdbfbf91ab52?srcpr&eldesc) will **not change** coverage> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1320/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0)](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1320   +/-   ##  coverage          8817%   8817%             complexity          2346     2346             files                289      289             lines               5919     5919             branches             711      711             hits                5219     5219             misses               520      520             partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1320/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <ø> (-659%)` | `5 <0> (-4)` | || [ito/internal/invocation/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/pull/1320/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludgvyy2vwdgvksw52b2nhdglvbi5qyxzh) | `8536% <ø> (ø)` | `25 <0> (?)` | || [/internal/invocation/defaultinvocationfactoryjava](https://codecovio/gh/mockito/mockito/pull/1320/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0rlzmf1bhrjbnzvy2f0aw9urmfjdg9yes5qyxzh) | `100% <100%> (ø)` | `8 <5> (+4)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&elfooter) last update [723300c679172a](https://codecovio/gh/mockito/mockito/pull/1320?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || hey @moltmann - thank you for another contribution! can you elaborate the goals for this pr?this pr changes only internal classes how does it help alternate mockmakers? what does ""cleanly exclude the bytebuddy subdirectory"" mean? || interceptedinvocation is used by all mockmakers hence if you want to order it correctly it should not be in a bytebuddy specific directorythere are currently two ways to build mockito without bytebuddy1 just load mockito-core and exclude netbytebuddy this leaves the bytebuddy-mockmaker in place hence there will be unresolved references into net-bytebuddy this still works as none of these references will be called and (at least on android) loading something with unresolved references just throws some log messages but nothing worse2 you can also take mockito-core unpack it and remove the dependency on netbytebuddy and remove the whole src/org/mockito/internal/creation/bytebuddy folder then you have no references into net-bytebuddy to be able to do this you need this change to clean up the directory structure of mockito as described above also if you even wanted to produce a byte-buddy-less version of mockito this change would be the first you would make || regarding my last comment: during a regular android-gradle build we run a lint checker which finds the issue (1) in my last comment you can suppress this and you are good though || thank you for explanation i updated the title and im absolutely merging! || "
1,1,0,1,1,1,0,1,avoid circularity: avoid endless loop during mock creation if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop (described in comment) fixes #1240it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk 9 or older if we want to add such a test we can copy the test from https://githubcom/guenhter/mockito-final-class-kotlin-problem > if we want to add such a test we can copy the test from https://githubcom/guenhter/mockito-final-class-kotlin-problemyou should be able to add this to the mockito-kotlin subproject i suppose? || does it use the inline mock maker? || true of course! || added a test || does that test really reproduce the issue? that seems awfully simple yet we did not encounter it thus far 😮  || # [codecov](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&elh1) report> merging [#1378](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/cb8f3d9e9906146b8c0d8f82bbcdfa677b29f475?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `8888%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1378/graphs/treesvg?tokenmx80slder0&height150&srcpr&width650)](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1378      +/-   ##+ coverage          8861%   8861%   +<01%     - complexity          2353     2355       +2       files                292      292                lines               5936     5945       +9       branches             716      718       +2     + hits                5260     5268       +8       misses               497      497              - partials             179      180       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1378/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `9285% <8888%> (-035%)` | `25 <2> (+2)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&elfooter) last update [cb8f3d9d598719](https://codecovio/gh/mockito/mockito/pull/1378?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || it is really dependent on what classes are referenced by the generated byte code and if we are using this in the code that determines if an instance is a mock or not only if those classes are not yet loaded and if we are using some code transitively ourselves this issue reproduces so it is not so surprising that this only surfaces in an isolated unit test as this is partly global vm state dependant ||
1,0,0,0,0,1,0,0,fixes #1386: adding atmostonce() rename threadverifiescontinuoslyinteractingmocktest and one todo hii would like to make a quick contribution on this projecti add atmostonce() it seems not to be a big feature i just want to highlight the fact you have the function atleastonce() but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring() from hamcrestargumentmatcher # [codecov](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&elh1) report> merging [#1387](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/f5c988689df5313d3af311e78169c73e31f569da?srcpr&eldesc) will **decrease** coverage by `<01%`> the diff coverage is `6666%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1387/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1387      +/-   ##- coverage          8653%   8652%   -001%     - complexity          2478     2480       +2       files                308      308                lines               6522     6525       +3       branches             818      818              + hits                5644     5646       +2     - misses               680      681       +1       partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ito/internal/hamcrest/hamcrestargumentmatcherjava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9oyw1jcmvzdc9iyw1jcmvzdefyz3vtzw50twf0y2hlci5qyxzh) | `100% <ø> (ø)` | `4 <0> (ø)` | :arrow_down: || [ito/internal/verification/verificationwrapperjava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9uv3jhchblci5qyxzh) | `9166% <0%> (-834%)` | `8 <0> (ø)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9666% <100%> (+005%)` | `41 <1> (+1)` | :arrow_up: || [internal/verification/verificationmodefactoryjava](https://codecovio/gh/mockito/mockito/pull/1387/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9utw9kzuzhy3rvcnkuamf2yq) | `90% <100%> (+111%)` | `9 <1> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&elfooter) last update [f5c9886e385633](https://codecovio/gh/mockito/mockito/pull/1387?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,0,0,1,1,0,0,javadoc: #1438 update ignorestubs to include strictness it updates `ignorestubs()` docs to include `strictness` information (#1438) # [codecov](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&elh1) report> merging [#1439](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/2613e0ba972c54dab34d1e2e36d37ec95dad366f?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1439/graphs/treesvg?srcpr&tokenmx80slder0&width650&height150)](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&eltree)```diff@@              coverage diff               @@##             release/2x    #1439   +/-   ##  coverage          8862%   8862%             complexity          2358     2358             files                292      292             lines               5950     5950             branches             719      719             hits                5273     5273             misses               497      497             partials             180      180```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1439/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9655% <ø> (ø)` | `39 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&elfooter) last update [2613e0bf1723c1](https://codecovio/gh/mockito/mockito/pull/1439?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || this is ready to merge ill wait until current build is complete and merge it || thank you! ||
1,0,0,0,1,1,1,0,"exposed new api - stubbinglookuplistener exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding! # [codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elh1) report> merging [#1543](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/02c39882f3552cf1d408a11380fbb674096b8719?srcpr&eldesc) will **increase** coverage by `122%`> the diff coverage is `90%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1543/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1543      +/-   ##+ coverage          8736%   8858%   +122%     + complexity          2434     2401      -33       files                300      299       -1       lines               6259     6046     -213       branches             777      735      -42     - hits                5468     5356     -112     + misses               595      511      -84     + partials             196      179      -17```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9583% <ø> (-017%)` | `11 <0> (-1)` | || [ito/internal/listeners/stubbinglookupnotifierjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9saxn0zw5lcnmvu3r1ymjpbmdmb29rdxbob3rpzmllci5qyxzh) | `9473% <ø> (ø)` | `3 <0> (ø)` | :arrow_down: || [/internal/junit/strictstubsrunnertestlistenerjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9tdhjpy3rtdhvic1j1bm5lclrlc3rmaxn0zw5lci5qyxzh) | `100% <100%> (ø)` | `3 <1> (ø)` | :arrow_down: || [o/internal/creation/settings/creationsettingsjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9zzxr0aw5ncy9dcmvhdglvblnldhrpbmdzlmphdme) | `100% <100%> (ø)` | `23 <0> (ø)` | :arrow_down: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9368% <100%> (ø)` | `91 <1> (+1)` | :arrow_up: || [rg/mockito/internal/creation/mocksettingsimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9nb2nru2v0dgluz3njbxbslmphdme) | `9302% <8333%> (+008%)` | `43 <2> (-1)` | :arrow_down: || [mockito/internal/stubbing/consecutivestubbingjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9db25zzwn1dgl2zvn0dwjiaw5nlmphdme) | `8571% <0%> (-1429%)` | `3% <0%> (+1%)` | || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `9166% <0%> (-834%)` | `6% <0%> (+1%)` | || [nal/stubbing/defaultanswers/returnssmartnullsjava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zu21hcnrodwxscy5qyxzh) | `8888% <0%> (-767%)` | `3% <0%> (-17%)` | || [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `8695% <0%> (-638%)` | `19% <0%> (-1%)` | ||  and [24 more](https://codecovio/gh/mockito/mockito/pull/1543/diff?srcpr&eltree-more) | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&elfooter) last update [02c398849a1d85](https://codecovio/gh/mockito/mockito/pull/1543?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || it looks good to me! || ill update the version / since tags and will merge shortly (most likely tomorrow) ||"
1,0,0,0,1,1,0,0,fixed issue with leftover state when stubbing with bad throwables fixed issue with leftover state when stubbing with bad throwables fixes #1514 good catch || # [codecov](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&elh1) report> merging [#1549](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/16271ee313350e47855dc4a225e1edcb048a9a91?srcpr&eldesc) will **increase** coverage by `021%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1549/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1549      +/-   ##+ coverage          8857%   8879%   +021%     - complexity          2406     2539     +133       files                299      299                lines               6057     6263     +206       branches             736      763      +27     + hits                5365     5561     +196     - misses               511      522      +11     + partials             181      180       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ava/org/mockito/internal/stubbing/stubberimpljava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvysw1wbc5qyxzh) | `9333% <100%> (+637%)` | `20 <0> (+1)` | :arrow_up: || [mockito/internal/stubbing/consecutivestubbingjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9db25zzwn1dgl2zvn0dwjiaw5nlmphdme) | `909% <0%> (-91%)` | `4% <0%> (+2%)` | || [mockito/internal/stubbing/ongoingstubbingimpljava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9pbmdvaw5nu3r1ymjpbmdjbxbslmphdme) | `9411% <0%> (-589%)` | `7% <0%> (+2%)` | || [va/org/mockito/internal/stubbing/basestubbingjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9cyxnlu3r1ymjpbmcuamf2yq) | `9166% <0%> (-209%)` | `30% <0%> (+12%)` | || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9339% <0%> (-029%)` | `180% <0%> (+90%)` | || [/internal/junit/defaultstubbinglookuplistenerjava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9qdw5pdc9ezwzhdwx0u3r1ymjpbmdmb29rdxbmaxn0zw5lci5qyxzh) | `9655% <0%> (+055%)` | `14% <0%> (+2%)` | :arrow_up: || [rc/main/java/org/mockito/internal/mockitocorejava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9nb2nraxrvq29yzs5qyxzh) | `985% <0%> (+061%)` | `59% <0%> (+22%)` | :arrow_up: || [a/org/mockito/internal/debugging/locationimpljava](https://codecovio/gh/mockito/mockito/pull/1549/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9kzwj1z2dpbmcvtg9jyxrpb25jbxbslmphdme) | `923% <0%> (+283%)` | `10% <0%> (+2%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&elfooter) last update [16271ee93540e7](https://codecovio/gh/mockito/mockito/pull/1549?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
0,0,0,0,1,1,1,0,fix/bug 1551 cce on smart not null answers this pr intends to fix #1551 for fix it the `returnssmartnulls` answer use now some reflection to find the correct return type instead of the `javautilobject`when the return type can be found it will start to retrieve empty values using the answer `returnsmoreemptyvalues` & `returnsemptyvalues` before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the `answer` will return a `null` instead of `object` mocki think it may be possible to improve this code any suggestion will be welcome ! # [codecov](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&elh1) report> merging [#1576](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/0c4e494a16141a65f22605a57382a222040f340b?srcpr&eldesc) will **increase** coverage by `007%`> the diff coverage is `9523%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1576/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1576      +/-   ##+ coverage          8849%   8857%   +007%     - complexity          2408     2425      +17       files                299      299                lines               6059     6099      +40       branches             739      752      +13     + hits                5362     5402      +40     + misses               515      514       -1     - partials             182      183       +1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [nal/stubbing/defaultanswers/returnssmartnullsjava](https://codecovio/gh/mockito/mockito/pull/1576/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zu21hcnrodwxscy5qyxzh) | `9655% <9523%> (+766%)` | `20 <13> (+17)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&elfooter) last update [0c4e49473a9bf5](https://codecovio/gh/mockito/mockito/pull/1576?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,0,0,0,1,1,1,0,return null instead of causing a cce this solves a large number of edge-cases where `null` will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes #357 a previous pr resolved the sameissue with returnssmartnulls: #1576fixes #357 # [codecov](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&elh1) report> merging [#1612](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/f11705be91ee3545bc006908b34425f1fc359898?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1612/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1612      +/-   ##+ coverage          8754%   8755%   +<01%     - complexity          2437     2438       +1       files                300      300                lines               6257     6259       +2       branches             776      777       +1     + hits                5478     5480       +2       misses               582      582                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1612/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <100%> (ø)` | `16 <0> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&elfooter) last update [f11705b845addc](https://codecovio/gh/mockito/mockito/pull/1612?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
1,1,1,1,1,1,1,0,"new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes #1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it || # [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elh1) report> merging [#1619](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/af2d33be7fbfecad172cef4da2127b8d9a6fbe31?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `8571%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1619/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1619      +/-   ##+ coverage          8738%   8741%   +002%     - complexity          2435     2442       +7       files                301      301                lines               6278     6285       +7       branches             784      784              + hits                5486     5494       +8       misses               596      596              + partials             196      195       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (+358%)` | `14 <2> (+3)` | :arrow_up: || [to/internal/framework/defaultmockitoframeworkjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9gcmftzxdvcmsuamf2yq) | `8947% <80%> (-1053%)` | `10 <5> (+5)` | || [ternal/util/reflection/genericmetadatasupportjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy01ldgfkyxrhu3vwcg9ydc5qyxzh) | `8686% <0%> (-027%)` | `38% <0%> (ø)` | || [aultanswers/retrievegenericsfordefaultanswersjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxryawv2zudlbmvyawnzrm9yrgvmyxvsdefuc3dlcnmuamf2yq) | `9591% <0%> (-024%)` | `20% <0%> (-1%)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <0%> (ø)` | `40% <0%> (ø)` | :arrow_down: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <0%> (ø)` | `5% <0%> (ø)` | :arrow_down: || [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <0%> (+217%)` | `16% <0%> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elfooter) last update [af2d33b959cba4](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you for the pr! since this is changing / adding new public api i will review it too (many thanks to @timvdlippe for offering to review this!) ill commit to provide review by the end of this week || thanks to @mockitoguy just some context here i tried to avoid new api at first but `defaultmockitosession` seems (at least from tests) to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi-threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in `mockmaker` interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl (if only java 8+ is supported) or a brand new interface called `inlinemockmaker` to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those 2 places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation || i reviewed the implementation and most of it is really good it is also a very high quality pr thank you! curious are you facing this problem at g?i have a couple of concerns / design choices to discuss: a) can we make the fix more seamless? im not sure if this is possible but lets discuss goals: users dont have to remember to use trackandcleanupmocks() _when_ inline mocker is in use for example (brainstorming): 	- we introduce a new interface that inlinebytebuddymockmaker implements say: requirescleaningmocks 	- we expose a new method like frameworkgetplugins()getplugin(mockmackerclass) this way we can find out in runtime what mockmaker is in use 	- in mockito session we check if the mock maker is requirescleaningmocks 	- in session we call requirescleaningmockscleanupmock() b) mockmakercleanupmock() is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar (example: dexmaker powermockito) i have a couple ideas but first lets explore a) great tests deep change in the internals of mockito thank you very much for the contribution!  || thanks for your review @mockitoguy dexmaker is incubating a feature in inline-dexmaker to create spies without creating new instances so that we can stub final members and we (android framework) found these mem leaks when using that i then found #1533 and reproduced #1614 that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from @timvdlippe first of all i really didnt see a solution w/o tying mock lives with something and i think `mockitosession` is the most natural choice for the ""something"" so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid `trackandcleanupmocks()` the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because [`failontimeout`][failontimeout] basically runs tests in different threads than the thread used to run before and after before this change user can have multiple `defaultmockitosession` as long as they are in different threads (`threadsrunalltestshalfmanualtest` also verifies that behavior) and not interfering with each other however if we convert `defaultmockitosession` to have ""thread global"" influence `threadrunalltestshalfmanualtest` will fail because cross-threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way (a bit hacky though) to make it work but i dont think its complication outweighs the new api (given that its already not transparent to users) it doesnt encourage clean tests in multi-threading scenario either imho however i can still put my thought here and let you decide if we should take it:- dont reject registration of global listeners if its from a different thread for the same type- only clean up mocks when the last `mocktracker` is unregisteredthen it basically treats the life of any `defaultmockitosession` as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom[failontimeout]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock() im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic `mockmaker` interface and nothing should break while they can choose to implement `inlinemockmaker` if clean up is necessary || just to be clear that im waiting for @mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks() api just in case were waiting for each other and its going nowhere || as a sidenote: the refactoring with the new inlinemockmaker interface is :+1: for me :smile:  || hey @ttanxu so you youre saying that the approach i suggested in a) wouldnt work? || > oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock()great! ill review again this weekend || > as a sidenote: the refactoring with the new inlinemockmaker interface is 👍 for me 😄@timvdlippe im with you its a good idea to have a separate interface and stay compatible || hey @mockitoguy  what you suggested could solve the same issue that is solved by `inlinemockmaker` in current pr (the mockmaker contract breakage)`trackandcleanupmocks()` was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments (mostly because of the multi-thread implementation of [`failontimeout`][1] in junit)[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || @ttanxu thank you for explanation im looking into it || my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession? when the session completes it tears down its mockmaker/cleans up all mocks we could use threadlocal thoughts? || correct me if im wrongit seems youre suggesting one `mockmaker` per thread the critical part of this approach is the mock map in the inline mock maker needs to be a `threadlocal` which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if [`failontimeout`][1] is used befores and afters are executed in a different thread than the test methodif we still only have one `mockmaker` across all threads then the structure is pretty much the same as current change except that instead of calling `inlinemockmaker#clearup()` we just tear down the entire `mockmaker` im not sure if this is better than calling `clearup()` it does sound like a viable solution w/o introduction to `inlinemockmaker` as we can just swap the instance of `mockmaker` in `pluginregistry` the con is thats more of a systematic refactor than `inlinemockmaker#clearup()` approach and it reduces the cleanness of current code (we cant use final for `mockmaker` in `pluginregistry` anymore) btw this doesnt help avoid a new api `trackandclearupmocks()` in `mockitosession` ill leave this decision to you[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || great points thank you for taking the time to explain why do we need to keep track of specific mocks? can we just clear all? || oh you say we dont have to save created mocks in a list in `mocktracker`? i guess we can just clear all mocks especially considering there cant be multiple mock-tracking sessions open at the same time mocks created before the session is opened may be leakedremoving `mocktracker` can simply this change a lot especially we dont need global listeners ill update the change || actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep `cleanup(object)` signature (or we can have `cleanup(object)` instead so that we can clean up everything if object array is `null`) for `inlinemockmaker` just in case we want to support the case abovewith that said ill change `cleanup(object)` to `cleanup(object)` and use `null` array for clean up everything || oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito? || thank you for considering! i want us to strive for simplicity ill think about the new api for mockito (or mockitoframework)if we have a static method like ""mockitoframework()clearallmocks()"" would it work for you? > eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for ""static"" mocks? it seems an anti-pattern || finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks || reviewing || we are ready thank you @ttanxu and @timvdlippe for patience! this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place@ttanxu i made some tweaks to tests documentation ive also renamed the method to ""clearmocks() -> clearinlinemocks()"" for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change!@timvdlippe i did some cosmetic changes please review if you want thanks! || i will review this on monday in the office thanks for the polish! || > test user can safely call clearinlinemocks() and clearmock() even when mock maker is not a inline mock maker@ttanxu great point! || im making the final tweaks based on the code review and im merging || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || "
1,1,1,1,1,1,1,0,"new api to clean up all inline mocks after test in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with themfixes #1532 and #1533 i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it || # [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elh1) report> merging [#1619](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/af2d33be7fbfecad172cef4da2127b8d9a6fbe31?srcpr&eldesc) will **increase** coverage by `002%`> the diff coverage is `8571%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1619/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1619      +/-   ##+ coverage          8738%   8741%   +002%     - complexity          2435     2442       +7       files                301      301                lines               6278     6285       +7       branches             784      784              + hits                5486     5494       +8       misses               596      596              + partials             196      195       -1```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6842% <100%> (+358%)` | `14 <2> (+3)` | :arrow_up: || [to/internal/framework/defaultmockitoframeworkjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9mcmftzxdvcmsvrgvmyxvsde1vy2tpdg9gcmftzxdvcmsuamf2yq) | `8947% <80%> (-1053%)` | `10 <5> (+5)` | || [ternal/util/reflection/genericmetadatasupportjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl3jlzmxly3rpb24vr2vuzxjpy01ldgfkyxrhu3vwcg9ydc5qyxzh) | `8686% <0%> (-027%)` | `38% <0%> (ø)` | || [aultanswers/retrievegenericsfordefaultanswersjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxryawv2zudlbmvyawnzrm9yrgvmyxvsdefuc3dlcnmuamf2yq) | `9591% <0%> (-024%)` | `20% <0%> (-1%)` | || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9661% <0%> (ø)` | `40% <0%> (ø)` | :arrow_down: || [rnal/creation/bytebuddy/mockmethodinterceptorjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9ja01ldghvzeludgvyy2vwdg9ylmphdme) | `7272% <0%> (ø)` | `5% <0%> (ø)` | :arrow_down: || [rnal/stubbing/defaultanswers/returnsdeepstubsjava](https://codecovio/gh/mockito/mockito/pull/1619/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9kzwzhdwx0yw5zd2vycy9szxr1cm5zrgvlcfn0dwjzlmphdme) | `100% <0%> (+217%)` | `16% <0%> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&elfooter) last update [af2d33b959cba4](https://codecovio/gh/mockito/mockito/pull/1619?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || thank you for the pr! since this is changing / adding new public api i will review it too (many thanks to @timvdlippe for offering to review this!) ill commit to provide review by the end of this week || thanks to @mockitoguy just some context here i tried to avoid new api at first but `defaultmockitosession` seems (at least from tests) to be used within a thread and changing its default behavior to listen on events from all threads will break tests for multi-threading therefore i came up with the new api solutioni didnt know how much impact there would be to add a new method in `mockmaker` interface that requires everyone providing an implementation when they uprev their mockito to a version that has the new method but i have no clue how much work it could be if its too noisy maybe we can have a default impl (if only java 8+ is supported) or a brand new interface called `inlinemockmaker` to add that method i personally want to expose a chance to mock makers to clean up as we dont know how they handle the mapping from mock to its handler which may have other places that could cause memory leaks other than those 2 places we found we need better documentation on that but i have to admit im not good at writing api docs so ill defer to any of your suggestions in terms of documentationi hope the review wont later become a whole refactor of current implementation || i reviewed the implementation and most of it is really good it is also a very high quality pr thank you! curious are you facing this problem at g?i have a couple of concerns / design choices to discuss: a) can we make the fix more seamless? im not sure if this is possible but lets discuss goals: users dont have to remember to use trackandcleanupmocks() _when_ inline mocker is in use for example (brainstorming): 	- we introduce a new interface that inlinebytebuddymockmaker implements say: requirescleaningmocks 	- we expose a new method like frameworkgetplugins()getplugin(mockmackerclass) this way we can find out in runtime what mockmaker is in use 	- in mockito session we check if the mock maker is requirescleaningmocks 	- in session we call requirescleaningmockscleanupmock() b) mockmakercleanupmock() is an incompatible change so we cannot ship this pr in its current form mockmaker is typically provided at runtime from a different jar (example: dexmaker powermockito) i have a couple ideas but first lets explore a) great tests deep change in the internals of mockito thank you very much for the contribution!  || thanks for your review @mockitoguy dexmaker is incubating a feature in inline-dexmaker to create spies without creating new instances so that we can stub final members and we (android framework) found these mem leaks when using that i then found #1533 and reproduced #1614 that i confirmed it also happens with bytebuddy mock makers so i started the fix with help from @timvdlippe first of all i really didnt see a solution w/o tying mock lives with something and i think `mockitosession` is the most natural choice for the ""something"" so technically its already not transparent to properly use inline mock makers because sessions are necessary to make it work while its optional to use subclass mock makersi also first tried to avoid `trackandcleanupmocks()` the difficulty actually comes from the fact mockitolisteners are threadlocal before this change and its a requirement to track mocks generated from other threads because [`failontimeout`][failontimeout] basically runs tests in different threads than the thread used to run before and after before this change user can have multiple `defaultmockitosession` as long as they are in different threads (`threadsrunalltestshalfmanualtest` also verifies that behavior) and not interfering with each other however if we convert `defaultmockitosession` to have ""thread global"" influence `threadrunalltestshalfmanualtest` will fail because cross-threads mock cleanup will invalidate mocks created in tests running in a different threadi think i have a way (a bit hacky though) to make it work but i dont think its complication outweighs the new api (given that its already not transparent to users) it doesnt encourage clean tests in multi-threading scenario either imho however i can still put my thought here and let you decide if we should take it:- dont reject registration of global listeners if its from a different thread for the same type- only clean up mocks when the last `mocktracker` is unregisteredthen it basically treats the life of any `defaultmockitosession` as mock lives it doesnt allow user to precisely control mock lives but with some care users should still be able to avoid oom[failontimeout]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock() im not sure if the plugin way is still preferred over current change because for most dexmakers theyre still just implementing the basic `mockmaker` interface and nothing should break while they can choose to implement `inlinemockmaker` if clean up is necessary || just to be clear that im waiting for @mockitoguy s response on if we would like to go for that approach in exchange of removing trackandcleanupmocks() api just in case were waiting for each other and its going nowhere || as a sidenote: the refactoring with the new inlinemockmaker interface is :+1: for me :smile:  || hey @ttanxu so you youre saying that the approach i suggested in a) wouldnt work? || > oh i already added `inlinemockmaker` interface so not all mock makers need to implement cleanupmock()great! ill review again this weekend || > as a sidenote: the refactoring with the new inlinemockmaker interface is 👍 for me 😄@timvdlippe im with you its a good idea to have a separate interface and stay compatible || hey @mockitoguy  what you suggested could solve the same issue that is solved by `inlinemockmaker` in current pr (the mockmaker contract breakage)`trackandcleanupmocks()` was introduced for other reason but could use different tech to remove its necessity i explained the detail in previous comments (mostly because of the multi-thread implementation of [`failontimeout`][1] in junit)[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || @ttanxu thank you for explanation im looking into it || my comment is short but i put a lot of consideration into this given all arguments i agree that a new api is the best way before we ship it i want to bounce one more idea what if we tie mockmaker with mockitosession? when the session completes it tears down its mockmaker/cleans up all mocks we could use threadlocal thoughts? || correct me if im wrongit seems youre suggesting one `mockmaker` per thread the critical part of this approach is the mock map in the inline mock maker needs to be a `threadlocal` which means mocks wont look have handlers tied to them in threads other than the thread where they were created and thus wont appear to be a mock and method invocations on it might trigger exceptions thats not likely a compatible change to existing use cases because if [`failontimeout`][1] is used befores and afters are executed in a different thread than the test methodif we still only have one `mockmaker` across all threads then the structure is pretty much the same as current change except that instead of calling `inlinemockmaker#clearup()` we just tear down the entire `mockmaker` im not sure if this is better than calling `clearup()` it does sound like a viable solution w/o introduction to `inlinemockmaker` as we can just swap the instance of `mockmaker` in `pluginregistry` the con is thats more of a systematic refactor than `inlinemockmaker#clearup()` approach and it reduces the cleanness of current code (we cant use final for `mockmaker` in `pluginregistry` anymore) btw this doesnt help avoid a new api `trackandclearupmocks()` in `mockitosession` ill leave this decision to you[1]: https://githubcom/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/failontimeoutjava#l120 || great points thank you for taking the time to explain why do we need to keep track of specific mocks? can we just clear all? || oh you say we dont have to save created mocks in a list in `mocktracker`? i guess we can just clear all mocks especially considering there cant be multiple mock-tracking sessions open at the same time mocks created before the session is opened may be leakedremoving `mocktracker` can simply this change a lot especially we dont need global listeners ill update the change || actually i recall that the thought of tracking specific mocks stemmed from the thought that usually mocks have different lives eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different lives it would be nice if we can keep mocks created in beforeclass for later reusecurrent impl is half baked because there can only be one tracking session but i want to keep `cleanup(object)` signature (or we can have `cleanup(object)` instead so that we can clean up everything if object array is `null`) for `inlinemockmaker` just in case we want to support the case abovewith that said ill change `cleanup(object)` to `cleanup(object)` and use `null` array for clean up everything || oh besides if we just want to clear everything it doesnt seem natural to me to add the api to mockitosession maybe we can add an api to mockito? || thank you for considering! i want us to strive for simplicity ill think about the new api for mockito (or mockitoframework)if we have a static method like ""mockitoframework()clearallmocks()"" would it work for you? > eg mocks held by static variables created in beforeclass in before and in individual tests may need to have different livesdo we know legit use cases for ""static"" mocks? it seems an anti-pattern || finally cleaned up all remains from previous change its a lot simpler now please take a looki can think of a case for static mocks where constructing a mock may be expensive and someone wants to reuse it across tests thats not an argument why static mocks have to be used though they can definitely reconstruct those mocks || reviewing || we are ready thank you @ttanxu and @timvdlippe for patience! this is the best pragmatic step to resolve the problem in the future perhaps we can avoid having the weak map of references in a first place@ttanxu i made some tweaks to tests documentation ive also renamed the method to ""clearmocks() -> clearinlinemocks()"" for consistency take a look and see if youre ok with this let us know and ill merge this nice work with this change!@timvdlippe i did some cosmetic changes please review if you want thanks! || i will review this on monday in the office thanks for the polish! || > test user can safely call clearinlinemocks() and clearmock() even when mock maker is not a inline mock maker@ttanxu great point! || im making the final tweaks based on the code review and im merging || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || "
1,0,0,1,1,0,1,0,new public api: invocationgetargumentsasmatchers() - new public api: invocationgetargumentsasmatchers() useful for advanced integrations such as mockito-scala- some internal refactorings that provide temporary help with mockito-scala integrationfixes #1664 # [codecov](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&elh1) report> merging [#1665](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/d6098a6bbdfbafd966a2078627a90d9ffbedc7ea?srcpr&eldesc) will **decrease** coverage by `003%`> the diff coverage is `5714%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1665/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1665      +/-   ##- coverage          8739%   8735%   -004%     - complexity          2446     2447       +1       files                302      302                lines               6325     6329       +4       branches             787      787              + hits                5528     5529       +1     - misses               603      606       +3       partials             194      194```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [mockito/internal/invocation/invocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1665/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludm9jyxrpb25nyxrjagvylmphdme) | `9782% <100%> (ø)` | `25 <0> (ø)` | :arrow_down: || [/org/mockito/internal/reporting/printsettingsjava](https://codecovio/gh/mockito/mockito/pull/1665/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9yzxbvcnrpbmcvuhjpbnrtzxr0aw5ncy5qyxzh) | `100% <100%> (ø)` | `12 <1> (ø)` | :arrow_down: || [ito/internal/invocation/interceptedinvocationjava](https://codecovio/gh/mockito/mockito/pull/1665/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9pbnzvy2f0aw9ul0ludgvyy2vwdgvksw52b2nhdglvbi5qyxzh) | `7826% <40%> (-508%)` | `26 <2> (+1)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&elfooter) last update [d6098a647f6792](https://codecovio/gh/mockito/mockito/pull/1665?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || i agree that the pr has not a single purpose but given the changes were minimal i thought it wouldnt be a problemi can split it if you prefer so || @mockitoguy @timvdlippe hey guys thanks for your inputi took a different approach now and the amount of changes required seems lower the tldr story is that i kept the non-public-interface getters on `interceptedinvocation` and i added a new one (which is public) that exposes the arguments as matchers in this way we can delegate this transformation to the invocation which makes it more consistent across the code and also allows me to override said method to use my own matchers which have their own tostring so i can customise how they are printed without having to mess that much with the internals of mockito-coreplease let me know your thoughts || @mockitoguy ive improved the javadoc || restarted the build if it is happy ill merge! || @timvdlippe @mockitoguy sorry to bother guys but could you release this to maven central? or otherwise when is the next notable version coming out?cheers || travis should be on its way: https://githubcom/mockito/mockito/commit/8824e3e57daedce988c2cfc8d4c2b85bca488dbf || @timvdlippe much appreciated || the build failed though (#1682) and i am not sure if it has actually pushed the artifact to maven central || thank you! ||
1,0,0,1,1,1,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of #1556 with the tests fixed and implementation rebased on `release/2x`fixes #1542  
1,1,0,1,1,1,0,1,fixes #1717 : configure the methodvisitor for java 11 compatibility im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java 11 this should fix #1717 || # [codecov](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&elh1) report> merging [#1718](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&eldesc) into [release/2x](https://codecovio/gh/mockito/mockito/commit/71603d46ebd8d1e35a55e4d54651b77ae46ccb49?srcpr&eldesc) will **decrease** coverage by `085%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1718/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&eltree)```diff@@                coverage diff                @@##             release/2x    #1718      +/-   ##- coverage          8653%   8567%   -086%     + complexity          2481     2477       -4       files                309      309                lines               6528     6528                branches             818      818              - hits                5649     5593      -56     - misses               681      747      +66     + partials             198      188      -10```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `7816% <100%> (-986%)` | `26 <0> (-1)` | || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `2105% <0%> (-50%)` | `4% <0%> (-2%)` | || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | `961% <0%> (-1731%)` | `2% <0%> (ø)` | || [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1718/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `6585% <0%> (-122%)` | `8% <0%> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&elfooter) last update [71603d4a626b1c](https://codecovio/gh/mockito/mockito/pull/1718?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ive added a unit test thanks to [an article](https://wwwjavacodegeekscom/2018/08/hands-on-java-constantdynamichtml) written by @raphw of course || could you update the pr to use `openedclassreaderasm_api` this way if byte buddys experimental feature is used mockito is capable of processing class files || @raphw done ive also rebased on `release/2x` || lgtm || i will merge this and publish a new version ||
1,0,0,1,1,1,0,0,fixed junit jupiter parallel issue fixes #1630this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it # [codecov](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&elh1) report> merging [#1789](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/214d4652aa1971cb554c434b0ac13b376aea33a7?srcpr&eldesc) will **increase** coverage by `<01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1789/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1789      +/-   ##+ coverage          8658%   8659%   +<01%     - complexity          2491     2492       +1       files                310      310                lines               6562     6566       +4       branches             822      823       +1     + hits                5682     5686       +4       misses               682      682                partials             198      198```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [va/org/mockito/junit/jupiter/mockitoextensionjava](https://codecovio/gh/mockito/mockito/pull/1789/diff?srcpr&eltree#diff-c3vichjvamvjdhmvanvuaxqtanvwaxrlci9zcmmvbwfpbi9qyxzhl29yzy9tb2nraxrvl2p1bml0l2p1cgl0zxivtw9ja2l0b0v4dgvuc2lvbi5qyxzh) | `9148% <100%> (+079%)` | `14 <0> (+1)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&elfooter) last update [214d4655ed8a07](https://codecovio/gh/mockito/mockito/pull/1789?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || this is much nicer thank you!!! ||
1,1,0,0,1,1,0,0,fix typo in the wiki link fixes #1791check list - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&elh1) report> merging [#1798](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/ded29efbfbd7be6e3a0a2fdae07d370d099be625?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1798/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&eltree)```diff@@              coverage diff              @@##             release/3x   #1798   +/-   ##  coverage           866%   866%             complexity          2494    2494             files                310     310             lines               6564    6564             branches             821     821             hits                5685    5685             misses               682     682             partials             197     197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1798/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <ø> (ø)` | `42 <0> (ø)` | :arrow_down: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&elfooter) last update [ded29ef1250bba](https://codecovio/gh/mockito/mockito/pull/1798?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||
0,0,0,0,0,1,0,0,"revert ""fixes #1587 : remove unnecessary loop from injectingannotationengine"" reverts mockito/mockito#1588related to #1631 heres a pseudo code to describe the issues around this issue# before 22315:	```while (clazz ! objectclazz) {	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }	clazz  clazzgetsuperclass()}```# after 22315:```	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }```# detailsbefore 22315 if the `@injectmocks` field has a field that not listed in the constructor argument will fill by setter/property injection at the 2nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the [fixes #1587 : remove unnecessary loop from injectingannotationengine by lihmeh · pull request #1588 · mockito/mockito · github](https://githubcom/mockito/mockito/pull/1588) at this time why travis fails? || this needs a rebase that should fix travis (presumably) || # [codecov](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&elh1) report> merging [#1810](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/a9c5105f8fda310a00b6d784a8bf9fb694a94610?srcpr&eldesc) will **increase** coverage by `001%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1810/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1810      +/-   ##+ coverage          8676%   8677%   +001%     - complexity          2494     2496       +2       files                311      311                lines               6552     6557       +5       branches             821      822       +1     + hits                5685     5690       +5       misses               670      670                partials             197      197```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ernal/configuration/injectingannotationenginejava](https://codecovio/gh/mockito/mockito/pull/1810/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jb25mawd1cmf0aw9ul0luamvjdgluz0fubm90yxrpb25fbmdpbmuuamf2yq) | `100% <100%> (ø)` | `9 <2> (+2)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&elfooter) last update [a9c5105b08d5c2](https://codecovio/gh/mockito/mockito/pull/1810?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || rebased || @timvdlippe added test case ||"
1,1,0,1,1,1,0,0,"revert ""add duration overloads fixes #1815"" reverts mockito/mockito#1818fixes #1843 # [codecov](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&elh1) report> merging [#1845](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/517faccdcf9f9d41f3664fc7955f387608a43a5e?srcpr&eldesc) will **increase** coverage by `004%`> the diff coverage is `96%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1845/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1845      +/-   ##+ coverage          8664%   8669%   +004%     + complexity          2507     2505       -2       files                314      314                lines               6613     6606       -7       branches             829      829              - hits                5730     5727       -3     + misses               682      678       -4       partials             201      201```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <ø> (ø)` | `93 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/mockitojava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9nb2nraxrvlmphdme) | `9677% <100%> (-011%)` | `42 <2> (-2)` | || [nternal/verification/verificationovertimeimpljava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9ut3zlclrpbwvjbxbslmphdme) | `921% <100%> (ø)` | `16 <5> (ø)` | :arrow_down: || [src/main/java/org/mockito/verification/afterjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by92zxjpzmljyxrpb24vqwz0zxiuamf2yq) | `100% <100%> (+2222%)` | `4 <2> (ø)` | :arrow_down: || [rc/main/java/org/mockito/verification/timeoutjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by92zxjpzmljyxrpb24vvgltzw91dc5qyxzh) | `8181% <100%> (+1258%)` | `5 <3> (ø)` | :arrow_down: || [erification/verificationwrapperinorderwrapperjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc92zxjpzmljyxrpb24vvmvyawzpy2f0aw9uv3jhchblcklut3jkzxjxcmfwcgvylmphdme) | `100% <100%> (ø)` | `6 <0> (ø)` | :arrow_down: || [src/main/java/org/mockito/internal/util/timerjava](https://codecovio/gh/mockito/mockito/pull/1845/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1rpbwvylmphdme) | `8571% <90%> (-096%)` | `8 <7> (ø)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&elfooter) last update [517facc3106716](https://codecovio/gh/mockito/mockito/pull/1845?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
1,0,0,1,1,1,0,0,fixed undetected unused stubbing when matching previous stubbed call fixes #1846 # [codecov](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&elh1) report> merging [#1847](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/204f9c169aa81f613334dc4301e0a062627565a5?srcpr&eldesc) will **increase** coverage by `017%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1847/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&eltree)```diff@@                coverage diff                @@##             release/3x    #1847      +/-   ##+ coverage          8669%   8687%   +017%     - complexity          2505     2517      +12       files                314      314                lines               6606     6619      +13       branches             829      831       +2     + hits                5727     5750      +23     + misses               678      671       -7     + partials             201      198       -3```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [to/internal/stubbing/stubbedinvocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvksw52b2nhdglvbk1hdgnozxiuamf2yq) | `100% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `9577% <100%> (+077%)` | `34 <4> (+3)` | :arrow_up: || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9354% <100%> (+002%)` | `93 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/reporting/pluralizerjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9yzxbvcnrpbmcvugx1cmfsaxplci5qyxzh) | `8333% <100%> (+333%)` | `6 <2> (+2)` | :arrow_up: || [ternal/exceptions/stacktrace/stacktracefilterjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl3n0ywnrdhjhy2uvu3rhy2tucmfjzuzpbhrlci5qyxzh) | `8048% <0%> (+243%)` | `10% <0%> (+2%)` | :arrow_up: || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `7368% <0%> (+263%)` | `7% <0%> (+1%)` | :arrow_up: || [creation/bytebuddy/subclassbytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3ncexrlqnvkzhlnb2nrtwfrzxiuamf2yq) | `7321% <0%> (+892%)` | `11% <0%> (+1%)` | :arrow_up: || [/main/java/org/mockito/internal/util/platformjava](https://codecovio/gh/mockito/mockito/pull/1847/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl1bsyxrmb3jtlmphdme) | `909% <0%> (+909%)` | `15% <0%> (+3%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&elfooter) last update [204f9c1b0d15d1](https://codecovio/gh/mockito/mockito/pull/1847?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || ill review by tomorrow thank you for the updates! || i tweaked the tests when the build is green ill mergethank you for this nice pr!!! ||
1,0,0,1,0,1,0,0,fixes #1853: allow @mockitosettings to be inherited - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&elh1) report> merging [#1854](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/11552b8f3da90eb5478db4c371031461d98da195?srcpr&eldesc) will **not change** coverage> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1854/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&eltree)```diff@@              coverage diff               @@##             release/3x    #1854   +/-   ##  coverage          8687%   8687%             complexity          2518     2518             files                314      314             lines               6620     6620             branches             831      831             hits                5751     5751             misses               671      671             partials             198      198```------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&elfooter) last update [11552b89c0bce0](https://codecovio/gh/mockito/mockito/pull/1854?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) || > > > could you add a regression test in the junit-jupiter-test testsuite?ive just amended the commit with a test ||
1,0,0,1,1,1,1,0,"revert ""fixed undetected unused stubbing when matching previous stubbed call"" reverts mockito/mockito#1847fixes #1877 based on feedback in #1846 # [codecov](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&elh1) report> merging [#1878](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&eldesc) into [release/3x](https://codecovio/gh/mockito/mockito/commit/bc2544019b9586aad264c02aa22853e1867f1162?srcpr&eldesc) will **increase** coverage by `01%`> the diff coverage is `100%`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/1878/graphs/treesvg?width650&tokenmx80slder0&height150&srcpr)](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&eltree)```diff@@               coverage diff                @@##             release/3x    #1878     +/-   ##+ coverage          8673%   8684%   +01%     + complexity          2521     2518      -3       files                316      316               lines               6635     6622     -13       branches             831      829      -2     - hits                5755     5751      -4     + misses               679      672      -7     + partials             201      199      -2```| [impacted files](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&eltree) | coverage δ | complexity δ | ||---|---|---|---|| [ito/internal/stubbing/invocationcontainerimpljava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9jbnzvy2f0aw9uq29udgfpbmvysw1wbc5qyxzh) | `95% <ø> (-078%)` | `31 <0> (-3)` | || [to/internal/stubbing/stubbedinvocationmatcherjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9zdhviymluzy9tdhviymvksw52b2nhdglvbk1hdgnozxiuamf2yq) | `100% <ø> (ø)` | `9 <0> (ø)` | :arrow_down: || [ava/org/mockito/internal/reporting/pluralizerjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9yzxbvcnrpbmcvugx1cmfsaxplci5qyxzh) | `80% <ø> (-334%)` | `4 <0> (-2)` | || [java/org/mockito/internal/exceptions/reporterjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9legnlchrpb25zl1jlcg9ydgvylmphdme) | `9351% <100%> (-003%)` | `93 <0> (ø)` | || [ito/internal/creation/bytebuddy/modulehandlerjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvtw9kdwxlsgfuzgxlci5qyxzh) | `2692% <0%> (+096%)` | `2% <0%> (ø)` | :arrow_down: || [al/creation/bytebuddy/subclassinjectionloaderjava](https://codecovio/gh/mockito/mockito/pull/1878/diff?srcpr&eltree#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvu3viy2xhc3njbmply3rpb25mb2fkzxiuamf2yq) | `7368% <0%> (+2105%)` | `7% <0%> (+1%)` | :arrow_up: |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&elcontinue)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&elfooter) last update [bc254409ab789b](https://codecovio/gh/mockito/mockito/pull/1878?srcpr&ellastupdated) read the [comment docs](https://docscodecovio/docs/pull-request-comments) ||"
1,0,0,0,1,1,1,0,fix mocks throwing same instance with throwable class fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with `dothrow(class)` or `thenthrow(class)`this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass - much like throwsexception then `thenthrow(class)` calls `the swer(answer)` with a new instance of throwsexceptionclass rather than `thenthrow(throwable)` similar for `dothrow(class)` `dothrow(throwable)` and `doanswer(answer)`fixes #1875 @timvdlippe just have a quick inquiry: the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing (check pr #1549) the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test? or do i just delete the test file? im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes  
1,1,0,1,1,1,1,0,fixes #2238: do not omit stack frames of causing class this pr will fix this problems described in #2238 the main cause wasnt the `hiderecursivecall` method but `tryinvoke` methodin `tryinvoke` the original stacktrace will be passed through the configured filter after it has been modified by `hiderecursivecall`when calling `hiderecursivecall` the second argument (`current`) is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch `tryinvoke` will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the `instance` object given to `tryinvoke` this offset will then be given to `hiderecursivecall` as `current` argument instead of using the stack trace lengthif there is no `instance` object (`null`) the length of the stack trace is used (like before)  
0,0,0,0,1,1,0,0,fixes #2273 : add missing parenthesis to javadoc example adds the missing parenthesis to the argumentmatcher javadoc example## checklist - [x] read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd) - [x] pr should be motivated ie what does it fix why and if relevant how - [x] if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change - [x] avoid other runtime dependencies - [x] meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years - [x] the pull request follows coding style - [x] mention `fixes #<issue number>` in the description _if relevant_ - [x] at least one commit should mention `fixes #<issue number>` _if relevant_ # [codecov](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&elh1&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) report> merging [#2274](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (f47120d) into [release/3x](https://codecovio/gh/mockito/mockito/commit/c86fe047d557bd2ec364d59a99430792f3920e96?eldesc&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) (c86fe04) will **increase** coverage by `001%`> the diff coverage is `n/a`[![impacted file tree graph](https://codecovio/gh/mockito/mockito/pull/2274/graphs/treesvg?width650&height150&srcpr&tokenmx80slder0&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)```diff@@                coverage diff                @@##             release/3x    #2274      +/-   ##+ coverage          8488%   8489%   +001%     - complexity          2734     2736       +2       files                326      326                lines               8342     8342                branches             997      997              + hits                7081     7082       +1     + misses               987      986       -1       partials             274      274              ```| [impacted files](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) | coverage δ | complexity δ | ||---|---|---|---|| [to/internal/util/concurrent/weakconcurrentmapjava](https://codecovio/gh/mockito/mockito/pull/2274/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc91dglsl2nvbmn1cnjlbnqvv2vha0nvbmn1cnjlbnrnyxauamf2yq) | `3936% <000%> (-213%)` | `1100% <000%> (ø%)` | || [al/creation/bytebuddy/inlinebytecodegeneratorjava](https://codecovio/gh/mockito/mockito/pull/2274/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zwnvzgvhzw5lcmf0b3iuamf2yq) | `8471% <000%> (+043%)` | `3900% <000%> (+100%)` | || [l/creation/bytebuddy/inlinebytebuddymockmakerjava](https://codecovio/gh/mockito/mockito/pull/2274/diff?srcpr&eltree&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito#diff-c3jjl21haw4vamf2ys9vcmcvbw9ja2l0by9pbnrlcm5hbc9jcmvhdglvbi9iexrlynvkzhkvsw5saw5lqnl0zuj1zgr5tw9ja01ha2vylmphdme) | `6971% <000%> (+057%)` | `5100% <000%> (+100%)` | |------[continue to review full report at codecov](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&elcontinue&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> **legend** - [click here to learn more](https://docscodecovio/docs/codecov-delta?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito)> `δ  absolute <relative> (impact)` `ø  not affected` `?  missing data`> powered by [codecov](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&elfooter&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) last update [c86fe04f47120d](https://codecovio/gh/mockito/mockito/pull/2274?srcpr&ellastupdated&utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) read the [comment docs](https://docscodecovio/docs/pull-request-comments?utm_mediumreferral&utm_sourcegithub&utm_contentcomment&utm_campaignpr+comments&utm_termmockito) ||
1,0,0,1,1,1,0,0,"bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> @dependabot rebase || @dependabot squash and merge ||"
1,0,0,1,1,1,0,0,"bump versionserrorprone from 260 to 271 bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_cores releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href""https://githubcom/google/error-prone/releases"">error_prone_test_helperss releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href""https://githubcom/google/error-prone/releases/tag/v270"">error prone 270</a> plus an <a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab"">additional fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href""https://githubcom/google/error-prone/issues"">bug reports</a> for issues with java 17 are welcome</li><li><a href""https://githubcom/inlineme""><code>@​inlineme</code></a>` is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href""http://errorproneinfo/docs/inlineme"">http://errorproneinfo/docs/inlineme</a></li></ul><p>new checks:</p><ul><li><a href""http://errorproneinfo/bugpattern/equalsnull"">equalsnull</a></li><li><a href""http://errorproneinfo/bugpattern/missingbraces"">missingbraces</a></li><li><a href""http://errorproneinfo/bugpattern/nullableprimitivearray"">nullableprimitivearray</a></li><li><a href""http://errorproneinfo/bugpattern/optionalmapunusedvalue"">optionalmapunusedvalue</a></li><li><a href""http://errorproneinfo/bugpattern/testparametersnotinitialized"">testparametersnotinitialized</a></li></ul><p>closed issues: <a href""https://github-redirectdependabotcom/google/error-prone/issues/2257"">#2257</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2260"">#2260</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2282"">#2282</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2301"">#2301</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2322"">#2322</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2323"">#2323</a> <a href""https://github-redirectdependabotcom/google/error-prone/issues/2324"">#2324</a></p></blockquote></details><details><summary>commits</summary><ul><li><a href""https://githubcom/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3""><code>09262b8</code></a> release error prone 271</li><li><a href""https://githubcom/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab""><code>ff07935</code></a> improve jdk 17 support</li><li><a href""https://githubcom/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c""><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href""https://githubcom/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a""><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579""><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code></li><li><a href""https://githubcom/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925""><code>8c6f73c</code></a> fix a jdk 16-only test</li><li><a href""https://githubcom/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433""><code>62d1bf7</code></a> internal refactoring</li><li><a href""https://githubcom/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9""><code>5913d86</code></a> update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href""https://githubcom/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f""><code>f6761ee</code></a> fix a jdk 16 incompatibility</li><li><a href""https://githubcom/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc""><code>51b5c4d</code></a> fix some crashes involving records</li><li>additional commits viewable in <a href""https://githubcom/google/error-prone/compare/v260v271"">compare view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details> @dependabot rebase || @dependabot squash and merge ||"

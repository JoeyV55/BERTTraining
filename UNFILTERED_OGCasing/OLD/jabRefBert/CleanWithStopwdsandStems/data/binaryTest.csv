Util,NLP,APM,Network,DB,Interpreter,Logging,i18n,DevOps,Logic,Test,IO,UI,Security,App,corpus
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,unify and simplify gui actions using lambdas for the simpler actions some code cleanup extract string commands as string constants to actionsjava and use the constants in jabrefframe basepanel and rightclickmenu use the constants already defined in keybinds to get keystrokes for the actions in jabrefframe basepanel entryeditor and rightclickmenu e ad d remove quickfix for sfnet bug and implement feature properly instead of deactivating show hide toolbar when no database is open the action has been move to jabrefframe and works now even if no database is opensee also i propose to merge the current status into master the changes described above cover the changes possible without restructuring the whole action architecture in the gui lgtm ah answered just here https githubcom matthiasgeiger jabref commit e ad d be cf f e efcaae ddfe commitcomment
1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,increase saving speed intended to this pr turned into a major api change it replaces string in the return types of bibtexentrytype with list this allows to return immutable lists instead of mutable arrays and improves the stability of the program additionally the rewrite allowed to replace a lot of duplicate object creation with instance variableswith respect to the immutability of the new lists removes the necessity to create defensive copies and therefore avoids a lot of cloning are there further improvements to be made otherwise this pr is ready to merge
1,0,0,1,0,1,1,1,0,1,1,1,1,1,1,database type detection please see bibdatabasetypedetectionjava for reviewsome refactoring and a class for auto detection of database types algorithm should we introduce a hard coded field like encodings inside the bib file fast enough what about false detection refactoring bibtexdatabase bibdatabase bibtexentry bibentryalso see the refactorings are fine from my point of viewthe detection is based on in memory operations on collections so no need to worry about speed at the momentif i understand the algorithm correctly any database that contains a non biblatex non bibtex type will be categorized as bibtex so a database with one biblatex entry and a customn entry would be detected as bibtex is that really the desired result i would rather ignore all non bibtex non biblatex types for the decision customentry unkownentry ieeetranentry and do the decision solely on valid types with bibtex as the default result lenhard no it should always detect as biblatex if it finds one exclusive entry the algorithm looks good to me i would move the detection class into the logic package instead of model but that is your decisionstrangely the circleci test says there are still compilation errors due to the renamings as far as i can see locally all is fine
1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,remove field saving options as decided in all field saving options should be removedthis pr purges the options from the gui and cleans up related reader and formatter classes this simplification greatly reduces the complexity of bibentrywriter
1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,remove url sanitizer as it is malfunctioning and unclear where needed… also see jabref developers if someone knows a use case where this is needed and why we can try to reimplement it properly but this way it really makes no sense imho so then either urldecoderdecode or uritoasciistring converts to of course not impossible but seems like one has used the incorrect methods in that casei think the main things it does is replacing space with in the urls and removing any \url{} commands there will probably be users that will run into problems but maybe one can add a url cleanup that does the corresponding thingi think an alternative solution would just be to do a replaceall at the end the problem is that is really hard to correctly encode a url if we are not aware of its structure regardless of what methods we useso if we are not completely sure we need it we should probably not do this sounds reasonable koppor what do you think about this especially is it possible that users have a url{\url{ in their bibfile and what about escaping symbols for latex like or unsure the method comment states following make sure an url is portable in that it doesnt contain bad characters that break the open command in some oses a call to this method will also remove \url{} enclosingsthat reads perfectly fineok i also read the following fixme everything below is really flawed atmmaybe we should cleanup the url fields and not do the cleanup at the place of opening although i see the issue of malicious bib files which could have an url executing malicious code however that risk is so low that i would not count on itmeaning and open a new issue for cleanup
1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,file based bibtex mode see changes file based setting of bibtex biblatex mode which is stored as a metadata in the bib file if no metadata is found jabref tries to detect the mode by checking if there are biblatex entry types which results in biblatex mode and otherwise in bibtex mode except one has set the biblatex mode setting in the global preferences in that case it would use the biblatex mode ui changes completely no restart necessaryplease provide feedback very very nice any last comments jabref developers i plan to merge this in soon as the effort to keep this pr up to date with master is really high due to the high amount of changes lgtm i cannot launch jabref at this branch exception in thread awt eventqueue javautilnosuchelementexception no value present at javautiloptionalget optionaljava at netsfjabrefspecialfieldsspecialfieldvaluegetaction specialfieldvaluejava at netsfjabrefguibasepanelsetupactions basepaneljava at netsfjabrefguibasepanel basepaneljava at netsfjabrefguijabrefframeaddtab jabrefframejava at netsfjabrefguijabrefframeaddparserresult jabrefframejava at netsfjabrefjabrefopenwindow jabrefjava at netsfjabrefjabreflambda$start$ jabrefjava it works well on master my above issue was which now has been fixed by oscar in master
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,improve database writer the aim of this pr is to improve the database writer in particular and also add tests to the writer and parser and do some refactorings to make test writing easier changes to serialization fix and by adding new lines after encoding and preamble the idea is that everything is terminated by a new line and the parsed serialization only safes newlines which separate it from the previous entry comments and preamble are serialized with capitalized first letter ie comment instead of comment and preamble instead of preamble this should follow the convention for entries there is no space anymore between string and the bracket and after the bracket ie string{name {string}} instead of string { name {string} } implemented add possibility to reformat all entries on save under preferences file refactorings renamed fileactions to bibdatabasewriter merged code for export and save in bibdatabasewriter extracted savesettings class from fileactions to own file and extended it & renamed to savepreferences note that this class has some setters against the recently established convention for preference classes since there are quite a few cases where the values from the preferences have to be overriden change usage of arrays to list in many places remove unused boolean parameters checksearch checkgroup moved writing of metadata and customentrytypesmanager to bibdatabasewriter extracted and reused gui code for displaying and editing sort preferences saveorderconfigdisplay could you rebase this on master as both pre requisite prs are already merged in so this could be completed now one question currently the save methods take parameters boolean checksearch boolean checkgroup which specify that only entries satisfying the active search group selection are exported or saved as far as i can see these boolean parameters are always set to false which means all entries are exported should i remove both parameters i guess that if this is merged in first it should be quite ok to rebase although many changes are redundant regarding your question it would be nice to be able to save like this but i guess it is another of jabrefs almost finished commented out and then removed features considering that one can save selected entries and it is quite easy to see which entries are in the active group search selection id say remove i think the code is now mature enough to be reviewed i added some notes above in the first post sorry that this pr is rather big i also pushed it to the branch jabref databasewriter so that a build should be available under do we have the only update if it changed functionality for the preamble strings and comments as well for strings and the epilogue yes for the preamble kind of the text in the preamble is stored and exactly rewritten but the preamble tag and newlines around it are not stored for the metadata there is no such functionality tobiasdiez regarding the two parameters arent they used for save selected as plain bibtex koppor no it is not used for this function save selected gets all the selected items and pass them to the save function the code in question reads javaif selectedonly { session fileactionssavepartofdatabase panelgetbibdatabasecontext file globalsprefs panelgetselectedentries encoding fileactionsdatabasesavetypedefault } else { session fileactionssavedatabase panelgetbibdatabasecontext file globalsprefs false false encoding false } please rebase i think this should be merged one suggestion regarding the savepreferences you could create a new instance after the call of a setter this would result in the benefits of having final variables and it still allows to create derivations of this savepreferences prefs new savepreferences globalsprefs savepreferences otherinstance prefswithencoding utf assert prefs otherinstance && prefsequals otherinstance rebased and implemented the withencoding suggestion ie removed all setters in the preferencesyou really dont like them right smile in my case jabref on and bit windows the problem is not fixed original lines encoding windows preamble{{\providecommand{\noopsort} {}}} or preamble are always changed to encoding windows preamble{{\providecommand{\noopsort} {}}}after saving changed bib filekind regardsjanez komelj jkomelj you have to use the latest development version or wait for the release of probably in weeks thank you
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,removed preference setting solves it can be discussed if the setting in the auto generate group dialog should be removed as well i think that there are good arguments to have a configurable separator and even have two different separators one fundamental and one for hierarchical keywords see and therefore i close this pr
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fixed should solve change in changelogmd described no tests already passed this is a gui issue yes merging this as the changed visibility of the constructors prohibits a proper build at the moment if you pass null to the database then getresolvedfield is invoked with a null database thus the crossref functionality is not supported in the rename pattern i think this is not a big deal but easy to fix just pass the right db i think that at the moment null is always passed in the code which also means that it the two one and two argument constructors areonly used in tests they can be removed and nulls passed which of course isthe current behaviour but seems to make more sense to provide alternativeconstructors if they are used in actual code
1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,introduce search and error while fetching from instead of having separate strings for each fetcher the placeholder is used nowrefs
1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,always trim fields on save and remove trimformatter the consensus in was that fields should always be written without leading or trailing whitespace this is done in this pr and the trimformatter is removed by the way empty fields are never written as one of the added tests shows change in changelogmd described lgtm
1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,implemented added a button that can be used to determine if the search results should be updated on every pressed key or on enter only based on the suggestion in two issues select a good icon the current one is quite intuitive if it wasnt for the fact that the symbol is rarely used for selecting a state when using autocompleting and search on enter enter needs to be pressed twice once to select the completing once to search searchontype will be available at in minutes or so change in changelogmd described i dont like the boolean parameter to much i would prefer if the performsearch method is not changed but a second method performlivesearch including the check is introduced otherwise good job i do not know why i so rarely use overloading which this is a sort of i changed now performsearch and performsearchiflive changed to the sync icon not sure why eclipse formats the icontheme file as it does but i cannot get around it newsearch found auto renew so changed to that basically a mirrored version of sync so clockwise arrows hm idea what about issuing the search request only after ms of nothing happened in the text field this would require less icons and less buttons the user has to interact and understand and could provide similar results what do you think oscargus i see your point regarding the number of buttons but then it seems like one either has a small enough database and then it is probably just annoying or you have a big database in which case it might still not solve the issueit seems like this setting and filter float are user preferences rather than search preferences in the sense that you wont change this depending on your current search as opposed to regex and case maybe one should tuck the user preferences away as they are more rarely changed i mean you would like to have live search by default but be able to disable it if required i can also imagine that some people want to get rid of autocompletion sometimes with that said i havent checked if one can configure it an advanced settings button with pop up menu i am somewhat unsure where we should be heading here i think we should try to reduce the number of preferences the user can input as jabref has so many options it can make it very hard to use if we detect whether the database is small medium or large in size we could adjust the search automatically somehow so it will not update immediatly if there are more than k entries or use a formula which computes the amount to wait between after a search the issue is not the search itself which is done in a separate thread but the update of the ui after the search is done so basically we could try to keep track of the search queries that are currently active through an atomic counter and only update the ui when the counter has reached the value i agree on the preference thing in general still i think this is a rather straightforward setting and more importantly it doesnt really break anything if set the wrong waysomehow these automatic things will always turn out bad for some users and then they cannot change it apart from that i agree that it should be possible to come up with a scheme that is reasonable for most users however im not convinced it is worth the effort compared to the simple and fully waterproof switch to me it can even be hidden in the preferences under a performance tab where that and eg the new cell formatting can be switches off if required all bells and whistles on but can be disabled if performance is sufferingi have some thoughts related to preferences in general and will open an issue any day now hm ok maybe the quickest thing is to add a settings dropdown menu using some kind of wrench or so symbol in the search bar there we can also move the float thing as well oscargus nevertheless i think we should ensure this overlapping of searches does not happen this could maybe help enough already reducing the pain of having a large database without loosing the live feature im with simon here and think a button is not necessary why not just perform a search every time directly after the input changed if the user types quicker then the search is performed then the old search is just aborted and a new one started so for small databases you see a direct consequences for larger ones you get a delayed response the only thing required for this approach is to make sure that an ongoing search does not block inputs in the search fieldgoogle also somehow manages to show live results without a toggle instant search button and i believe their database is bigger than the average bib file smile so the user response in is irrelevantden mar skrev tobias diez notifications githubcom im with simon here and think a button is not necessary why not just perform a search every time directly after the input changed if the user types quicker then the search is performed then the old search is just aborted and a new one started so for small databases you see a direct consequences for larger ones you get a delayed response the only thing required for this approach is to make sure that an ongoing search does not block inputs in the search field google also somehow manages to show live results without an instant search button and i believe their database is bigger than the average bib file image smile — you are receiving this because you were mentioned reply to this email directly or view it on github no of course not but i find the part blocking further typing into the search box the most critical and annoying if the input in the search field is not blocked the user will not notice that we actually search in the background ah ok now i understand your comment sure that would be another way to solve it probably better from many perspectives i tried to implement a settings button and while it works im not really fond of the results ive tried having both one menu item for filter float which is quite unclear and having radio buttons for both options which is better as one can have the full sentence but i think that the additional icon is still the best the whole search bar is quite compact now so i do not think that the previous width problem is relevant also if when live search is removed eg if non overlapping search is implemented and works for entries it will be easier to just remove the button rather than remove the menu etc do you think this is still necessary or this can be closed in favor having a faster overall search no if the search speed has improved as much as it seems i do not think this one is required if it turns out to be it is easy to recover
1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,write database type in lower case into the bib file this finally a quick fix has been introduced in eea e but that does not cover the lower case writing of the type comment{jabref meta database_type bibtex} finally gets comment{jabref meta databasetype bibtex} change in changelogmd described this has been introduced in the development versions after the last release thus no entry required tests have been adapted to match this new implementation is the parsing case insensitive is that tested oscargus the value is parsed case insensitive
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,filelist field size now dependent on its content the filelist within the entryeditor now automatically resizes its columns dependent on the length of its content java change in changelogmd described i rearranged the imports a bit using the settings tobiasdiez describes in looks good to me me jabref developers anybody else any comments maybe we could integrate that in v already apart from my comment regarding the changelog this is fine and can be merged moved the changelog entry from fixed to changed
1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,replace normalizenamesformatter by authorlist and so and refs removes comma as delimiter of author names in normalizenamesformatter the problem is that comma separated authors cannot be distingued from one author in bibtex format for example name della first could be three names separated by commas or if interpreted as valid bibtex string it is one author with lastnamename jrpartdella firstnamefirst add colon as delimiter of author names in authorlistparser thanks at all but especially oscargus for creating many tests made implementing this pr way easier change in changelogmd described looks very nice the md thing is a bit challenging and either way we will do it wrong for one of the cases if i were in medicine i would probably prefer not to expand md especially lgtm
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,preview panel is now updated when an entry is cut deleted again when i fixed some time ago pr i made a tiny errorthe issue was to hide the preview panel when deleting cutting an entry but it also hid it when aborting the delete confirmation dialogi too refactored both actions a little to make it easier for future changesi also removed in undoableremoveentry and undoableinsertentry the id generation
1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,tried to but all tests pass will merge this in if the tests all pass on the ci server change in changelogmd described
1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,add fields for nbibimporter and add testfile regarding medlineplain importer doesnt have all fields that the nbib format has so i added the fields to the medlineplain format and added a test testfile for the nbib formata list of the elements that should be imported now can be found here you should also record your changes in the readme lgtm for somehow the travis ci is failing because an integration test scrollingthroughentrylist fails lgtm too just some minor remarks for readability
1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,cleanup guiglobals implements cleans up the guiglobals class and move latexfieldformatter to the bibtex package which is now independent of the gui packageas a final step i would move the class netsfjabrefimporterfileformatfieldcontentparser to the bibtex package which would make the package self contained apart from imports to the preferences and related classes and would move the whole bibtex package into logic are there objections to this i restructured variable positioning as discussed in and turn max_back_history_size line_length and indent into proper preferences jabref developers what about turning the bibtex package into a subpackage of logic or should that rather stay a top level package the more stuff is in the logic package the better ok from side this is good to go i even was able to move some more classes into the model package lgtm lgtm just some minor remarkswhat i do not understand is the purpose of the bibtex package some of the classes seem like they do not have anything to do with writing or parsing bibtex and are rather general for example the comparators maybe it would make sense to completely dissolve the bibtex package by moving the parsing logic to the import package and writing to exportin the end the bibtex format is just a special import export format tobiasdiez thanks for your remarks i will integrate them as wellas for the bibtex package its existence is a historical thing and i do not know the exact motivation behind it seems like bundle parsing and writing of pure bibtex but with the addition of new importers and exporters responsibilities shifted and mixed over time the big advantage we have now is that the package moved to logic which means that there is a guarantee that it is independent of gui code and it can be re used for new gui stuff with relative safety if we move it out of logic to importers or exporters we loose that advantage ultimately the goal should be to get the gui independent code from the import export package into logic as wellout of topic i just noticed the codecov report how the hell did code coverage increase by a wooping with this pr i didnt even write new tests this has to be an error i implemented the above comments and the pr is once again ready to go from my sideone remark col_definition_field_separator cannot go to guiglobals since this would create dependencies from logic to gui therefore i moved it into col_definition_field_separator to globals this is fair i think since the variables relates to our bibtex sytnax and field content which is independent of the guii still don t get how the coverage can have increased that much
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,show description of case converters as tooltip change in changelogmd described lgtm
1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,npe when retrieving bibtex data from doi see lgtm
1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,fixed i finally got around to understand the reasons for and parts of it turned out that commands starting with c was handled in a special way and that {\v{s}} was for unknown reasons used as line tabulation setas a result not only does jabref now render \v{s} and \chi correctly it also renders combining accents see screen shot img width altcapture src change in changelogmd described oscargus do the tests from pass in your branch stefan kolb as it was only \chi that was failing i would expect that yes the other two did already work right oscargus it was only the \chi yes because \c is handled as special character if my test from the pr pass we can merge my test pr into your branch and then merge your fix smile in general i would like tests for this pr my pr includes tests for the bug stefan kolb there is a \chi first at the second row of the screen shot turned out all commands starting with c didnt work as c was hardcoded into globals as an accent so \chi was interpreted similar to if it had said {\c{h}}i and since \c{h} wasnt listed it was simply removed now \c{h} works as well giving ḩ tobiasdiez i was considering that however the main feature is adding support for accented unicode characters and they are a hassle to type properly nor will they make much sense except lots of comments for example spot the difference between ä and ä oscargus can you just cherry pick my commit from the pr and you have your first test smile and then just close my pr afterwards i added some tests now stefan kolb im afraid that is a bit out of my comfort knowledge zone my solution would be to almost simultaneously merge both prs oscargus then just copy my tests and close the pr smile stefan kolb that should be within grasp lgtm thanks for the quick solution lgtm lgtm just some minor remarks about naming variables and tests
1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,fixed and some refactoring cleanups fixed and did some refactoring and cleanups change in changelogmd described changes lgtm however the usage of magic numbers for the diff modes should be avoided but this can also be solved in another pr wink just a minor comment otherwise looks goodhave a thought on my suggestion and decide if you want to implement it afterwards rebase and merge matthiasgeiger i agree however i do not really get how to map a jcombobox and an enum new jcombobox enumtypevalues should work
1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,fixed this should change in changelogmd described lgtm
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,move preferences moves preferences related classes into a new top level package as outlined in this is a pure refactoring no functional changes it doesnt fix the dependencies on preferences but separates them from the remaining classes in the root packageadditionally the class jabrefpreferencesfilterdialog is moved into the gui package where it belongs this also allows to rename the class and reduce its visibilitycommits can be squashed on merge lgtm
1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,use jabref default icon for uninstaller for now using standard icon for now should be replaced by specific uninstaller icon after redesign lgtm can you add a changelog please then just merge it
1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,improved latex to unicode html formatters to output more sensible val… see main thing is that \latex{} outputs latex same for all unknown commands also behaves a bit better for some other situations with unknown commands and there are now tests for it to make sure that it happens change in changelogmd described
1,0,0,1,0,1,1,1,0,1,0,1,0,0,0,rewrite bibtexml importer with jaxb parser regarding ive rewritten the bibtexml importer it was written with a sax parser and ive used a jaxb parser i will be addings some more tests for the changes ive madenote exporting in bibtexml format and then trying to import in bibtexml format is not working because of manually tested changed features in running jabref are there any other remarks travis is failing because of ui tests please not that the ui tests but ignored please read the travis output and check for red lines checkstyle failed your ide settings seem to be non formant please double check error home travis build jabref jabref src main java net sf jabref logic importer fileformat bibtexmlimporterjava netsfjabrefimporterfileformatbibtexmlentry should be separated from previous imports importorder failedfailure build failed with an exception what went wrong execution failed for task checkstylemain checkstyle rule violations were found see the report at file home travis build jabref jabref build reports checkstyle mainhtml try run with stacktrace option to get the stack trace run with info or debug option to get more log outputbuild failedtotal time mins secs
1,0,0,1,0,1,1,1,0,1,0,1,0,0,0,rewrite bibtexml importer with jaxb parser regarding ive rewritten the bibtexml importer it was written with a sax parser and ive used a jaxb parser i will be addings some more tests for the changes ive madenote exporting in bibtexml format and then trying to import in bibtexml format is not working because of manually tested changed features in running jabref are there any other remarks travis is failing because of ui tests please not that the ui tests but ignored please read the travis output and check for red lines checkstyle failed your ide settings seem to be non formant please double check error home travis build jabref jabref src main java net sf jabref logic importer fileformat bibtexmlimporterjava netsfjabrefimporterfileformatbibtexmlentry should be separated from previous imports importorder failedfailure build failed with an exception what went wrong execution failed for task checkstylemain checkstyle rule violations were found see the report at file home travis build jabref jabref build reports checkstyle mainhtml try run with stacktrace option to get the stack trace run with info or debug option to get more log outputbuild failedtotal time mins secs
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,newly opened bib file is not focused open a new file and it is correctly focused afterwards open a file that was already opened before is correctly focused afterwards open a file two times and it is only opened once matthiasgeiger should work now smile lgtm apart from the minor comments via skype wink
1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,removed seiten from pagetotal and fixed a totally unrelated npe fixed and an unrelated npe due to bad documentation it says that it can be null but it couldnt and there is a use case where it now is null added tests for the fixed npe change in changelogmd described tests added manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm
1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fixed name column rendering and fixed and better to format the author names before converting latex to unicode bah img width altcapture src change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues good work simple change for fixing two issues at the same time lgtm lgtm please slightly rewrite the tests and then you can merge it
1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,fixed url field is not removed by integrity check better to disable the check than remove the field from the entry change in changelogmd described one may think of adding a test that no fields are removed from the entry in the integrity check but i havent done that here ideally the entry should have every possible field included manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm
1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,towards hierarchical keywords this pr is the first step towards supporting hierarchical keywords refactor the keyword related code to use new classes keywordlist and keyword unified keyword delimiter to be a single character and in this way fixed the issues mentioned in and move keyword delimiter from preferences to metadata database properties new pr add hierarchical delimiter and change parsing logic in keywordlist accordingly new pr change ui to support hierarchical keywords new prnote i also moved the stringutil class to model in some sense it is jabrefs own string class and removed entryutil only had methods related to strings stringutil or keywords keywordlist change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,disable context menu action on selection of multiple entries if multiple entries are selected some context menu toolbar and menu actions are now disableddisabled actions print entry preview attach file edit entry open folder enable only if file exist open file enable only if file exist open url or doi enable only if url or doi exist merge entries enable only on select of two entries these actions make no sense to be used when there are multiple entries selectedfor further information have a look at context menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ menu before change _ h _ menu after change _ h _ button edit entry before change _ h _ button edit entry after change _ h _ button merge entries before change _ h _ button merge entries after change _ h _ take a look for merge thx 😄 change in changelogmd described manually tested changed features in running jabref internal qs complete to disable menu item toolbar button and context menu on multiple select of entries merge entries needs to be enabled only if exactly two entries are selected also disable the following if multiple entries are selected tools open filetools open url or doi all things are complete 😄 please resolve conflicts all things 👍 if all thing is okay then it will be nice to take a look to mergea big thx 😄 besides minor comments lgtm the send as email action internally works with multiple entries but outlook cannot receive that long string as text thus it is ok for me to exclude this action all things are done 🎅 okay looks good now merge it in
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,added new menu and action to copy bibtex key as url added a new sub menu item to the menu and the right click menu to quickly copy the bibtex key as a hyperlink to the entries url as described in in case of an empty url the bibtex key will be copied by its own rightclickmenuentry bibtex keys as hyperlink with their url source screen shot at bibtex keys as hyperlink with their url markdown formated screen shot at change in changelogmd described manually tested changed features in running jabref bartsch dev i think you recently reworked the localization script so maybe you can help me here when i add a new translation string to en property file is there anything else to do than to execute gradlew update because this gives me a syntax error in the python script traceback most recent call last file users tobias git jabref scripts synclangpy line in update extendedlen sysargv and sysargv extended file users tobias git jabref scripts synclangpy line in update update_properties main_property_fileget_main_menu_properties other_property_filesget_other_menu_properties file users tobias git jabref scripts synclangpy line in update_properties keys not_fixed fixed fix_duplicates lineslines file users tobias git jabref scripts synclangpy line in fix_duplicates fixedappend {key}{value}format keykey valuevalue unicodeencodeerror ascii codec cant encode characters in position ordinal not in range the linked pr fixes that i forgot to mark some strings as unicode strings i extracted the method to a new action class thanks 👍 can be merged from my point of view
1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,fix ignore version made a rookie mistake and ignored the already ignored version againreworked the preferences to the new design the only test that failed is the getbydoi test from the springer servicenot surprising since the springer service is currently down for mainte ce okay i merged it in
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,speed up search refers to at the request of koppor i speed up the search by using a second map of fields inside bibentry which stores the field latex freei also internalize these fields and set the necessary jvm arguments in install j i hope those are right todo identifiy all the uses of the latextounicodeformatter and replace it this pr breaks our architecture do we need a more sophisticated solution netsfjabrefarchitecturetests fistpackageisindependentofsecondpackage is netsfjabrefmodel independent of netsfjabreflogic failed javalangassertionerror expected but was koppor could have told you so the architecture issue was pretty obvious here let us talk this through before implementing a quick shot i have a number of solutions on my mind to this architecture stuff as well as for the restlet us also keep in mind that the vm args might not be quite be as portable or effective for non oracle jvms just use latextounicode instead of latextounicodeconverter indeed at the devcall we decided to implement basically everything ie cached latex free fields in bibentry string internalization additional command line args and some pre compilation of regular expressionill hijack this pr and create a new one shortly albeit not today i have moved over the ideas here into and build some more on top hence ill close this pr
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,ctrl s parsing error message ctrl s doesnt trigger parsing error messageproblem conflict of local shortcut of the entry editor with the global shortcutsolution local shortcut removed the action assigned to local and global shortcut is essentially the same save database change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i have tested it and can confirm that it works removing the local shortcut is fine this was certainly the relic of some migration since it is not too much in size there is no need for a second review and ill merge right away grimes good job as always
1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,fix codecov issue fix for ive added a gradle task that copys the resource to where they should be tobiasdiez one for you to approve so the problem is that the test resources are not copied on build and thus the tests dont found the test files the gradle job does work code coverage if i understand the solution correctly then a normal build in intellij or eclipse still dont copy the resource files and thus locally the importer tests are still not performed is this right i have no idea about our build script but is there no other way to always copy the resources the language files are automatically copied right tobiasdiez if you run the test locally in eclipse it executed all parameterized tests however only when executed via intellij or gradle it did not locate the correct directory thus no tests files were foundsee here for details okay i would say i merge it in
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,prevent the search to get focus when deleting pasting an entry fixes when you delete an entry the focus will no longer jump to the searchbar instead it will select the next entry also counts for pasting now it works for cutting entries tooi removed the code duplicate although im not sure about the the pattern not able to use runcommand actionsdelete to me code looks good
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,improvements to the javafx error console the log messages in the list view of the error console can now be selected and copied the error message will also automatically scroll to the newest log message refs ok rebase and merge
1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,urldownload now resolves redirects by default could you please also add a test for the arxiv entry which failed to download before the fix a test for the entry would be no different it must be done for the urldownloader but im not entirely sure how right now
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,biblatex mode add month and year field to deprecated tab issue in biblatex the date field is recommended for backward compatibility the bibtex fields month and year are also accepted ive added both fields to the deprecated fields tab although the year field is present in the required fields tab too change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate koppor has an opinion here in my experience in a typical setting one does not know the correct date but only the year together with an experienced librarian georgd i maintain a high quality example bib file at there we use year and urldate but never date i currently dont see where the month file is currently shownso i would vote for keeping as is and not merge the problem is that an existing month field is not shown at all the month field should be shown in deprecated or in other fields tab i prefer the deprecated tab because the month field is mentioned in the biblatex manual i think it is better to remove the year field from deprecated fields because it is present in required field the year is imho not in the depricated fields is it could you provide a screenshotwe can add the month to the deprecated fields the biblatex manual states biblatex will also consider the fields year and month for backwards compatibility with traditional bibtex but this is not encouraged as explicit year and month are not parsed for date meta information markers or times and are used as iswhich is a polite way to say they are deprecated thus i support grimes here and think these two fields should be added to the deprecated tab koppor you can also put only the year in the date field if you dont know the month day of publication typically bibtex things from the web have year and not date this imhowont change in the future im also in favour for putting journal in therequired fields and not other fields reason main bib file biblatex butpaper bib file in bibtex no converter for biblatex to bibtex and notforcing everyone to use biblatex jabref
1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,change log level to debug fixes a side aspects mentioned in currently a search will throw errors if one types author as the search term is still incomplete those exceptions should not be visible to the normal user
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,implement collect telemetry in this pr microsoft azure application insights is used to record the following information about how jabref is used number of users and sessions dialogs opened so far only the about dialog is tracked as proof of concept new database is opened along with how many entries it contains all exceptions are automatically recorded a few user information country os screen size jabref version java version if you give your ok i will continue and implement the following track all dialogs add opt out preferencein we decided to use google analytics for this but as microsoft already provided a nice interface for java i went for this route change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate well since it was decided in the devcall to implement this it is ok for me if you go ahead regarding the choice of the tracking technology i trust your skills the code that is needed to track a dialog seems to be very simple in any casei am just not sure if an opt out is the way to go or if it should rather be an opt in maybe we could display a dialog asking for consent on first startup that would be more privacy friendly in my point of view and we do not want jabref to appear that it tries to grab user data i am sure there would be enough people who are willing to contribute their data even in case of opt in for opt in nice that you give it a try 😄 👍 ga had no appropriate library why do you want to spy almost everything i do grimes my guess i havent participated in the discussion on this is that this would enable us to see which features are actually used and which are not if we had had data on content selector usage we would not have removed them at the same time we would be able to see if there is a point at all in optimizing jabref usage for really large databases or if this is a waste of time i added tracking of other dialogs and changed the default to do not share telemetry data also after the first minute of using jabref the user is asked whether he wants to share is data i actually preferred to have a more non invasive notification similar to ie provides a notificationpanel exactly for this scenario however it doesnt work if the rest of the application is in swing anyway this pr is now finally ready for your feedback for later reference i will add this links also to the wiki walk through of how to use azure application insights in java azure application insight github project i tried it out locally the dialog appears as desired and the option can be disabled via the preferences code wise i have no objections however jabref does not terminate when i close it and i get the a lot of messages in the console eg ai trace telemetry configuration illegal instrumentation key nullai trace inprocesstelemetrychannel sending telemetryai error failed to send bad request {itemsreceived itemsaccepted errors {index statuscode message invalid instrumentation key} }ai trace telemetry configuration illegal instrumentation key nullai trace inprocesstelemetrychannel sending telemetryai error failed to send bad request {itemsreceived itemsaccepted errors {index statuscode message invalid instrumentation key} } since this is a very sensitive topic i think we should make the dialog a little more explanatory currently it says to improve the user experience we would like to collect data on the features you use no personal data will be collectedwhile everything is in that statement i think we should be more explicit and repeat ourselves suggestion to improve the user experience we would like to collect anonymous statistics on the features you use we will only record what features you access and how often you do it we will neither collect any personal data nor the content of bibliographic items the collected data will be stored on xxx and we will only use it to prioritize our development efforts if you choose to allow data collection you can later disable it via options preferences generali know this is quite long but since this is a delicate topic i think it is necessary btw where is the data actually stored jabref developers i think this is so important that everyone should consider it brieflyand a last comment we will get flack from the linux freaks when they find out that we dare to include a microsoft library so be prepared for it i like your suggestion for the dialog text and updated it accordingly the data is store on microsoft azure serverno idea where exactly 😄 the reason for the error message is that a correct instrumentation key is only inserted by travis and thus you get these messages when you run jabref from the ide by the way this is what i just got after installing soapui soapui course they have a much more explicit privacy policy page for that
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,readd drop down content selectors first attempt at readding the code for refs code does not compile yet some adjustments need to be made regarding metadata stuff etc change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tobiasdiez there are some things with the metadata to make it compile again could you please have a look thanks how to handle the metadata is indeed a problem i remember that i removed the content selectors mainly because they were the last not so easy to convert to the new metadata item the next few days i will not find the time to assist you here sorry still some language related errors the localization keys existed before the feature was removed i wonder why the revert did not restore them in the language files i did a manual revert because there were some more changes which would have led to conflicts otherwisewas somehow decided as this was a rather old feature i suppose there were translations for most languages can you readd the translated values as well or should i go digging in the history 😉 so i re implemented parsing and serialization of content selectors and added tests for it it is probably not the most beautiful fashion but i need to want to link to the old code and not have to re write the gui speaking of the gui the content selectors seem to be working fine if the metadata is in the bib file the gui in the entryeditor is not actually beautiful but i guess it has never been does anybody feel like polishing the ui however i do not see options – manage content selectors maybe that has not been ported from yet maybe someone who is more familiar with the menu than me can have a look finally the test currently say netsfjabreflogichelphelpfiletest refertovalidpage failed although there seems to be a help page here someone certainly has a pointer for that regarding the help file there is an enum called helpfiles or similar forthe name of the help pagei can take a look at the dialog thing in the menuam nachm schrieb jörg lenhard so i re implemented parsing and serialization of content selectors andadded tests for it it is probably not the most beautiful fashion but ineed to want to link to the old code and not have to re write the gui speaking of the gui the content selectors seem to be working fine if themetadata is in the bib file the gui in the entryeditor is not actuallybeautiful but i guess it has never been does anybody feel like polishingthe ui however i do not see options – manage content selectors maybethat has not been ported from yet maybe someone who is more familiarwith the menu than me can have a look finally the test currently say netsfjabreflogichelphelpfiletest refertovalidpage failed although there seems to be a help page here someone certainly has a pointerfor that — you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread i pushed a commit which should take care of the menu item hopefully i directly edited it on github tobiasdiez indeed it does nice that means the feature is backregarding the help files there is content_selector contentselector in netsfjabreflogichelphelpfile so the test really should not fail should it ok seems we are back on track only the google scholar test is failing now which i hope is just a random connection problem on the side of travis the same might have applied for the help file testso now we can do some more code review and at a certain point have the users from try out the feature to make sure that it works tobiasdiez i addressed most of your comments i agree that content selectors is probably not the most appropriate name for the stuff this feature does but it is the name under which it has existed for a long time and is known at least by some people i would say that consistency in naming tops appropriateness of the namefurthermore i removed the entry editors update code as you asked for the updating of the content selectors did not even work with this code i tried to replace it with something else and failed so for now you have to restart jabref to get a change in the content selectors to work maybe someone from jabref developers can provide a hint on how the refresh of the entry editor should workfinally i will leave the problems in the localization for siedlerchr to fix closing and reopening of the entry editor does not work potentially with selecting another entry matthiasgeiger unfortunately not the changed data makes it into the metadata but the gui does not notice it is only up to date when the metadata is re read from disk and the entryeditor is re built closing and reopening the bib file does the trick or restarting jabref so we would like to get this into v which hopefully can be released in december what is missing correct the language files have selector keywords updated without reloading of the bib file have the users play around with it to see if it really worksi was hoping that siedlerchr could do the first two points and hopefully soon siedlerchr what is your opinion on that yeah i will try to work on it at least i tried to fix the language files yesterday i will continue working on it the weekend
1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,improve entrytype customization goals entry customization based on bibdatabasemode working for custom entry types defined in bib db storage is working for new customized entries instead of creating three four prefs strings for each customized entry type in the form custom_type_ _name custom_type_ _req two distinct pref nodes one for bibtex one for biblatex for customized entry types are used which simply use the custom type name as key and the string serialization as value parsing can be reused loading is working for newly created customized entries write prefs migration is performed on first startup of new version existing prefs will be put as new custom types for defaultbibdatabasemode old prefs are not deleted enable testing with cleanup after test execution bibtex biblatex various bug fixes and improvements eg refactor rewrite parts of entrycustomizationdialog to improve performance refs and also clearing of bibtexkeypatterns using reset preferences deleting custom type restoring customized default type from exported prefs no multiple import of customized entry types check resetting overridden default entry types does not work sometimes even crashes not reproducible in reworked state ask stefan kolb whether still an issue related to caused by running through all entries in all open dbs x if a customized type is declared in a file it will be tried to import the declarations if a customtype already exists a warning should be shown that it will be overwritten before this pr no import of already existing customizations custom import before now more control custom import new x a customized standard type should not appear in the custom section of the new entry dialog and not in the custom entries section of the change entry type menu x changelog okay i think the current state is now a good improvement of the old status quo at the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing apart from that i would appreciate some feedback apart from a changelog and some more tests this is good to go from my side mlep frith th it is not yet decided whether we will include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manuallythanks select_all_customized_types_to_be_stored_in_local_preferencescurrently_unknowndifferent_customization_current_settings_will_be_overwritten on thu dec at am matthias geiger wrote mlep include this improvement in or not however there are three more translations which are added in this pull request could you provide me translations for these three strings then ill add them manually thanks select_all_customized_types_to_be_stored_in_local_preferences select_all_customized_types_to_be_stored_in_local_preferencesseleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali currently_unknown currently_unknownattualmente_sconosciutothats the singular mode the plural is attualmente_sconosciutibut since italian is profoundly evil thats ok if referred to a masculinenoun the feminine forms are different but im digressing different_customization_current_settings_will_be_overwritten different_customization_current_settings_will_be_overwrittenpersonalizzazione_differente_i_parametri_correnti_saranno_sovrascritti — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata thank you frith th youre welcomeon fri dec at pm matthias geiger wrote thank you frith th — you are receiving this because you were mentioned reply to this email directly view it on github the thread fer do santagata how did we proceed regarding standard types is it a v issue see https githubcom koppor jabref issues
1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,be more friendly when using journal alias field id like to copy bibtex entries to biblatex databases and vice versa when using required fields only this works perfectly when in biblatex mode jabref does not display the value of journal in the required fields because jabref demands the field journaltitle this is not only confusing for me but also for other users i know that a clean solution is this however wont happen this yeari also know that a bibtex to biblatex converter and biblatex to bibtex converter is another solution this however forces users to run these when copying and pasting between databases this could be solved by running these converters silently when copying and pasting when jabref is used in parallel to other software such as notepad this does not help i cannot force everyone to use jabref thus simply supporting journal in jabref is the solution for me the biblatex manual states journal field literal an alias for journaltitle provided for bibtex compatibility see § thus it is not deprecated but an alias and should imho be considered as full alternative for journaltitle i am aware that this patch makes it hard for users using full biblatex with journaltitle instead of journal i am assuming that not much users are aware of the different modes of jabref and that they switch back and forth for the same file or for the bibentries we now show both journaltitle and journal if these fields exists in as required fieldsthis whole discussion somehow refs minor improvement enhanced integrity checks testing for biblatex only fields to be aware of more fields eg location all fetchers return now bibtex before arxiv and msbib created biblatex screenshot current jabref grabbed_ screenshot updated jabref grabbed_ checklist change in changelogmd described manually tested changed features in running jabref n a helpjabreforg n a if you changed the localization did you run gradle ate hehe let us see how political this will get code wise the pr looks fine and i give my for merging the only blocker is that for some reason the gui tests are failing edit i restartet the build for the push lets see if it works on a second try you could also create a discussion point at in case i want to start a discussion im going to do that on the dante ev mailing list or same dante ev event 😇 the gui tests are also failing on master i dont like thisdespite im not using the biblatex mode i think it is the wrong approach to use the deprecated field instead of the intended field only because we are too lazy to implement our fetchers in the right way or because the user is too lazy to convert copied bibtex entries to biblatex wink journaltitle is the main biblatex field for journal names and hence jabref should support it as a first class citizen this means it should be displayed as a required field and to biblatex should convert journal to journaltitle moreover the journal is not the only controversial field date is the preferred way to store the publication date but bibtex only supports year and month in my opinion we shouldnt reinterpret the biblatex standard just because some users have problems but of course i can see that the new conventions are sometimes inconvenient if users switch between bibtex and biblatex as far as i see it the main problem is that journal lands in deprecated although it is an alias to a required field would it be a solution to show the journal field right below journaltitle in required if it has a value then it would work similar to year month vs date matthiasgeiger journal is not deprecated it is just an alias field tobiasdiez yes that would be a solution therefore i put it in quotes all comments addressed should be good to go now
1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,change in changelogmd described manually tested changed features in running jabref if you changed the localization did you run gradle ate
1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,fix several file cleanup rename issues separated move rename cleanup logicmove rename files in general tab file now use internally the cleanup operations logicseparated gui context menu operations for move cleanuprename files no longer moves files it only renames themfiles are not overwritten if they exist or have the same name todo apply new targetfiledir in test todo adapt test finally todo rework gui action code fix for and includes fix for and jabrefgeneralfilefield describe the changes you have made here change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate gui cleanuppreset panel metadatagetdefaultfiledirectory seems not to check bibtex location somehow todo find a wy to cleanup only one file todo add some preview dialog stuff prevent filedirpattern subfolder creation on each run if already exists i had a look at the code which in general is good and fixed a few minor issues directly missing getters setters that were missing well before this pr but this is a good time for a fix i also played around a little with the ui and tried to find errors but was unsuccessfulin the spirit of progress and as suggested by siedlerchr i am merging now directly more far fetching suggestions by tobiasdiez should be addressed in a follow up pr as discussed above siedlerchr thanks again for this heap of work
1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,make sure that unregistered event sources do not stop jabref from shu… …tting down unregistering event sources that have not been registered before should not stop jabref from shutting down orderly this pr logs such a problem instead of halting the shutdown of the program change in changelogmd described manually tested changed features in running jabref would it be possible to first check if the event is registered and only doing a shutdown thenthis should be implemented at best in unregister itself siedlerchr unfortunately the implementation of the event bus from google supports no such checking functionality hence we would have to remember subscribers in a custom list which in my point of view would be an unnecessary overhead however i have now moved the exception handling code to all the different event sources in jabref i hope i found them all that way we catch the exception as early as possible i cannot think of a circumstance where trying to remove a listener that never listened should crash the complete applicationit is not always logged though since not all of the classes that are event sources use a logger but again i do not think that this is very tragic or indeed important there is already discussion about checking it fixing check style you should add the comments for switching it off at hat position siedlerchr sorry but i am not getting your comment regarding checkstyle the builds seem to fail because of the usual random fetcher errors lenhard i meant the codacy which will complain about the empty catch blocksbut i think i confused it with checkstyle module siedlerchr ok i understand however i am not too fond of codacy and refuse to add comments just because the tool produces false positives i am well aware that it is near impossible for a tool to tell if an empty catch block makes sense or not but it is false positive nonetheless the existing comment in there is meaningful to humans which is way more importanti just pushed a few minor formatting fixes ill take the thumps up as an ok for merge which ill do right away
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,fix apostrophe conversion this repairs the apostrophe handling in the latex to unicode conversion broken by and maintains the special handling of apostrophes in conjunction with the character n that intended to fix it increases complexity and reduces performance in the unicode conversion a tiny bit through the additional checks that are now in there ultimately the goal should be to replace the conversion with an external library change in changelogmd described manually tested changed features in running jabref ich merge das mal rein und hoffe dass cih das dann dan fürs erste erledigt hat
1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,fix title related key patterns in bibtexkeypatternutil related to and the class bibtexkeypatternutil ive added cases for title and camel to try and make them conform to the documentation was also working on this issue here i found out that caseformatlower_camelto caseformatupper_camel entrygetfield fieldnametitle orelse replaceall \\s didnt work because to be able to transform the title into upper_camel this way the title has to be in lower_camel case initially which is often not the caseive added some test cases and changed a few others to conform to the documentation i still need to take a look at the failing tests change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate codewise looks good 👍 thank you very much for your contribution would you please check the failing tets just click details on the red marked travis build and you are able to see the log from what i saw there is jut another unit test which tests key generation which has to be adapted thanks ill try to fix it tomorrow 👍 siedlerchr ive taken a look at the failing tests and after making a small change to the code and to some tests its now workingsome tests failed because most of the formatter classes only work if the input is a non concatenated string from my point of view it looks good however another dev should take a look too if you could just add a changelog entry it would be nice otherwise we can create it on merge i wonder whether it would be possible to add test cases to makelabelwithdatabasetestjava with all patterns listed at saw that you also added camel and added a test for that in bibtexkeypatternutiltestjava to test the user experience i would like to ask to add some tests for that in makelabelwithdatabaseteststrangely camelequals val is not test covered even though it should grabbed_ it is too much effort we can just go ahead and merge i have added a test for the camel case to makelabelwithdatabasetestjavahope the camelequals val is covered now are there any additional test cases i should addedit about checking all the patterns listed at i can work on that but im pretty busy the next couple of daysso id rather have this merged now and work on adding the additional test cases later yeah its covered go ahead with the merge and look forward to other tests general improvements we have a huge list of smaller tasks at you for the good work we just discovered that our documentation was wrong and that camel should be a modifier title camel it should work with title capitalize see hmm ok ive responded in the issue since it is not entirely clear to me what has to happen
1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,fix exception when parsing groups which contain a top level group fixes the import of the problem occurred when after the definition of a subgroup of level a group definition with level followed explicitgroup \ \ explicitgroup \ \ explicitgroup \ \ change in changelogmd described ~~ ~~ manually tested changed features in running jabref~~ helpjabreforg ~~ if you changed the localization did you run gradle ate ~~ failing test was google scholar
1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,extend architecture tests to javafx and javafxcollections extends the architecture tests to also cover javafx and javafxcollections as discussed in it seems that it is high time for this since javafx classes are already being misused as this pr uncovers thus this currently fails the build the misuses are orgjabreflogicexportergroupserializer groupserializertest groupsparsertest uses javafxscenepaintcolor orgjabreflogicjournalsabbreviation uses javafxbeanspropertysimplestringproperty test orgjabreflogicl nlocalizationparser uses fxmlloader platformimplalthough we might think about making exceptions for the beans and tests i dont see why the color class should be directly accessed in the gui change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for your reply looking at the color class it is just a representation of the rgb code so not too problematic i am still not sure assuming we would switch to a new gui technology would we be using javafxcolor objects or would we have to refactor the model classes to only use the rgb code string i would really like to have a third opinion from someone from jabref developers on this so that we can sort of say that we have a majority consensus i dont think very highly of our custom event bus and have always said so so bean properties would be acceptable to me especially considering the fact that we allow observable collections which are essentially just bean data structures it might make sense to exclude the whole test sources from the architecture tests imho they are not really relevant for static architecture checks i will have a look at that i have been thinking a little more about color isnt this the very same thing as we have in there we also have all the color codes but in the gui package and not in model so what is our reasoning to allow the javafx version of color in model but not the awt version also had we used the awt version in model wouldnt that have meant that we would have had to rewrite all such usages for the javafx migration if yes isnt that a good argument for not allowing the javafx version of color in modeland interestingly i found this this is a plain violation of our architecture rules tobiasdiez did you do the import like that on purpose so that the tests do not find it or was that an accident i think the issue with the color class is that previously there was no need to have anything color related in the model as no class in model relied upon it thus there was never situation where the usage of awtcolor in model was on the table from an architectural standpoint the cleanest solution is probably to implement our own version of color in model and use this the gui contains then a converter from this color to whatever color is used in the corresponding ui framework however this is additional work and apart from making a migration to a new gui easier i dont see any advantages simonharrer as i have our discussion about various architectural points in good memory i would highly value your opinion on this matter if you find the time to look into it i cant remember that i was creative enough to use the full path to hide the dependency from our architecture tests but good to know that this works i will now definitely ab use it and make my life way easier 😄 of course i will fix it tomorrow tobiasdiez the fix will go into this pr color to add it as exception because it is just a data model i would not implement a separate color class even though this would be the cleanest solution effort saving beans to allow them tests yes please exclude them side comment macker seems to be a tool which also implements architecture checks example ok it is outdated but i thought it is nice to know 😇 i still think that making an exception for color is a bad decision that will come back to bite us in the course of moving to javafx we are currently losing a lot of independence in our model packages something that we invested a lot of effort when trying to get rid of the swing dependenciesbut if this is the consensus in the team ill bow to that i created exceptions for the remaining fx classes and this pr should be ready to go when the build succeeds on travis
0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix entry editor and this was a tricky bug javafx creates empty dummy cells at the end of a list view for some reason the list view for the linked files had an initial size of e and well creating that many dummy cells takes a while probably longer than the universe took to create humans and eventually lead to a freeze of the javafx threadthe fix was easy just add maxheight and be happy finally after trying to debug the problem for ages change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,less backups addresses the frequent events are due to the bidirectional binding which transfers every change directly into the bibentry if we want fewer events the only solution will probably be to break the binding which would be very disappointing for the javafx implementation in my point of view the problem is not on the side of event creation after all every change should trigger an event and javafx triggers many changes imho this should be fixed in how we react to eventsi also noticed the exception but do not get a dialog this seems to happen because of the save operation invoked by the backupa solution might be to do less backups by doing backups only every x events and not for every event ignoring fieldchangeevents in the backup adding the size of the field change in the fieldchangeevent class so that you can ignore it if only character changedthis pr combines options and ie the backup manager ignores events that are very minor and only does a backup if enough of them have happened currently set to five what do you think change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,update source tab when an entry is changed attempts to fix the remaining part of the source tab is now updated each time an entry is changed in the editorthere no part of a bibentry that represents the source tab per se to which we could bind therefore this pr adds a listener to the source tab it now listens to entrychangedevents and if the entry that it represents is changed then it updates its content change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,make font size in entry editor and group panel customizable this fix for is inspired and based on due to my limited git knowledge i was not able to directly hijack the other pr sorry lenhard change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,fix for issue this is an atempt to fix the problem with entry editor focus as described in in detail when entryeditor opens up it is not focused automatically the desired behavior is to focus the first textfield on any of the entryeditor s tabsthe way the fix is implemented when entryeditor is opened the jfxpanel in which is the tabpane of the entryeditor is getting the focus the focus is given implicitly to a focustraversable node contained in the jfxpanel the selection of the node seems to be random even though consistent for a given tree of nodes as far as ive tested it consistently focuses the first textfield on any tab which is the desired behavior i make this pull requested as suggested in discussion by siedlerchr i should mention that i ran gradle check which results in tests failed in my setup but this was also the result when i ran the test before making any change change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for the pr
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,store changes in source tab when new entry is selected the problem was that the source tab only stored changes on focus change and this did not happen when you just select a new entry in the main tablethe pr modifies an attribute in the entryeditor movingtodifferententry and turns it into a booleanproperty so that you can bind to it and react to changesedit also fixes a second unreported issue now the base panel is marked as dirty when you type something in the source tabedit fixes also now the other fields tab is rebuilt whenever an other field is newly added or removed at the bibentry this is achieved with the event system and a new subtype of fieldchangedevent change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate
1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,increase size of file and keywords editors in the new entryeditor we have the problem that sometimes text in the textareas is hard to read because the areas are very narrow the reason for this is that java tries to fit them in the available display space examples this pr sets a minimum size for all textareas in the entryeditor the value of px is rather arbitrary and ill be happy to get some thoughts if this is good or if more or less is desirable with this minimum size all textareas are nicer to read even in the cramped up general tab the only problem is that you now need to scroll in the general tab most of the time all in all i think this should definitly go into change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate to be honest im not a big fan of the increased size i prefer to have as much information on the screen as possible and not to have to scroll on the other hand i acknowledge that the current layout is also suboptimal as the text fields are not expanding on their own when they contain much information maybe it is already enough to increase the prefered height instead of minimum also you should be able to increase the size of the files panel independently of the other fieldsfurthermore it is probably better to use scaling units like em instead of pixels tobiasdiez ok you have the same opinion as koppor i guessincreasing the preferred height didnt help unfortunately we can leave most field editors as they are but we have to increase the size of the file and the the keywords editor those are the two editors in the cramped general tab where users could enter information with more than a single line that doesnt look good at all and really does annoy usersive tried to change just these two editors in code but failed whenever i call setminwidth in or change the minheight in the related fxml file the min height of all field editors in the tab increase any hint the problem is probably where the rows are set to have the same height quick idea if the row constraints are the problem it might be an option to use two rows for the file keyword editors matthiasgeiger not sure if thats easily possible the best solution is probably to write new subclass of entryeditortab or extend the fxfieldeditor by a getweight method which you can use in it is already sufficient to remove these row constraints although there was probably a reason why i added them in the first place ok ive implemented a hack that assigns twice the space of normal rows to the keyword and file field editorsas i said this is a hack but before i turn this into something more acceptable along your suggestion tobiasdiez i would like to get confirmation from the team that this is a solution that we can live with visually in the jabref ui if not than i am just wasting my time with gui hacking and now i refactored it anyway jabref continues to ruin my lunch time i tried out the new solution locally and it looks good enough on two column tabs the things shrink too much but we discussed in the devcall that it is difficult to determine the right min height screen resolution etc so good to merge as discussed in the dev call i am merging this now
1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,fix freezing on browse in protected terms dialog when adding from entrry editorchanged open file dialog to save file dialog change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate tested locally and works good job
1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,followup to issue entry editor now adds missing curly braces on closing change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate hey snisnisniksonah is this pr ready for review if so please notify us by adding the label and remove the tag from the title
1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,when groups are removed also remove them from entries change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate ok i managed to get this done and i think ive addressed everything as the reviewers desired it can be merged from my point of view so please have a look and merge if you think it is ok one more try now only explicitgroups are removed from entries keyword based groups are kept i hope this is the last missing puzzle piece sorry for being pestic but with this implementation keyword groups that are children of the deleted explicit group are still handled wrongly i directly committed a fix if you are fine with it you have my ok for mergeby the way in order to convince you about the testability of javafx code you are invited to write a test covering the new behavior 😈 thanks challenge accepted i did not only add one test but threei will merge when the build goes through
1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,added logic to check whether linked file already exists added a check in linkedfileviewmodelrename to see if a file which isbeing renamed already exists in the target location if such a file isfound then an error popup displays informing the user of the conflictuser will be prompted to choose whether to overwrite or cancelalso see for additional details this work fine and includes all the requested changes from the previous pull request with one caveat if the file being overridden is related to a different entry and has different case such as entry abc renamed to def entry def then the nd entry file association will target a now non existing file its possible to get around this by searching the database for any entries that have the old filename def and changing the association to the new filename but i dont know if thats something desireable so i decided to push this as is for now ok i changed to an optional and removed filesexists targetfilepath as its redundant im still getting the hang of git and egit so hopefully the merge didnt mess anything up andrew lev i stick to git and git gui from command line a lot easier than struggling with the eclipse git client thanks this looks really good now
1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,implemented issue added an error dialog if the file is open in another process and cannot be renamed this is my first contribution please give me feedback if you see any problems hi derebaba thanks for your pull request your contribution is certainly very welcome and looks good overalli still have two points that should be addressed you add two new localization entries here the way in which you use the localization strings in the code is fine but you need to add the keys to the language files otherwise the build will fail to do so you need to add the keys manually to the english file jabref src main resources l n jabref_enproperties and then execute gradlew ate on the command line which will synchronize the keys in all files theres also a pretty good description of that when you run the tests and the localization test fails apart from that you are using the older file api javaio for doing the rename check we try to get rid of that and try to use the new file api javanio instead i would expect something like filesiswritable to do the trick can you please adjust your solution to use the nio api hi lenhard thanks for your feedback are the keys ordered in any way in properties file or should i add new keys at the end derebaba you should first check if there is already a key with the same or similar text which you can reuse otherwise add it to the end and i synchronized the keys and removed the check which used the old api however filesiswritable returns true even if the file is open in another process i searched a lot but i dont think the check is possible with the new api therefore i moved the error dialog code to the catch block in fileutiljava
1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,update link to renamed file this patch fixes the issue described in the link to the renamed file is successfully updated now change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thank you for the contribution derebaba this look very good now and will be merged as soon as another maintainer gives his okwe have quite some further open issues that wait for fixing so feel free to have a look at those meanwhile you can also join us at slack if you have questions i have merged this and moved the changelog entry to the right category
1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,fix for issue bibtexkey generator does not use crossref information see the bibtex key generator now uses crossreferenced entries if required fields are empty change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues m that is really an impressive amount of tests good jobthere are two merge conflicts could you resolve those once thats done this pr is ready to go into master and once again thanks
1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,another try to fix the npe in the search bar fiexes i think i managed to locate the problem of the npe and the missing search bar apparently in some conditions the syntax to access the parent in a path does not work for resources thus the css file is not found resulting in a npe change in changelogmd described bug introduced in dev manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate search bar appears here i think j hannes should run the build at his system currently one has to checkout the code and execute gradlew run as we currently have issues with our code signing certificate koppor i just rebuilt the package from git and the search bar is still not there j hannes did you checked out the branch fix or still used the master since this pr is not yet merged the fix is not included in the master branch if you used the correct branch to build is the same error message still there anyway i merge this now since the code still works under normal conditions and might help in others so a new checkout of the master branch should work now tobiasdiez now its back the package will certainly only use the master branch i though it was already merged there j hannes thanks for the feedback and your help debugging this issue much appreciated
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,initialize previe before mainpanel to prevent npes on delete no changelod needed as this is a change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate thanks for the fix ill merge directly since this is only a minor change
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,lookup filetypes in enum set to prevent npe due to uninitialized expo… …rterfactory this is my initial idea maybe we can optimize this change in changelogmd described manually tested changed features in running jabref helpjabreforg if you changed the localization did you run gradle ate i refactored the list where possible this can be further improved if this rather simple dialog is ported to javafx for example getting rid of the glazedcel eventlistl dependency
1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,file link deletion dialog improvements this pull request fixes the following issues when a file link in a bibliography entry is deleted by the user a dialog is displayed previously the default first dialog option deleted the linked file from disk the default behaviour has been changed to just removing the file link from the entry this is a fix to issue when clicking the cancel button in the file link deletion dialog the file was being deleted from the list this behaviour has been fixed by changing the return value of the delete method when the cancel button is chosen example screenshot _ x _scrot checklist change in changelogmd described manually tested changed features in running jabref helpjabreforg am unsure whether the remaining checklist items are applicable to this pull requesti would be willing to provide tests for the delete method however the dialogservice member cannot be stubbed in mocked as it is as it is marked final and therefore i cant control the returned chosen option from inside the unit testi would appreciate any pointers and suggestions thanks for your contribution i have tested the changes locally and it works as expecteda little step for you a great step for ~~humanity~~ jabref users just add the suggestions by tobiasdiez and we can merge it in ps if you include the word xxxx then the corresponding issue will be closed automatically when the pr is merged thank you for your pointers i have locally added buttondatayes and now i will attempt to prepare a test suite for the remove method at least and push everything out when its ready smile okay i pushed out the changes adding the button data restored the original button order at least on linux but the remove button is now clearly the default and as far as i can tell from javafx docs this is the desired behaviourthe test code im not too proud of theres some weird hacking going on there to get the tests running and i had to balance between not making them brittle and not worsening the implementations readability just for tests sake if you have ideas for improvements id be happy to go back and fix the ugliness well if im this close might as well try and make this pr as good as possibleive added the suggested changes however i did leave some of the parentheses as they were near those long mock setup calls to be precise because i couldnt make them look decent otherwise nice thanks again for your contributions we are looking forward to see more prs from you 😄
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix some fx thread issue while investigating i noticed a thread error when changing the entry otherwise i think this could also solve some other issues here change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues is this fix also needed for the new maintable i would prefer if you push such fixes directly onto this new branch tobiasdiez there the fix is already present the whole method is wrapped in the fx thread in that branch
1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,try to change color of magnifier icon i am trying to change the color of the magnifier icon as requested here however the icon refuses a color change it even opts out of the color scheme of jabref since it is black instead of purple despite the fact that the icon is configured as purple in the code tobiasdiez how can i change the color of this icon any change will do really for reasons unknown to me the icon straight out refuses the change change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues screenshot is a space between the other icons until the cool solution from is implemented i am in favor of using this approach reason this makes the jabref feature explicit papers search well if koppor really wants this im fine with it although i bet that more users get confused by a cyan highlighted icon than they are getting enlighted by it
1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,add cleanup operation for replacing ligatures i have used the mapping listed here note that german users might be surprised by how this replaces the letter ß change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues ok ive taken out the conversion of ß and documented this in the code if there are no other characters that we want to exclude then this pr should be good to go
1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,update architecture tests to catch static imports fixes a part of updates the architecture tests to junit and also catches violations in static imports now i tested this by adding a static import and checking that the build breaks it does but of course i had to remove the cause again change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,correct fetcher messages siedlerchr we do
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fixed url column this url column now shows url or doi correctly and opens on click change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues hi florian beetz since you have been involved in the maintable migrations do you want to join tomorrows devcall at am drop me a note by mail linus lynyusde cheers linus okay merging this in order to move on i have created another issue to track the tooltips florian beetz wants to continue with that as the next pr
1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,fix ieee fetcher by enabling cookie support apparently when in vpn network of university ieee fulltext fetcher needs cookie support enabled because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,add text file export for find unlinked files this is to add the feature which allows exporting of the list of files found in find unlinked files to a text filecloses issue im not sure if it is exactly what you are looking for but i thought i would give it a shot hopefully you will be kind though i welcome constructive feedback of course im not sure it really even needs the progress bar for the exporting because it is so fast but i left it in for now since the importing has one one change i didnt make is changing the list of files to path type from file type i left a note about that above let me know what you think jssander please pull before you continue to work on it i merged master to fix conflicts due to our release today how do i pull correctly in idea when i go to pull i think im pulling from my forked master i made some changes but there is a conflict now in the changelog im not sure how to resolve it jssander just keep both lines i did it for you using the github web ui just pull and you are fine at your side too great thank you so much
1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,fix look and feel related issues enabled the change of the l&f for macremove gtk l&f fix migration of old jgoodies l&f fixes because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i merge this now and i will create a pr to remove that l&f stuff completely in maintable beta
1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,cpu leak see fix java to later version pretty restrictive for the user unfortunately jabref developers i worked a little bit with jabref and the new jdk and i feel like also the problems with duplicated entries in the search box and freezes are less frequent nowmaybe the constant load provokes these issues even moretherefore i vote to release a new jr version where we force the users to upgrade to the newest java jre jdkalso refs let me finish today and we can go for a release as this really improves the situation at least for me i think we should definitly include this in our release stefan kolb which tool did you use for the cpu monitoringi tried java version _ and it doesnt seem to cause high cpu loadfocused entry editor entry editor grafik i used the visualvm it is actually not caused by the entry editor but by switching between programslet me check v _
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix for issue koppor auto cleanup url because github does not support autolinking there this issue is auto cleanup url links on paste action and add cleanup url menu item to the url fieldmost codes are modified from a previous contributor in the menu item list changed as follows with defalut editor menu change case convert etc i am not sure whether its necessary to add defalut editor menu if not the menu item list would be have run gradlew check but failed but even if i switch to the master branch which is the same as jabref master the build still failed with the same error message like it seems that i did not modify related classes i dont know what went wrong it confuses me a loti am looking forward to your feedback change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your contribution the gradlew check often fails locally due to some platform specific encoding issues in the terminal you dont reed to run it as it just takes time to run all the test we use travis ci continous integration for testing as long as the travis ci test does not show any errors its good in case travis fails just click on it and you can see where it exactly failed
1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,arxiv fetcher support url in this pr i wanted to fix the issue from i simply used existing code in the same file which just takes the identifier at the end of the url and perform a searchfor example _ to _ _the error dialog does not appear anymore and a new entry is made change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues yeah looks good to me i exactly had the same issue yesterday that i could not paste the whole url
1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,display deprecated fields in misc entry also in optional fields tab the reason for the original code was to however i couldnt reproduce the issue mentioned there after i removed it the custom entry types dialog effectively prevents you from adding from the same field twice because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,show dialog before creating entry now when you click new entry in a right toolbar it open an extra dialog where user can select a entry type change tooltip to new article
1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,searchable filterable preferences up so far i just created the textbox for searching and fixed a deprecation warningi added paulkra as collaborator on my forklast step so far i was asking myself how i can access the text of the different preferences categories and i was wondering if i need a new interface something like preftabcontents or preftabcontainer for it or extend existing prefstab interface change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues first of all thanks for your contribtion 👍 if you look at the code fo the old preferencesfilterdialog you see that the data comes from the jabrefpreferencesfilter class in orgjabrefpreferences if you have further questions you can also ask in out gitter chat adjusted my comment the easiest solution is probably to transverse the complete control node tree and take the text of all label controls wtfjoke paulkra what is the current status here the code looks already promising it would be really nice if you could finish this siedlerchr its still on my todo list havent found the time to investigate further and were stuck on how i display the filtered preferences i think paulkra doesnt work on it he still didnt accept my invitation link to my forked repo okay thanks for the udpate take your time if you have any questions just ask here or in gitter and we try to help maybe the jfxhighlighter from works to highlight the matches tobiasdiez thanks for the hint however i tested it locally but i didnt liked it that much for example it did mark the buttons for importing exporting show reset preferences also if i dont find alternatives i think about using it anways i tried the _jfoenix_ library but it didnt quite work as expected for eg labels remained highlighted even after changing the query text what i propose is to highlight the matched labels by styling their background with a different color we keep track of the highlighted labels and on every input change reset the highlighted labels and update it with new ones this could be optimized note the entire label is highlighted not a part of it captaindavinci sounds like a good plan the javafx pseudo class seems to work nicely for this thanks for sharing the article tobiasdiez i added the search highlight feature in the latest commithowever i have made use of labeled objects hash code when inserting into the map this would result in a list of all labels instead of grouping them by their text could be replaced by a list instead to avoid this another approach would be to map the texts to a set of labels as well but considering that the number of labels wont be too large i dont think there will be any significant gain in performance the current approach looks good to me im however wondering why you have the map as the relation label or text tab for me the converse relation tab label feels more natural in the end it probably doesnt really mattersplease also use a mutlimap instead of map come to think of it the converse relation does seem more natural and has a simpler implementation ill make the required changes and push the codeedit i am thinking about how to perform better matching of labels for eg one of the tabs has a label named _sending of emails_ a query such as _sending emails_ would not match any labels but in practice i think it should one possible solution is to split the query string delimited by space and check if any token is present in the label name right now two filtering actions are performed by tabs and by labels i think both actions should be merged into one when no match is found the preference window shows contents of previous tab in this case i think the content of preference window should be replaced by the contents of the first tab which matches the query if none match then it should be blank captaindavinci is this ready for review or do you need to further work on it the first remark you had concerning sending emails is a nice suggestion for further improvement but not necessary for merging i would say tobiasdiez yes this is ready for review thank you for the suggestions tobiasdiez and siedlerchr i have refactored the code for the most part to account for the changes and will push the code once i have implemented all changes screenshot showing the preferences window when searching captaindavinci look at my patch import via git am { searchhandlersearchtextproperty required so that changed are reflected} hm this is odd it worked fine for me with this line searchhandlersearchtextproperty bindbidirectional searchboxtextproperty whenever i changed the text in the gui field eg key to asdfasd the view was updated and the new findings were highlighted maybe i understand you wrong but i think this is enough under the hood the bidirectional is nothing else than a wrapper around the changelistener stuff also note that its necessary to have a reference to searchtext property accessed under the changelistener for searchbox could this be related to some sort of premature garbage collectionedit for me changing the text in the gui field did not update the view or highlight the labels bindings are created using weaklistener so they might get garbage collected but i still dont understand why it works for me with the patch i would propose you test again with my patch or at least commit the changes and let others test as well unfortunately i am the next days busy at work and probably cant help much okay i have pushed changes in the mean time i will try testing it again ps since the preferencessearchhandler does not use the searchtext property but only the query text can we instead bind the searchbox to the filtertabs ie not have to deal with binding the text property and string property thanks to both wtfjoke and captaindavinci for joining forces
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix button sizes in issue the sizes of buttons update to current column widths and update to current column order screen shot at pm is still more to fix in this issue the field name is not editablethe value in field name is not identical with table header because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,changed the way the groupdialog description is displayed fixes changed groupdialog description node to textflow groupdialog is no longer resizable changed the layout of the groupdialog window to be more horizontal ok button is only enabled after some input jabrefgroupdialog change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues the code looks good to me and we can merge it as it is now nonetheless christoph is right and it would be better to replace the html completely by styled javafx text modules with corresponding css style classes defined in the basecss since this is a bit of work as you need to fumble around with the localization and its not utterly important i let you decide if you want to work on this or invest your time in something else eg fixing another issue i definetly agree that this should be done the right way at some point but im not really confident to touch the localization im going to move to another issue so this pr can be merged 😄 ah i think i just noticed a bug please wait with merging could you please also take a look at ok so i tried to automatically create a database when the user tried to create a new group without a open database but i couldnt get it to run the code to add the group to the open database always ran before the new database was createdin the end i gave up and i just created a warning when the user tries to create a group without a database i hope i made no mistakes while adding the localization could you please also take a look at this error never occurred when i tried it the report is a little thin and i couldnt recreate itif everything looks good to you you can merge this pr thanks for the quick follow up and sorry for being somewhat pedantic
1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,adds a browse button next to the path text field for aux based groups because github does not support autolinking there fixes a browse button for aux based groups change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i am relatively new to contributing to foss could one help me understand why the check failed and how i can resolve it samiyac i am relatively new to contributing to foss could one help me understand why the check failed and how i can resolve itthe failing check codecov refers to the code coverage eg how much of the code functionality is covered with tests you can ignore it in most cases we only tend to write tests for the most important parts eg the classes in logic model and not for gui dialogsonly if the travis ci fails you should check the details and see where and what error occurred as this executes the checkstyle and the integration tests
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,move library specific key pattern dialog call to library menu follow up of and menu entry bibtex key patterns is calling a library specific dialog to set key patterns the global key patterns are managed using options preferencesthus moving it to library menu grabbed_ minor addition setting title of dialog which was empty before ~~change in changelogmd described~~ ~~~~ manually tested changed features in running jabref ~~ helpjabreforg https githubcom jabref helpjabreforg issues ~~
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,fix removing entries when source code field is out of focus the issue was storesource method is called when entry is out of focus however if another entry is selected then currententry is updated to that and storesource is called with the previous codearea but updating it in the second entry thus causing a duplicationfix was to pass the entry as another argument to storesource because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,nightly indicate the build date and git revision add the information of the latest jabref version and its release date in about panel screenshots of the new layout aboutjabref pr because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your pr it appears that we both misunderstood the request in i also thought that the corresponding build date should be added to the about dialog however this information is already displayed in the lower part there is no reason to show the build date also at the top sorry to say but this makes your pr sadly obsolete
1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,put renaming of file entries in javafx thread for cleanup closes because field changes must be done in the javafx thread i put the field change in a callable to be executed by the javafx threadthis issue might arise for other cleanup tasks as well change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for your pullrequest tobiasdiez im sorry i was a bit careless with this pull request and used a class from the gui inside the logic package and now the build fails shall i open another pull request to revert this or can you fix this on the master branch
1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,fix saving of strings fix removing of strings the only problem i now have i cant reliable detect prevent dupliacte stringseg a user can have a string with label a and content b and a user can enter a new string a with content cthe first string would now be overwritten tobiasdiez do you have an idea if we can directly prevent the entering of duplicatesthe addall method simply adds all strings and updates the content if found previously it would always report a duplicate label exceptionmaybe one could check the id value if its present or equals because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks now its functional
1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,fixed closing of the shared database login dialog if the user enters wrong authentication details fix for the issue dialog close after pressing ok button fixed closing of the shared database login dialog if the user enters wrong authentication details change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix for issue about the toolbar i dont think the search bar size should be link to side pane size with a bind its not really responsive littlebefore without the bind bigafter change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues i like the idea thats one thing always bothered me please add at least a bit of space between the search bar and the icons maybe try to center the search bar in the toolbar and see how it looks core master how is the status of this pr it would be really helpful if you could fix the little issues mentioned here so we can merge this pr
1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,include preview in entry editor because github does not support autolinking there first shot at current look mlep grimes should i continue along this path or do we need a different solutionrelated and change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues jabref developers i would like to have your opinions about this solution before doing the major code changes necessary for a complete integration tobiasdiez im a bit indifferent first personally i do not really use the preview function at all im using standard natbib or whatever styles in latex and therefore know how the entries will be looking like or im not really interested in the exact way they are looking therefore im not sure whether i like it that much screenspace is wasted in the entry editor for the required fields tabs however i think for persons who are interested in the preview this might be even better than the older style so for me it is okay to have in the entry editor but it should still be possible to disable hide the preview in case you are not interested in the information shown there tobiasdiez to me this would be a great implementation i regularly need to send references to people via email or in word files and have the preview allows to do a quick copy paste of the reference as they appear formatted clean i personally dont think its a waste of screen space with the high aspect ratio of todays laptop screens and pcs monitors thats not a problem however i do agree with matthiasgeiger that the option to enable disable the preview would still be possible nicolarge side note this can already be accomplished without even showing the preview by marking all entries you want to share in the main table then right click copy copy preview or alternatively using ctrl shift c smile superseded by i know this is a big thing to ask but can you please revert this change and or make it just optional i have just had a look at jabref alpha snapshot master c bdc to test just to realise that the entry preview is no longer automatically shown at alli am heavily reliant on using the entry preview i often tend to quickly go through different entries and the entry preview gives me a quick overview of the entry now i always have to open the entry editor just to see the preview my feeling is that this change was introduced by people who actually do not even use the entry preview at all see also comment here this new behaviour is completely different from the old jabref behaviour and from similar reference managers eg mendeley so unless you can suggest a change in the way i should use jabref now maybe i just dont understand how the entry preview is now supposed to be used while keeping my user scenario i e quickly cycle through entries and always get a quick summary of the respective entry i would ask to drop this change or make it optional hi aegit i understand your concern and we should definitely not leave it as it is if we would keep the entry editor open all the time unless the user explicitly closes it would that solve your problem hmmm that might be a solution although it also means that it will use up more of the available screen space to be honest i am not a big fan of that i think the old behaviour was just fine as it was implemented indeed other reference managers did it also old way jabref was doing it is there any reason why this change was introduced at all i personally dont see the user case but maybe that is just me well we had our reasons you can start editing entries quicker because the entry editor is already open this should be fixed as mentioned above you immediately see the effect of editing something in the entry preview while you are typing this is especially important for novice users screen resolutions have become bigger since when the entry editor and the entry preview were first introduced thus we have the space to display both side by side hmm ok regarding the points so far the issue with the entry editor does not seem to be fully resolved furthermore note the problems with the focus searching terms and then suddenly making changes in the entry editor makes this change currently dangerous but i see what is intended here ok that makes sense but then it would probably be necessary to have a single entry tab not split among different tabs at least that is how mendeley is doing this personally i liked it the way jabref had implemented things before i am not so sure whether people are happy with the current solution i e entry preview open editor but with multiple entry tabs not so sure about the space currently using a x screen with jabref using up half of the screen there it is definitely too small at work i have a k screen where jabref is using up a quarter of the screen jabref in full screen on a x screen i dont think jabref is supposed to be used in full screen mode i dont think many people have larger screens especially when you include laptop users i would very much like a simple and one click way to disable showing the citation preview i spent quite some time looking for it when i got the update since i could not believe that this change was introduced without an option to switch off the preview that takes away space and cpu cycles for keeping it updated as this is a merged pr i moved the conversation feedback to a new issue to keep the overview
1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix the attach file dialog for starting on the users main directory now the attach file dialog in the right click menu for an entry starts on the working directory instead of the users main directory it is the same behavior as when adding a file from the entry editorit solves change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,set up general fields character check not correct & alphabetical ordering as asked the character was included on the error message also we included other characters that were not being mentioned on the message we tried to remove the character from key_illegal_characters and key_unwanted_characters on bibtexkeygeneratorjava but we did not know if it would be a good idea because it violates some testsabout the order of the tabs we removed the alphabetical ordering so now it is following the order defined when the tabs are created on the set up general fields option hyphen pr because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues lgtm thank you very much for your contribution would you please add a note on the allowed chars in the help at the bottom click edit this page
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,add copy linked files action to contextmneu in general tab because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues added a variant for a single entry and did some refactoring
1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,fixes ris data field because github does not support autolinking there this pull resquest fixes issue importing ris files jabref checks for date fields y pyda and y and uses the first one it finds the problem is that y refers to access date da in most cases is a generic date and py is the publication year reliable field couldnt find references to y primary date however as already cited in and by doing some exports we found y to be pys synonym furthermore when py received a higher priority than y some tests cases didnt pass as there were a missing month field in bib we established a priority system indicated by the datetags lowest index higher priority added test cases for this and changed one of the old ones adding the month field nicely displayed in change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thanks for the feedback siedlerchrthose are great suggestions using a list is much better and since indexof returns if it doesnt find the element we can use it to find out if the element is in datetags and to get its index like this java } else if tagpriority datetagsindexof tag && valuelength { if tagpriority premature optimization is the root of all evil ~ donald knuththe complexity really is only for large nbut i think you can omit one time searching the list see my comment at the code thank you for your work
1,0,0,1,0,0,0,0,0,1,1,1,0,0,1,fix substring exception in find unlinked files refactor to own method and add testthe exception came when the parsed editor string did not end with a colon and two spaces because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,fix exception when adding new entry because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix double paste on different os fixes fixes upon pasting macos calls the system paste as well as jabrefframeeditactionexecute this caused a duplicate call of the paste working in linux as well
1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,fix double paste on different os fixes fixes upon pasting macos calls the system paste as well as jabrefframeeditactionexecute this caused a duplicate call of the paste working in linux as well
1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,issue issue add software and dataset entrytype as an option in the biblatex and bibtex add fields eventitle eventdate and venue to unpublished entry type i used the misc set of fields to supplement software and dataset couldnt find documentation about specific fields that should be included in software and dataset entry type entrytype change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues looks good so far please add a changelog entryregarding the fields you can look up in the biblatex documentation the next time please do not enter the issue number in the title of the pr because github cant link it then if you write closes xxxx or xxx then the issue will be automatically closed when the pr is merged which biblatex styles support dataset biblatex bath does https ctanorg pkg biblatex bath
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,fix default group color now groups have a dark gray instead of white as their default color because github does not support autolinking there change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues
1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,add x primary selection clipboard support _related to issue jabref and the x window clipboard selections _i have been testing different alternatives and i think that this is the best choice for using xclipboard a new dependency is needed and it does not give any added value all contents that jabref sends to the system clipboard will be available in the x primary clipboard too ie copyversiontoclipboard in the about dialog so it is possible to paste it in a text editor doing click in the middle third mouse button copy_version it is necessary to call the install method in every text field where you want to use it for the moment it is activated in the globalsearchbar therefore you can try it write something select a piece of text and do click in the middle button global_search now clipboardmanager uses the singleton pattern it is instantiated once in globalsjava any feedback will be more than welcome d change in changelogmd described manually tested changed features in running jabref helpjabreforg https githubcom jabref helpjabreforg issues thank you on working on this no linux at hand currentlythe primary and secondary buffers are completely separate buffers so the test case is open jabref add a new entry have the entry editor opened showing the author and title field select milton {abramowitz} and irene a {stegun} here in this issue and press ctrl c to copy that text to the primary buffer select handbook of mathematical functions with formulas graphs and mathematical tables with the mouse to not press any keyboard shortcut switch to jabref maybe using alt tab go to the title field press the middle mouse key check expectation handbook of mathematical functions with formulas graphs and mathematical tables is pasted go to the author field press ctrl v expectation milton {abramowitz} and irene a {stegun} appears davidemdot could you check if it works like that gregoa this is the expected behavior if i remember the linux desktop correctly i checked which seems a good short resource on that i see at that firefox pastes the secondary clipboard at ctrl v if text was selected in firefoxshort summary for x clipboards longer text good introd pargraphs i learned there is clipboard typically ctrl c v and primary mouse text highlight source for the bibtex example koppor after last commit which activates the primary clipboard for all textfield textarea controls in the entry editor your test case works exactly as you said gregoa nomicrosoftbuhtz could you test if it meets your expectations find the build at http buildsjabreforg issue
1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,fix a bug that threw a npe when using middle mouse click on windows hotfix for solving code looked good since its a hotfix i just merged

Util,Network,i18n,Test,IO,corpus
1.0,0.0,0.0,0.0,1.0,as requested by samuelgruetter in
1.0,0.0,0.0,1.0,1.0,hi this pr implemented the rest overloads of timeout operator please take a look thanks
1.0,0.0,0.0,0.0,1.0,issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version
1.0,0.0,0.0,0.0,1.0,issue sample will terminate if either the source or the sampler terminates or throws an error the sampler now emits values only in its onnext method therefore if the sampler completes and there is a sampled value available valuetaken false it wont emit the value before terminating
1.0,0.0,0.0,0.0,1.0,issue straightforward version of the regular count however i would have implemented it differently so the constant boxing unboxing could be avoided
1.0,0.0,0.0,0.0,1.0,rebased version without the drain scheduler variant fixes issue mentioned in as well
1.0,0.0,0.0,0.0,1.0,listed in
1.0,0.0,0.0,0.0,1.0,nstructing a compositeexception
1.0,0.0,0.0,0.0,1.0,also adds a unit test for regressionit appears there is a potential race condition if something adds to removes from the pq while its _inside_ the poll operation which is where the exceptions in seem to have actually come from therefore the initial null check didnt really address the original problem the test here seems to reliably recreate those conditionsi considered using a priorityblockingqueue instead of synchronized but since the isempty and poll calls should not allow something to interleave between them and access the queue a synchronized block seemed wiser here
1.0,0.0,0.0,1.0,1.0,as per discussion in
1.0,0.0,0.0,0.0,1.0,squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon observeon observeon observeon observeon observeon observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
1.0,0.0,1.0,1.0,1.0,this pr modifies the subject class to host the union of the state peeking methods of the various subject implementations and fixes the inconsistent behavior of replaysubjectgetvalues t the changes enable the serializedsubject to relay such state peeking method calls into the wrapped subject and allows future subject wrappers to do the same
1.0,0.0,0.0,1.0,1.0,closes
1.0,0.0,0.0,1.0,1.0,closes closes closes whoa issues at a time
1.0,0.0,0.0,0.0,1.0,add withlatestfrom operator version that can take to n other sources and combine them with the main sourcerelated
1.0,0.0,0.0,0.0,1.0,see
1.0,0.0,0.0,0.0,1.0,this pr rephrases the cache documentation a bit and adds workaround for stopping and forgetting the cached valuesrelated
1.0,0.0,0.0,0.0,1.0,as discussed in with akarnokd
1.0,0.0,0.0,1.0,1.0,closes although doesnt address the name of the class
1.0,0.0,0.0,1.0,1.0,closes closes
1.0,0.0,0.0,0.0,1.0,completable already used doondispose however i renamed the arguments to match observable and single
1.0,0.0,0.0,1.0,1.0,this will elementatorerror on an empty source just leaves the new single hanging without signalling onerror elementat on an empty source just leaves the maybe hanging without signalling oncomplete i also noticed that elementat with a default value on an empty source did not work either
1.0,0.0,0.0,1.0,1.0,this is the implementation of
1.0,0.0,0.0,0.0,1.0,uses the same test as the observable one
1.0,0.0,0.0,1.0,1.0,flowablegenerate and observablegenerate lacked the safeguards that were present in x this adds those and adds extra state cleanuprelated
1.0,0.0,0.0,1.0,1.0,this pr fixes the double termination of singletakeuntil publisher when the other fires an item and then completes while ignoring the cancellation in between trying to signal a cancellationexception again which is routed to the rxjavapluginsonerror and crashing on androidin addition the maybetakeuntil received a unit test verifying this doesnt also happen to itrelated
1.0,0.0,1.0,1.0,1.0,this pr adds the sequentialdelayerror operator to parallelflowable that allows awaiting all rails in a parallel flow to terminate normally or with the composite exception of the failed rail s to enable this the flowableparallel operators behavior regarding rail cancellation had to be changed in v if any of the rails cancelled maybe due to a failure maybe due to an end consumer cancelling the entire parallel flow the input flowable was cancelled this pr alters this by requiring all rails to cancel before cancelling the input flowable the change permits one or multiple rails to fail and let others progress in case the new sequentialdelayerror is applied as a terminal operator the original sequential operator still cancels all rails if one of them fails triggering the cancellation of the input flowable note that this change may still drop and never process elements in the internal queues of the operators in the parallel flow because the parallel processing is not implemented with work stealing that could pick up elements from a dead queue in order to get as many elements processed as possible it is recommended to reduce the default prefetch on the runon operator to a reasonable tradeoff value between throughput and fault tolerance edit updated the pr to make sure parallel ignores cancelled rails when it dispatches itemsrelated
1.0,0.0,0.0,0.0,1.0,adjust the repeatwhen and retrywhen signatures to accept publisher on single and completable matching flowable s signaturereported in
1.0,0.0,0.0,0.0,1.0,this pr adds the singleunsubscribeon operatorrelated
1.0,0.0,0.0,1.0,1.0,the pr fixes both the time maxsize bound buffer operators of flowable and observable the logic didnt properly mutually exclude the timer action and the onnext action resulting in probabilistic emission of the same buffer twicereported in
1.0,0.0,1.0,1.0,1.0,much like i discovered when trying to fake a slow flaky backend that singledelay doesnt delay errorsthis pr adds an overload that does bringing singledelay in line with observabledelay it also corrects the javadoc for existing overloads only updated
1.0,0.0,0.0,1.0,1.0,this pr should fix the bug that caused the test failure in the bug manifested itself when a cancellation was happening the same time a request was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the onnext s get check and decrementandget this decrementandget decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent offer which saves the current array of registered subscriber s then would emit an item and overflow the subscriber the fix is to use the cancellation aware backpressurehelperproducedcancel utilityunit test were added to verify the correct behavior on both publishprocessor and behaviorprocessor the latter uses different cancellation mechanism via a dedicated field
1.0,0.0,0.0,1.0,1.0,there was a test class named observablefromcompletabletest which actually was targeting observablefromcallabletest this was most likely just a naming issue copied all tests from observablefromcompletabletest to observablefromcallabletest and deleted the former class
0.0,0.0,0.0,0.0,1.0,signed off by shaishavgandhi
1.0,0.0,0.0,1.0,1.0,the observableswitchmap had bad logic in its main onerror handler which didnt dispose the current inner observable the flowable version didnt have this logic error both variants received an unit test to verify the correct behavior
1.0,0.0,0.0,1.0,1.0,this pr adds the flowableswitchmapcompletable and flowableswitchmapcompletabledelayerror operators as requested by the associated new marbles are switchmapcompletable https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletablefpng switchmapcompletabledelayerror https rawgithubcom wiki reactivex rxjava images rx operators switchmapcompletabledelayerrorfpng
1.0,0.0,0.0,1.0,1.0,this pr adds flowable operators that allow switching between a mapped sequence of maybe s or single s with or without delaying their errors switchmapmaybe switchmapmaybedelayerror switchmapsingle switchmapsingledelayerror they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in
1.0,0.0,0.0,1.0,1.0,this pr ports the various switchmapx and concatmapx operators from and to observable concatmapcompletable replaced by the common implementation concatmapcompletabledelayerror concatmapmaybe concatmapmaybedelayerror concatmapsingle concatmapsingledelayerror switchmapcompletable switchmapcompletabledelayerror switchmapmaybe switchmapmaybedelayerror switchmapsingle dedicated implementation switchmapsingledelayerror dedicated implementation this pr concludes the requested set of operators in marbles will be updated adjusted in a separate pr
1.0,0.0,0.0,1.0,1.0,this pr fixes the upstream handling in flowablewindow publisher and flowablewindow callable operators to make sure if both the main output and the inner windows have been cancelled the upstream is also cancelledrelated in addition the jacoco code coverage has been updated to mainly due to the automatic filtering of difficult to impossible code paths https githubcom jacoco jacoco releases tag v
1.0,0.0,0.0,1.0,1.0,this pr fixes the accidental logical mistake in the cancel dispose logic of the new concatmapsingle and concatmapmaybe operators of both flowable and observable where the internal queue cleanup should happen in a serialized fashion only which is the state when the work in progress counter changes from to ensured by a check
1.0,0.0,0.0,0.0,1.0,this pr adds the following marble diagrams to completable operators amb ambarray complete image concatarray concat image defer image error image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorfpng
1.0,0.0,0.0,0.0,1.0,here are operators for amb and ambarray from marble for amb amb for ambarray ambarray https rawentcom umfsimke rxjava images images ambarraypng
1.0,0.0,0.0,0.0,1.0,fix the marble diagram of the event mapping maybeflatmap operator in
1.0,0.0,0.0,0.0,1.0,configuring keep alive through system propertyresolves
1.0,0.0,1.0,1.0,1.0,this pr fixes the case when an observer subscriber disposes cancels immediately upon subscribing to a refcount operator before it establishes the connection and ends up with a disposed but non reset connection preventing further interactions with the connectable sourcethe fix is to detect this case and reset the connection when the connect method signals the dispose handlerboth connectableflowablerefcount and connectableflowablerefcount is affectedfixes
1.0,0.0,0.0,0.0,1.0,add before image elements in javadocresolves
1.0,0.0,0.0,1.0,1.0,
1.0,0.0,0.0,0.0,1.0,updating the version tag on schedulersfrom executor boolean since it was promoted
1.0,0.0,1.0,1.0,1.0,this pr removes kinds of operators that had no noticeable use bases or use cases on their own in the past years buffer supplier supplier window supplier int onexceptionresumenext resolves
1.0,0.0,1.0,1.0,1.0,this commit updates the unit tests of the following operators flowable maybe observable disposable observer parallel processors schedulersand rxjava pluginrelated
1.0,0.0,1.0,1.0,1.0,this commit updates the unit tests for internaloperatorobservable related
1.0,0.0,0.0,1.0,1.0,fix many operators to emit the collected exception in case of a cancel dispose call to the plugin error handler ie becoming undeliverable excptions in addition the terminal event error delivery has been unified in many other operators so that the terminal indicator exception is never leakedthere will be a separate pr about cleaning up the addthrowable usage cases fixes
1.0,0.0,0.0,1.0,1.0,change the code in the schedulerpoolfactory to use systemgetproperty directly also fix property names to rx as now both v and v could run together
1.0,0.0,0.0,1.0,1.0,make offer throw a nullpointerexception immediately instead of turning it into an error signal in addition have multicastprocessoroffer throw an illegalstateexception if called when the processor is in fusion mode
1.0,0.0,0.0,1.0,1.0,this pr adds the missing completableonerrorresumewith present in the rest of the base classesalso marbles for maybeonerrorresumenext and maybeonerrorresumewith have been updatedrelated https rawgithubcom wiki reactivex rxjava images rx operators completableonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumenextpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorresumewithpng
1.0,0.0,1.0,1.0,1.0,add the following operator aliases maybeconcatmapcompletable maybeconcatmapsingle singleconcatmapcompletable singleconcatmap singleconcatmapmaybe related addition some missing or wrong maybe marbles have been image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatmappng image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapcompletable png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingle png image https rawgithubcom wiki reactivex rxjava images rx operators maybeflatmapsingleelementpng
1.0,0.0,0.0,1.0,1.0,the operators were already available elsewhererelated addition the maybe variants have received updated marbles as well image
1.0,0.0,0.0,1.0,1.0,dropped the old maybeflatmapsingle and replaced it with maybeflatmapsingleelement
1.0,0.0,0.0,1.0,1.0,reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at all while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function the same combiner variant for maybe received a marble diagram too image
1.0,0.0,0.0,0.0,1.0,flowable observable maybe and single now have a concateagerdelayerror delegating to the appropriate concatmapeagerdelayerror operatorin addition maybe and single received an overload concateager iterable int to expose the maxconcurrency option already present in the rest of the typesnote that completableconcateagerdelayerror is essentially the same as mergedelayerror because there are no items to keep emitting in order the flowable and observable variant of concateager also received fresh marble diagrams related flowable observable image maybe image single image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerpnpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorinpng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singleconcateagerdelayerrorpnpng
1.0,0.0,0.0,1.0,1.0,just a backport to x of the fix for the scalar queue max concurrency issue already for x in the code for the fix has been added and also the test for itin addition as was also done for the corresponding test for flowableflatmap has been added
1.0,0.0,1.0,1.0,1.0,adds the new system property rx schedulerdrift tolerance unit to allow specifying a more fine grained tolerance amount

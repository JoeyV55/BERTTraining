Util,Network,i18n,Test,IO,corpus
1.0,0.0,0.0,0.0,1.0,implemented sample operation now that operationinterval is in operationsample see was kind of straightforward i also added a unit test against sampling and allowed for specifying a scheduler used by the sample operation we want methods on observable dont we sure i just completely forgot about that ill add them
1.0,0.0,0.0,0.0,1.0,implemented synchronize with lock hii implemented to support that sending a lock to the synchronize operatori also found that there was a issue that testmultithreadedwithnpe and testmultithreadedwithnpeinmiddle might fail in some special situation when onerror is invoked before any onnext the last statement assertequals busyobservermaxconcurrentthreadsget in these methods will fail i also this issue in the pull request looks good thank you
1.0,0.0,0.0,0.0,1.0,implemented the ignoreelements operator hii implemented the ignoreelements operator please take a look thanks can you rebase this with the changes to master so it can be cleanly merged again with all the other changes this no longer cleanly mergesthank you zsxwing for this and all the other pull requests i really appreciate your involvement in the project i rebased the pull request now it should be able to merge to master directly looks good
1.0,0.0,0.0,1.0,1.0,added the rest overloads of timeout operator hi this pr implemented the rest overloads of timeout operator please take a look thanks due to pull request which touched virtually every file in the project can you please rebase this so it can merge cleanly again i have rebased it thank you zsxwing
1.0,0.0,0.0,0.0,1.0,operators and then when issue issue issue can be extended to plan plan and pattern pattern if action action is available not sure about the actionn version i dont understand i used the master havent touched groupby or the schedulers the build succeeds on my machine although with jdk now whatedit i found the logical error in operationgroupbytest assuming the thread will finish if it emits items is unreliable should that assertion be tested at all just another case of the operationgroupbytest test issue has not be yet that is an impressive contribution akarnokd i dont see any problems in my review the unit tests were essential to understanding and trusting this so thank you for being thoroughim going to merge this and leverage the fact that were still pre so that if there are any issues found we can still fix them even if we need to break a signature
1.0,0.0,0.0,0.0,1.0,operators tomap and tomultimap again issue and issue tomap overloadstomultimap overloadsadded groovy test to verify overloading ah this cant merge anymore because of other commits probably the join operator on your other pr can you rebase
1.0,0.0,0.0,0.0,1.0,mergemap with iterable and resultselector overloads listed in forgot an overload looks these operators can be implemented by composing the existing operators i agree there is likely some simplification we can do on this but im going to merge as the public apis look correct and unit tests are good we can iterate on the implementation internally
1.0,0.0,1.0,1.0,1.0,replaysubject leak fix for issue i can confirm this for me thanks akarnokd this might in fact be the final nail in the coffin for any workarounds we used on android to prevent activities from leaking this is great benjchristensen do you think we could get this in for that would be fantastic it would simplify reasoning about requirements for android operators a lot since the use of cache and replay is quite common on android and some design decisions for operatorobservefromandroidcomponent were made purely due to the existence of this bug no one actually thought to question the correctness of the underlying operator back then hah
1.0,0.0,0.0,0.0,1.0,add replay and multicast variants to rxscala this pr has some breaking changes change def multicast r t subject rxlangscalasubject r subscription observable r to def multicast r t subject rxlangscalasubject r connectableobservable r change def replay subscription observable t to def replay connectableobservable t remove observableapply int so its better to merge it at the next major release cc headinthebox samuelgruetter id like someone with better scala skills that me to review this please ill code review it later today but in principle these are simple fixes to bring the other variants of publish in sync with returning connectable observable looks good is this reviewed and ready to go it is conflicting against master so can you please rebase this is also conflicting against i would like to rebase it after is merged to master waiting until is already merged rxjava pull requests successthis pull request looks good should this wait until were ready to do i think this one can be merged since has already broken the api headinthebox samuelgruetter do you mind it go for it
1.0,0.0,1.0,0.0,1.0,more consistent hooks for scheduler plugins this is a rework of deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault i think these names are confusing added rxjavaschedulershook ability to override entire schedulers from scratch ability to decorate action before submission to schedulerthe main change from is the decoration of action instead of runnable action is an improvement as all schedulers must handle these whereas not all schedulers handle runnables reviewed with benjchristensen and merging
1.0,0.0,0.0,0.0,1.0,make retrywhen the same with the scheduler as the retrywhen without the scheduler came up in
1.0,0.0,0.0,0.0,1.0,observeon throughput enhancements squashed commits of further optimizations to observeon using spscarrayqueue directly in observeon instead of ringbuffer to avoid the synchronization block split tracking structure to serial subscriptionlist and timed compositesubscription in eventloopsscheduler which improves the sequential scheduling performance because a completing tasks subscription will be most likely the first item in the underlying linkedlistbenchmark i window x java u x s warmup x s iteration benchmark size x x error this pr this errorobserveon observeon ++observeon ++observeon ++observeon ++observeon ++observeon ++observeon observeon observeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon subscribeon notes at size the throughput varies in a + range on each run and since the changes dont touch the scalar optimization there is no real improvement there at size my system reached either the cache capacity or the os schedulers time resolution so there no improvement there on at size and size the throughput doubles if i introduce some extra delay ie via sleep or some extra work the benchmark generates a lot of garbage due to boxing switching to a constant emitter increases the throughput subscribeon from to since it conflicts with anyway this is pr is to let others verify the optimizations actually work on other oses because on my windows i sometimes get significant variance in the throughput during iterations increased iteration time may be required as well
1.0,0.0,0.0,1.0,1.0,avoid swallowing errors in completable instead deliver them up to the threads uncaught exception handlerfixes reactivex rxjava what happened to completabletest akarnokd sorry ij formatted it will clean up and push again just a nit about timeout in tests otherwise removed timeouts
1.0,0.0,0.0,0.0,1.0,add terminal clarification to switchmap operators see
1.0,0.0,0.0,0.0,1.0,dooneach reduce allocations report to rxjavahooks as discussed in call rxjavahooksonerror for secondary errors reduced allocations actionsubscriber actionobserver operator onsubscribe added unit tests actionsubscriber usage and removed empty test ta
1.0,0.0,1.0,1.0,1.0,move exceptions to public area + exceptionhelper related the exceptionspropagate and exceptionsthrowiffatal are too useful to be hidden in an internal package so this pr moves them into the public ioreactivexexceptions package the terminal atomics related to throwable containers lives in the exceptionhelper enum lgtm
1.0,0.0,0.0,0.0,1.0,rename asyncemitter to emitter as per discussion in renaming asyncemitter to emitter via deprecationthere is a catch though completableemitter is correctly named now and depends on asyncemitter via the method java void setcancellation asyncemittercancellable c when can we break the api of that class thanks for review akarnokd i take it we have to wait for to break the api of experimental completableemitter deleting experimental apis has to wait one patch version so will have both and can remove the asyncemitter ok ill patch again once is outon thu sep david karnok notifications githubcom wrote deleting experimental apis has to wait one patch version so will have both and can remove the asyncemitter â€” you are receiving this because you authored the thread reply to this email directly view it on github or mute the thread cc jakewharton artem zinnatullin make the cancelable interfaces extend each other as wellon thu sep pm dave moten notifications githubcom wrote _ davidmoten_ commented on this pull request in src main java rx asyncemitterjava experimental + deprecated public interface asyncemitter extends observer { cannot extend emitter because of two versions of cancellable would break existing asyncemitter use â€” you are receiving this because you were mentioned reply to this email directly view it on github or mute the thread make the cancelable interfaces extend each other as wellgood idea um i dont think its worth it juggling with inheritance of these interfaces straight after next release im just going to delete the deprecated stuff ive added a deprecated annotation to completableemitter let me know if you guys still want the interface inheritance business forgot to move cancellable to rxfunctions thats done now thanks for working this out
1.0,0.0,1.0,1.0,1.0,switch maybe and single to use their transformers in compose whoops forgot to update the tests will update in a sec intellij user i presume indeed does i presume eclipse do something to protect against this eclipse has an error view which doesnt obscure the project structure plus when one shows the breadcrumbs they get error icons indicating theres still something wrong also the project tree gets error icons so it is much harder to miss these kinds of errors interesting ill have to check that out
1.0,0.0,0.0,1.0,1.0,add observablerangelong & flowablerangelong will adds observablerangelong adds flowablerangelong both implementations are copied same for the unit testswhat should we do about the range overflow check we could use bigdecimal to check that
1.0,1.0,1.0,1.0,1.0,fix flowableconcatmapeager hang due to bad request management flowableconcatmapeager s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the looprelated in addition testhelperasserterror has been changed to attach the whole unexpected exception to the assertionerror
1.0,0.0,0.0,1.0,1.0,enable testscheduler with osecond periodic scheduling the default periodic scheduling code accessed the current worker time as milliseconds which prevents running microsecond and osecond scale unit tests with testscheduler as its internal osecond resolution time is always converted losing precisionthis pr introduces the internal scheduleperiodichelper class moves the default scheduling code into a static method and defines a now osupplier interface that is now implemented by testschedulerworker to return the current o time the default workerscheduleperiodically delegates to this static method and given a null no osupplier the workernow is converted to oseconds as usualrelated
1.0,0.0,0.0,1.0,1.0,fix timer ise due to bad resource mgmt both observabletimer and flowabletimer could report illegalstateexception because if the delayed task completed before the tasks disposable was set the setonce found a non null non terminal reference already setrelated
1.0,0.0,1.0,1.0,1.0,fix observablecombinelatest to dispose eagerly this pr fixes observablecombinelatest to dispose the sources outside the serialization loop just like flowablecombinelatest does this allows cancellation even if the serialization loop is busy blocking inside an onnext emissionin addition a unit test was added to flowablecombinelatest as wellreported in merging
1.0,0.0,0.0,1.0,1.0,increase timeout on parallel & completable tests this pr increases the timeout on completabletest test methods and on parallelflowabletestparallelismandprefetchasync related merging
1.0,0.0,1.0,0.0,1.0,apply promotions for v this pr applies the promotions listed in suggested review strategy check if the experimental annotation has been removed or turned into beta check if the history x matches the original value of the updated since x merging
1.0,0.0,0.0,0.0,1.0,flowabletimeouttimed replace atomicreference with mutable field as per discussion in the timer fields in the subscriber classes in flowabletimeouttimed are atomicreference s but this is not required as the fields are accessed synchronouslythe timer field in timeouttimedothersubscriber did require an atomicreference because of the dispose call here but this call is not required if we just call workerdispose no unit test additionsps unit tests in rxjava x an outrageous amount of work thanks akarnokd and other contributors merging
1.0,0.0,0.0,0.0,1.0,add concatmapcompletable to observable add concatmapcompletable to observable as discussed in i didnt think it made sense in other reactive typescode is mostly a copy of observableconcatmap let me know if there is a better style of code to base this off instead it also does not have the option to delay errors as concatmap does not sure if that is needed merging
1.0,0.0,0.0,1.0,1.0,fix publishprocessor cancel emission overflow bug this pr should fix the bug that caused the test failure in the bug manifested itself when a cancellation was happening the same time a request was being fulfilled since the same request accounting was used for cancellation indicator if the cancel happened between the onnext s get check and decrementandget this decrementandget decremented longmin_value unconditionally which lead to a state that would appear the subscriber still can receive events a concurrent offer which saves the current array of registered subscriber s then would emit an item and overflow the subscriber the fix is to use the cancellation aware backpressurehelperproducedcancel utilityunit test were added to verify the correct behavior on both publishprocessor and behaviorprocessor the latter uses different cancellation mechanism via a dedicated field merging
1.0,0.0,0.0,1.0,1.0,moved tests to fromcallabletest from fromcompletabletest there was a test class named observablefromcompletabletest which actually was targeting observablefromcallabletest this was most likely just a naming issue copied all tests from observablefromcompletabletest to observablefromcallabletest and deleted the former class merging
1.0,0.0,1.0,0.0,1.0,document replay n emission retention caveat adds javadocs indicating a caveat regarding size bounded replay operators subjects and processors see for details merging
1.0,0.0,0.0,1.0,1.0,add flowableswitchmap{maybesingle}{delayerror} operators this pr adds flowable operators that allow switching between a mapped sequence of maybe s or single s with or without delaying their errors switchmapmaybe switchmapmaybedelayerror switchmapsingle switchmapsingledelayerror they are in the same pr as the single variants implementation is practically the maybe implementation minus the oncomplete casetheir marbles will be updated in a separate proriginally requested in merging
1.0,0.0,0.0,0.0,1.0,fix buffer documentation to correctly describe onerror behaviour i just copied the sentence from the docs in x and updated to use observablesource publisher naming merging
1.0,0.0,0.0,1.0,1.0,fix flowablesingleorerror toflowable not signalling nosuchelementexception when a singleorerror is followed toflowable the assembly process switches the flowable single operator into a flowable flowable operator implementing the singleorerror behavior saving the back and forth type conversion the backing implementation was shared with singleelement and as such did not properly handle the orerror case for an empty source the pr fixes the lack of nosuchelementexception in this case the observable variant doesnt have such optimization but the test has been converted to make sure observable is verified for this aspect in case the optimization is implemented with it in the future merging
1.0,0.0,0.0,0.0,1.0,update singleflatmappublisher marble renamed the operator in the box for flatmappublisher https rawgithubcom wiki reactivex rxjava images rx operators singleflatmappublisherpng
1.0,0.0,0.0,1.0,1.0,singleflatmappublisher full implementation see discussion in resolves merging
1.0,0.0,0.0,0.0,1.0,made subscribeactual protected proposalchanged subscribeactual from public to protected as described in how i testedran tests locally please let me know if i missed part of the contributing guidelines ðÿ‘¼ fixes cc vanniktech artem zinnatullin davidmoten strictly speaking this is technically a breaking change on something that shouldnt be in use at all by external developers im fine with this change for merging
1.0,0.0,0.0,0.0,1.0,add maybe marble diagrams a resolved the following diagrams of amb missing diagram ambarray missing diagram image concat iterable missing diagram image concat publisher missing diagram image concat publisher int missing diagram image concatarray missing diagram image concatarraydelayerror indicate error delayed marble per source image concatarrayeager missing diagram image concatdelayerror iterable missing diagram image concatdelayerror publisher missing diagram image concateager iterable missing diagram image concateager publisher missing diagram image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcateagerppng merging
1.0,0.0,0.0,0.0,1.0,add marble diagram for singlehide operator this should complete hide operator in please let me know if i need to change anything on the diagram itself if not please send me url when you upload image within the project so i can change url for the marble in the pralthough i wasnt sure if i should represent somehow that disposable is hidden as well if so can you please tell me how to represent that on marble merging
1.0,0.0,0.0,0.0,1.0,add completable marble diagrams a this pr adds the following marble diagrams to completable operators amb ambarray complete image concatarray concat image defer image error image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators completableerrorfpng merging
1.0,0.0,0.0,0.0,1.0,single error operators marbles here are marbles for for error callable errorcallable error throwable only added error event to be red errorthrowable onerrorreturn onerrorreturn onerrorreturnitem onerrorreturnitem onerrorresumenext singlesource onerrorresumenext onerrorresumenext function onerrorresumenextfn https rawentcom umfsimke rxjava images images onerrorresumenextwithfnpng for the onerrorx please indicate the normal case via different marble ie the usual split diagram btw you can save yourself a commit if you follow the following naming in the javadocs xxxx is the name of the operator such as error and may contain argument indicator letters s is for scheduler s or single t is for timed n is for some numerical value f is for function or flowable c is for callable or completable p is for publisher m is for maybe or some other numerical valuethus the image naming of this pr will look like this merging
1.0,0.0,0.0,0.0,1.0,add marbles for singlefrom operators here are marbles for fromcallable frompublisher and fromobservable operators from marble for fromcallable fromcallable for frompublisher frompublisher for fromobservable fromobservable https rawentcom umfsimke rxjava images images fromobservablepng merging
1.0,0.0,0.0,0.0,1.0,several more completable marbles b this pr adds a couple of more marble diagrams to completable subscribeon unsubscribeon image tosingle tosingledefault image toflowable image tomaybe image https rawgithubcom wiki reactivex rxjava images rx operators completabletomaybepng merging
1.0,0.0,1.0,1.0,1.0,fix refcount eager disconnect not resetting the connection this pr fixes the case when an observer subscriber disposes cancels immediately upon subscribing to a refcount operator before it establishes the connection and ends up with a disposed but non reset connection preventing further interactions with the connectable sourcethe fix is to detect this case and reset the connection when the connect method signals the dispose handlerboth connectableflowablerefcount and connectableflowablerefcount is affectedfixes merging
1.0,0.0,0.0,0.0,1.0,javadoc explain explicitly about using emitter interface methods synchronously add note in javadoc explicitly explaining about using emitter interface methods synchronously add notes for generate methods in observable and flowable plus add the similar note to emitter interfaceresolves merging
1.0,0.0,0.0,0.0,1.0,adding nonnull annotations to observable & single adding nonnull annotations in factory methods for improved code compilationresolves akarnokd can you pls take a look at this and review thanks for contributing a few points you dont have to keep the welcome text of the pr thats for telling contributors what to do see the updated text for future reference didnt you mean to add nonnull to the arguments rather than to the return value merging
1.0,0.0,0.0,1.0,1.0,add interruptible mode to schedulersfrom by default the schedulersfrom uses a trampoline to ensure worker tasks are executed fifo and non overlappingly on any potentially multi threaded executor this old setup didnt allow task interruption due to this disconnect between the trampoline task and the operator task in contrast the standard schedulers use single threaded executors and their future is linked and interruptible when the operator task is cancelled this pr add an interruptible mode to the schedulersfrom via a paramerer in a new overload and some internal dispatching based on this mode selector existing schedulersfrom executor users should still behave the sameresolves merging
1.0,0.0,0.0,0.0,1.0,expand observabledebounce and flowabledebounce javadoc mention that if the processing of a task takes too longand a newer item arrives then the previous task willget disposed interrupting a long running workfixes merging
1.0,0.0,0.0,1.0,1.0,create a base test class and have all unit tests extend it this commit creates the rxjavatest class defining a defaulttimeout to minutes an ignored test announce itself for eachrunning class extending it preventing travis ci from killing thebuildhave completable tests extend from rxjavatest have disposable tests extend from rxjavatest have exception tests extend from rxjavatest related merging
1.0,0.0,1.0,1.0,1.0,have internaloperatorobservable unit tests extends rxjavatest this commit updates the unit tests for internaloperatorobservable related merging
1.0,0.0,0.0,1.0,1.0,avoid using systemgetproperties due to security restrictions change the code in the schedulerpoolfactory to use systemgetproperty directly also fix property names to rx as now both v and v could run together merging
1.0,0.0,0.0,0.0,1.0,add missing marble diagams to single add hopefully all remaining missing marble diagrams to single https rawgithubcom wiki reactivex rxjava images rx operators singleconcatarrayeagerpng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerroripng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerrorppng image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singlemergedelayerror png image https rawgithubcom wiki reactivex rxjava images rx operators singleunsafecreatepng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingpng image https rawgithubcom wiki reactivex rxjava images rx operators singleusingbpng image https rawgithubcom wiki reactivex rxjava images rx operators singlewrappng image https rawgithubcom wiki reactivex rxjava images rx operators singlecachepng image https rawgithubcom wiki reactivex rxjava images rx operators singlecastpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptiontspng image https rawgithubcom wiki reactivex rxjava images rx operators singledooneventpng image https rawgithubcom wiki reactivex rxjava images rx operators singleblockinggetpng image https rawgithubcom wiki reactivex rxjava images rx operators singleliftpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainsfpng image https rawgithubcom wiki reactivex rxjava images rx operators singlecontainspng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorresumewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonterminatedetachpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrypng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryf png image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretryfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrynfpng image https rawgithubcom wiki reactivex rxjava images rx operators singleretrywhenpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribepng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribecpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribeccpng image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribec png image https rawgithubcom wiki reactivex rxjava images rx operators singlesubscribewithpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilcpng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilspng image https rawgithubcom wiki reactivex rxjava images rx operators singletakeuntilppng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutspng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutbpng image https rawgithubcom wiki reactivex rxjava images rx operators singletimeoutsbpng image https rawgithubcom wiki reactivex rxjava images rx operators singleunsubscribeonpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestpng image https rawgithubcom wiki reactivex rxjava images rx operators singletestbpng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionppng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionopng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptionspng image https rawgithubcom wiki reactivex rxjava images rx operators singledelaysubscriptioncpng image https rawgithubcom wiki reactivex rxjava images rx operators singledematerializepng merging
1.0,0.0,0.0,1.0,1.0,fix multicastprocessor not requesting more after limit is reached after reaching the prefetch limit the updated consumed counter was not written back so the processor stopped requesting more consumed limit merging
1.0,0.0,0.0,0.0,1.0,fix self see references some comments some see should point to the other party plain delayerror add a few see to the nearby operators comments no longer apply in blockingxmostrecent source code add a comment from to actiondisposable replaces
1.0,1.0,1.0,1.0,1.0,java add blockingstream & flatmapstream to flowable add java interoperation methods to flowable blockingstream essentially blockingiterable with close support concatmapstream map and concatenate streams flatmapstream map and concatenate streams inherently same as concatmapstream related marbles https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators blockingstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators concatmapstreamfipng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfpng image https rawgithubcom wiki reactivex rxjava images rx operators flatmapstreamfipng merging
1.0,0.0,0.0,0.0,1.0,deleted functionsnaturalorder removes a duplication of the natural order comparator merging
1.0,0.0,0.0,1.0,1.0,remove a pointless observableconcatmapiterable overload remove the concatmapiterable function int overload as there is no buffering involved with the operator
0.0,0.0,0.0,1.0,0.0,enable javac parameter saving in class files related merging
1.0,0.0,1.0,0.0,1.0,wiki improve operator matrix with links and notes update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another class operators are missing and will be added as part of merging
1.0,0.0,1.0,0.0,1.0,wiki improve operator matrix with links and notes update the operatormatrixgenerator to add anchors and links to notes about why operators are not present in one or another class operators are missing and will be added as part of merging
1.0,0.0,0.0,0.0,1.0,add onerrorcomplete to flowable observable and single add the onerrorcomplete and onerrorcomplete predicate operators to the remaining base classesalso created the missing marble for maybeonerrorcomplete + related https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators flowableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators observableonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators singleonerrorcompletefpng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletepng image https rawgithubcom wiki reactivex rxjava images rx operators maybeonerrorcompletefpng merging
1.0,0.0,1.0,1.0,1.0,add many fromx operators + marbles add a cross section of from operators present fromaction fromsingle operator f o m s c fromaction present notes present namefromcompletable fromcompletable present notes absent notes frommaybe present notes present namefromobservable fromobservable present notes present namefrompublisher frompublisher present namefromrunnable fromrunnable present notes present namefromsingle fromsingle present notes present https rawgithubcom wiki reactivex rxjava images rx operators flowablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablebufferpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablelatestpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservabledroppng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservableerrorpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromobservablemissingpng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators flowablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromactionpng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromcompletablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromrunnablepng image https rawgithubcom wiki reactivex rxjava images rx operators observablefromsinglepng image https rawgithubcom wiki reactivex rxjava images rx operators maybefrompublisherpng image https rawgithubcom wiki reactivex rxjava images rx operators maybefromobservablepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybepng image https rawgithubcom wiki reactivex rxjava images rx operators singlefrommaybevpng merging
1.0,0.0,1.0,1.0,1.0,add various concatxdelayerror operators add the following concat kind of operators maybeconcatarrayeagerdelayerror maybeconcatdelayerror publisher int singleconcatarraydelayerror singleconcatarrayeagerdelayerror singleconcatdelayerror + completableconcatarraydelayerror completableconcatdelayerror + related addition the maybeconcatdelayerror publisher marble has been image https rawgithubcom wiki reactivex rxjava images rx operators maybeconcatdelayerror ipng merging
1.0,0.0,0.0,1.0,1.0,reenable xflatmaptestmaybesingle add missing single operators reenable the xflatmaptestmaybesingle and make sure all flatmap variants behave the same when the flow is cancelled disposed while the mapper function is executing thus the returned inner source doesnt get subscribed to at all while adding the extra tests i noticed two flatmap variant is missing from single a combiner of the original and inner success item flatmap function bifunction a notification type mapper flatmap function function the same combiner variant for maybe received a marble diagram too image merging
1.0,0.0,1.0,1.0,1.0,allow setting the drift tolerance timeunit via system property adds the new system property rx schedulerdrift tolerance unit to allow specifying a more fine grained tolerance amount merging

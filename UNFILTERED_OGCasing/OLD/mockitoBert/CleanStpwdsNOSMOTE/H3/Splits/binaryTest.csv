Util,Network,Interpreter,i18n,Logic,Test,IO,Security,corpus
1,0,0,1,1,1,0,0,make propertyandsetterinjection field sorting consistent is caused by calling collectionssort with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type iterable integer number it gives iterable integer and iterable number but also an inconsistent integer at least one commit message in the pr contains fixes idand suggest a template commit message clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix upsthanks for the feedback everything else seemed specific enough that a review was the only way to pick it up josephw ok thanks for the feedback too
1,0,0,0,1,1,0,0,argumentcaptorforclass is more friendly with generic types we modify the signature of argumentcaptorfromclass class to better express the type relationship between the argument and the return type there is no change to the behavior of the method this change is to allow expressions such as javaargumentcaptor captor argumentcaptorfromclass consumerclass to type check which is desirable as a convenience to users of argumentcaptor we also add two tests to document this extension to the api both of which fail to compile without this change to argumentcaptorfromclass these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile time properties of argumentcaptor not its behavior almost perfect pr maybe the contributing guide is missing something here but the exemple id should have been expended to the real gh issue number actually the commit message should be something like tweak generic signature of argumentcaptorfromclass ill merge it asap thanks for the pr by the way i updated the contributing guide with an exemple if youre unsure how to rename the commit bashgit commit amendgit push force the travis build is broken in some way your code is fine thanks for the change
1,1,0,1,1,1,1,0,constructor invoking methods raise npe in some recent version of mockito spy annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls unconfirmed at this point this pr aims to fix that by calling real code if interceptor is not set which can only happen if constructorinstanciator is usedthanks to raphw for his tip on this regard as well https githubcom raphw byte buddy issues issuecomment i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input valuesi added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor might be unsuitable for spies i think i also found a better alternative for thati just send you a pull request on monday yes for constructors that made sense when spy is instantiated with constructor though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there
0,0,0,0,1,1,0,0,implement verificationcollector which can collect multiple verifications it will report in the end the result of multiple statements
0,0,0,1,1,1,1,0,vararg method call on mock object fails andreyrmg can you add your test too oh yes of course im sorry but only tomorrow added test for adding unit testscan you also add your defaultanswerdemo test case to the usage tests package orgmockitousagestubbing name proposal stubbingwithdelegatevarargstest sorry for delay i added usage test case and squash commits into oneand there is need to extend from testbase for calling help method orgmockitoutiltestbaseinvocationof javalangclass javalangstring javalangobject lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix
1,1,0,0,1,1,0,0,inorder timeouts fixes issue updated code provided by in pr closes could you please add tests to make sure the code is correctly behavingalso you have some unrelated changes mostly imports reordering please remove those as well i should have some time to work on the code changes this weekend timvdlippe there was already a test there i just removed the ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful jazzepi sounds great the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good jazzepi could you rebase this pr and commit your changes i would like to merge this sooner rather than later timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself lgtm
0,0,0,1,0,1,1,0,add parameter elementtype to mock todo add a regression test to also show how this functionality can be used cc smoyer
0,0,0,1,1,1,0,0,deprecate whitebox and corresponding verboserunner and junitfailurehaâ€¦ a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit as part of therefore the intent is to deprecate these classes and remove them in mockito by private methods rebased and updated pull request with feedback ptal indeed the timeout test is picky especially with openjdk i restarted the job times verbose runner and console spamming runner are now both deprecated lets kill them in
1,0,0,0,1,1,0,0,refactored allinvocationsfinder and verifiableinvocationsfinder to static utility classes pascalschumacher these classes have only one public method they can be merged into verificationfinder findverified findall what do you think christianschwarz sure
1,0,0,0,1,0,0,0,missing generics info on collection matchers follow up on issue following this comment it tweaks the collection matchers with generic support it should have bee in abf
1,0,0,1,1,1,0,0,refactored supertypeslastsorter to a static utility class refactored supertypeslastsorter to a static utility classrelates to
1,0,0,0,1,0,0,0,inlined arrayutilsisempty in argumentsprocessor inlined arrayutilsisempty in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty was renamed to isnullorempty for clarityrelates to
1,0,0,0,1,1,0,0,improved the public api of mockingdetails highlights started exposing full mock creation information instead of just type to mock and extra interfaces changed public api but only for methods that were introduced in x so it is _not_ backwards incompatible change as far as is concerned if no other feedback if youre happy with change merge yourself i needed to merge because it was blocking me i can address bric comment later if such is the decision szczepiq nope your feedback works for me as well
1,1,0,1,1,1,1,0,stylesheet tweaks for openjdk aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk will render javadoc the same way as openjdk unfortunately this is not the same the javadoc rendering of openjdk is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus bonus i changed the and in the javadoc this way we have aligned version numbers
1,0,0,0,0,1,0,0,new opt in stubbing strictness implemented in junit rules new api for rationale see for code review history see java existing api rule public mockitorule mockito mockitojunitrule proposed improvements rule strictness strictnesslenient rule strictness strictnesswarn is the defaultrule strictness strictnessstrict_stubs mockito default what strict stubbing means improved debuggability the test fails early when code under test invokes stubbed method with different arguments cleaner tests without unnecessary stubbings the test fails when there are any unused stubs declared cleaner more dry tests dont repeat yourself if you use mockitoverifynomoreinteractions you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out szczepans article on linkedin https wwwlinkedincom pulse curious how get even cleaner tests new mockito features faber with interactive rebase you can squash commits away or use git reset soft head to reset the last commits
1,0,0,1,1,1,1,0,returnsargat to handle returning vararg as arrays attempt at fixing basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet
1,1,0,0,1,1,0,0,clarify documentation for consecutive stubbing as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn statements and using multiple when thenreturn statements when someone attempts to perform consecutive stubbingi added a warning clarification in the documentation with a corresponding example so that its more clear especially for new users of mockito
1,1,0,1,1,1,1,0,fix to get correct stubbing location with inline mocking fix stacktracefilter to support inline mocking add one test to stacktracefiltertest add stubbinglocationtest into inline subprojectthis pr merging
1,1,0,1,1,1,1,0,break cyclical compile time dependency on hiderecursivecall no coverage uploaded for pull request base release x a click here to learn what that means thanks for your quick reviews raphw
1,0,0,0,1,1,0,0,verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions verifyzerointeractions no longer delegates to verifynomoreinteractions instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito please let me know what to change and where to look to make it more mockitoish you can always check if you comply with the code by running gradlew build that runs the test and checks the code style merging
1,0,0,0,1,1,1,0,made it possible to delay the return of a mock or spy this is a useful aid in debugging race conditions and other synchronicity problems merging
1,1,0,1,1,1,1,0,compare method of graph to defined form of method compare against non generic method when deciding if a method should be stubbed merging
1,1,1,1,1,1,1,0,adresses allow opting out from annotation copying within mocks the mocksettings now include an option to disable copying of annotations to mock classes merging
1,1,0,1,1,1,1,0,and improved check for self invocation better checks for recursive calls and guards internally used jdk types fixes merging
0,0,0,0,1,1,0,0,update strict_stubs documentation for verifynomoreinteractions
0,0,0,0,1,1,0,0,ensure isolation of stubbings compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this can we give an example of a test that breaks with this new behavior merging
1,1,0,1,1,1,1,0,avoid bytebuddy import issue to enable repackaging without bytebuddy this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest grep r e import org\mockito\internal\creation\bytebuddy\ ^\ $ src main does not return anythingoffers workaround for merging
0,0,0,0,1,0,1,0,reduce the allocation rate for the typical use of locatâ€¦ â€¦ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot merging
1,1,0,1,1,1,1,0,support local parameters in test methods with junit jupiter note that this implementation differs from the prototype implementation of the junitteam instead it will do not do any parameter resolution between test methods merging
1,0,0,0,1,1,0,0,add stubbinglookupevent and notifier a part of this pr adds stubbinglookupevent and stubbinglookupnotifier as a part of the issue merging
1,0,0,0,1,1,1,0,exposed new api stubbinglookuplistener exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding merging
1,0,0,0,1,1,0,0,issue with leftover state when stubbing with bad throwables issue with leftover state when stubbing with bad throwables good catch merging
0,0,0,0,0,1,0,0,minimal test to repro generic issue with smart nulls created a minimal test that reproduces bug with smart nulls and generics see issue since this is a new test ill just merge it without review happy to fix change things later if someone reviews it
0,0,0,0,0,0,0,0,verifyerror when junit is in the classpath mockito will throw verifyerror during its junit detection when junit is in the classpath because the code only supports junit and laterthis change will catch this error and pretend that junit is not thereissue i would like some opinions on testing because i was not able to figure out a good way to test this i tried changing the class hierarchy of comparisonfailure using byte buddy and a custom classloader but was not able to get that to work i also thought it would be possible though heavy to use a gradle property to change the version of the junit dependency to run a test and add that to the test matrix but i dont expect that to work without other changes because mockito itself uses junit to compile and run its own tests merging
1,0,0,1,1,0,0,0,remove unnecessary loop from injectingannotationengine removes injectingannotationengine processinjectmocks method that does an unnecessary loopfixes https githubcom mockito mockito issues merging
1,1,1,1,1,1,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces a new method on mockmaker is a breaking change will give you a detailed review tomorrow that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito ie dont know what can be done and what cant its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it merging this is awesome thank you guys iâ€™ll try this api on our codebase and samples iâ€™ve provided in original issues also â€” kudos for including tests reproducing the behavior iâ€™ve described ðŸ˜‰ hi just to let you know i am using the new api already with v and for me it was breaking the strict test with following exception orgmockitoexceptionsmisusingnotamockexception argument passed to mockitomockingdetails should be a mock but is an instance of class cache$mockitomock$ at orgmockitointernalrunnersdefaultinternalrunner$ $ testfinished defaultinternalrunnerjava i had to move it to afterclass to mitigate the problem s you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api
1,1,1,1,1,1,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces a new method on mockmaker is a breaking change will give you a detailed review tomorrow that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito ie dont know what can be done and what cant its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it merging this is awesome thank you guys iâ€™ll try this api on our codebase and samples iâ€™ve provided in original issues also â€” kudos for including tests reproducing the behavior iâ€™ve described ðŸ˜‰ hi just to let you know i am using the new api already with v and for me it was breaking the strict test with following exception orgmockitoexceptionsmisusingnotamockexception argument passed to mockitomockingdetails should be a mock but is an instance of class cache$mockitomock$ at orgmockitointernalrunnersdefaultinternalrunner$ $ testfinished defaultinternalrunnerjava i had to move it to afterclass to mitigate the problem s you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api
1,1,0,1,1,1,1,0,handle terminal type var with bounds this pr aim to fix the issue described in the issue being that terminal type variable arguments were not looked up for their bounds merging
1,1,0,1,1,1,0,0,improved ide experience for junit visual comparison failure when junit mockito is used in modern ide idea eclipse we now show visual comparison failure pop up for certain mockito exceptions such as argumentsaredifferent merging as is
1,0,0,1,1,1,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests and implementation rebased on release x
1,1,0,1,1,1,0,1,configure the methodvisitor for java compatibility im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java this should merging
0,0,0,0,0,0,0,0,change implementation of exceptionfactory to explicitly test for dependent classes the original implementation of conditional opentest j support relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time it seems that this behaviour is not always exactly replicated in all environments for example in where mockito was being used in an instrumentation test that was being run on an android emulatorthe new implementation is a bit more direct in how it tests for the dependent classes the existing test cases still pass and matejdro confirmed that this his problem merging
1,1,0,1,1,1,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx merging
1,1,0,0,1,1,0,0,minor bug fixes removed typofixes added missing tag to fix javadocsupersedes and closes merging
1,1,0,0,1,1,0,0,clarify differences between timeout and after tries to improve the javadoc for timeout to differentiate it from after directly in the first sentence the root cause can be by pr unification of timeout and after api
0,0,0,0,0,1,0,0,upgraded junit jupiter we need higher version of junit jupiter to reproduce and added a test to enhance coverage merging
1,0,0,1,1,1,0,0,junit jupiter parallel issue this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it merging
1,0,0,1,1,1,1,0,revert undetected unused stubbing when matching previous stubbed call reverts mockito mockito based on feedback in merging
1,0,0,0,1,1,0,0,prepend description to assertionerror thrown in verification extended mockitoassertionerror to wrap instance of assertionerror in addition to mockitoassertionerror so that the various possible exceptions thrown for non matching arguments have description prepended to the message oh it seems like you need to run gradlew spotlessapply locally to fix the formatting issues i think you need to rebase on release x to pick up the latest changes your spotless configuration locally appears to be out of date are you running gradlew spotlessapply i can take a look on monday why it is not formatting as expected thanks tim ive rebased now hopefully should fix the formatting issue just squashed the commits merging
1,0,0,1,1,1,0,0,and improve error message when the inline mock maker cannot be used improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path merging
1,1,0,1,1,1,0,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation
0,0,0,0,0,1,0,0,make exceptions for inorderverify more standard specific adds nullinsteadofmockexception and notamockexception checks to inorderverify before checking if mocks were passed in during creation of inordersee for a description of the issueinorderverify mock now first checks if the passed argument is null and if the mock is in fact a mock and gives appropriate exception messages before checking if the passed in argument was passed during creation of inorder object and therefore giving a less specific error message code change loop checklist read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ indeed
1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself

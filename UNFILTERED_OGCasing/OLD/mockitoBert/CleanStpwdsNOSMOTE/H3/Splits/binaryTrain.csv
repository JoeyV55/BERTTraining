Util,Network,Interpreter,i18n,Logic,Test,IO,Security,corpus
0,0,0,0,1,1,1,0,fixes issue returns_deep_stubs automatically tries to create serializable mocks see issue what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type awesome thanks brice for fixing the problem new version is already out btw the release notes automation is based on the titles of the tickets in github the better the title the better the release notes ok ah yeah it makes sense i may be able to update it on the phone
1,0,0,1,1,1,1,0,deep stubbing with generic responses in the call chain is not working also i kind of like the original unit test in i propose you include it in this pr it could be name like orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest if you can amend the change ill merge the pr done not sure its exactly what you were asking for but i dont see other option at the moment the final diff looks good to me could you squash the commits in a single one in the same branch pr better for the history btw you should be able to do that this way bashgit reset soft head git commit messagefixes issue for deep stubs with mixed raw generics type i was off for few days i see szczepan did the job so theres noting left for me btw happy new yearcheers
1,0,0,1,1,1,1,0,better protection against incompatible returned value of default answer and get safely mock name fixes issue the value returned by the default answer is now validated to make sure there wont be a classcastexception if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a classcastexception when reporting a verification issue build is ok but fail on travis
0,0,0,0,1,0,0,0,blocks ability to use negative value for timeout and after method it should if user uses mockitoafter or mockitotimeout with negative values then friendly reminder exception with details will be thrown first commit fixes the issue second one is a little bit of refactoring mostly reducing visibility and increasing encapsulation refactoring removed unused field from verificationovertimeimpl and also from constructors signature improved encapsulation by removing getters from verificationovertimeimpl reduced visibility of few constructors in timeout and after classes nice pull request thank you if comments are addressed ill merge right away about timeouttest please look at it the whole point of this test is to pass timer object and do mocking verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout long pollingperiodmillis verificationmode delegate timer timer was introduced by author in first place should i really touch itbtw there in so such thing like aftertest oh yeah i see fair point just ignore what i said on thatignore the aftertest too i was a bit off this morning thanks for the feedback
1,0,0,1,1,1,1,0,argumentcaptor no longer working for varargs these commits should with capturing varargs hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it otherwise ill have to cherry pick relevant commits i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase now it should work thanks
1,0,0,0,1,1,0,0,add shouldhavezerointeractions as bdd version of verifyzerointeractions follow up to thanks mkordas
1,0,0,0,1,1,0,0,introduce bdd inorder verification follow up to
1,1,0,1,1,0,1,0,related to windows path problem was caused by file separator replacing hardcoded char by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource path method in such case is only acceptable separator do i need to do something special in order to build with java it looks like problem with default method i create branch from master dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue
1,0,0,1,1,0,0,0,a verify call example in captor javadoc thanks for the fix
0,0,0,0,0,1,0,0,cannot instantiate type with public method of a public parent class having a non public types in signature this should awaiting delivery of bytebuddy fix raphw actually in bytebuddy in commit
1,1,1,1,1,1,1,0,migrate fest assert code to assertj
1,1,0,0,1,1,0,0,typo in documentation very minor typo in documentation an extra at in the documentationbefore it reads annotating the junit test class with a runwith mockitojunitrunnerclass after it reads annotating the junit test class with a runwith mockitojunitrunnerclass https cloudentcom assets c f b e d b c f png merging cool thanks for the fix
1,0,0,1,1,1,0,0,issue added support for generic arrays as return types solves by explicitly checking for return types that represent a generic array and by resolving for the arrays component type
1,0,0,0,1,1,0,0,reintroduce null check on mockutilismock will null check on mockutilismock was incorrectly removed after successive refactoring this pr reintroduces null check
1,1,0,0,1,1,1,0,remove validateserializable remove serializable validation
1,0,0,1,1,1,1,0,simplify the invocationonmock api to get a casted argument this pull request by introducing t getargument int and deprecating t getargumentat intclass in type invocationonmock this improves the readabilty of custom answers this string text invocationgetargumentat stringclass can be replaced string text invocationgetargument
1,0,0,0,1,1,0,0,remove deprecated code fixes for more left though
1,1,0,1,1,1,1,0,removed deprecated classes and methods removed deprecated classes and methods thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning raphw i the line ending issue is it okay to squash the commits once the review of all commits is fine the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted raphw do you know why the check codecov changes fail christianschwarz fixing issue and will report back shortly christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last days thank you i do not currently have good internet access vacation please repush forced and see if it worksthanksfor the effort this will be merged eventually raphw and stevepeak thanks for your support raphw szczepiq bric sorry for stressing you the people want mockito & lambda please comment and or merge this pr its a little step in the right direction ping lgtm thanks for doing the chore work
1,0,0,1,1,1,1,0,refactored class reporter to a static utillity for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample public list getlastvarargs { if argumentsisempty { reporter noargumentvaluewascaptured return null } else { return argumentsgetlast }} the above code snipped can be rewritten to this public list getlastvarargs { if argumentsisempty { throw noargumentvaluewascaptured } return argumentsgetlast }
1,0,0,0,1,1,1,0,dropped class handyreturnvalues while refactoring the class handyreturnvalues towards a static utility class i notices that it is not required at all therefore i decided to remove the type handyreturnvalues lgtm but the formatting of quite some files is still incorrect some have a space too much others are indented too much please take a close look at the diff and make sure that formatting changes are reverted functionality is fine by me timvdlippe lgtm but the formatting of quite some files is still incorrecthopefully for now and ever
1,0,0,0,1,1,0,0,refactored invocationmarker to a static utility class refactored invocationmarker to a static utility class there are some imports remaining on the invocationmarker which i think can be removed other than that how to trigger a build without the commiting squashing forced push cycle that failing tests suck not much faster but the fastest way i know of to trigger building of pull request is git commit amendgit push f lgtm
0,0,0,0,0,1,1,0,enable some ignored tests of bridgemethodshitagaintest and detecting final methods test this worked locally so lets see if this also works on the ci server thanks this has issue
1,0,0,1,0,1,0,0,refactored timeout and after concurrent test refactored concurrent test in order to the implementation now uses an executor to perform async calls instead of extending thread and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after timeout can you rebase this to the latest removal of deprecated api seems like something went wrong with my rebase i will look tomorrow into it christianschwarz i think its preferable to rebase eg pull rebase upstream master a pull request instead of merging that hides unrelated commits and makes reviewing easier thanksedit just saw your comment above so please ignore this this lgtm but one small comment thank you again for your work okay i the formatting issues lgtm i guess it would have been better to use more lenient timeouts it really sucks that we only experience this flakiness on master and now when we are reviewing such pull requests i cant seem to recreate these timing issues locally either i can replicate the issues if i decrease the timeouts and run a timeout test in an endless looptravis builds have very limited cpu resources so so failures of multi threaded tests are more likely
0,0,0,0,1,1,0,0,modified javadoc for argumentmatcher to this is the amendment to the argumentmatcher javadoc
1,0,0,1,1,1,0,0,revert remove deprecated method simple git revert for an accidental removal of a deprecated api since instead of x
1,0,0,0,1,1,0,0,makes the junit runner detect unused stubs this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits investigating the failure on travis works for me locally d i would rather not default to strict right away this will break a lot of user test suites which significantly increasing the upgrade process to mockito if we let developers know our intention is to makr the strict version default later they can slowly make the changes for each of their runners then we can change the default in mockito so developers had some time to adopt it this weekend late in the review game but nice feature
0,0,0,1,1,1,0,0,refactored testmethodsfinder to a static utility class
1,0,0,1,1,1,1,0,refactored argumentscomparator to a static utility class
1,0,0,0,1,1,0,0,refactored nongreedynumberofinvocationsinorderchecker to a static utility class
1,0,0,1,1,1,0,0,improved exception message fixes issue
1,0,0,0,1,0,0,0,tweaks any matchers details is i took the opportunity to replace testbaseassertthat by more powerful assertj equivalent theres still some work to be done in this class add iterable matchersbefore merging i ponder to make anyobject not to accept null currently any is an alias of anyobject keeping the anyobjet behaviour and deprecate the method i need to update anyint family description
1,0,0,1,1,1,1,0,refactored mockutil to a static utility class
0,0,0,0,0,1,0,0,add regression test for as mentioned in the bug report for adds a test which would catch this issue if it happened to regress in the future
1,0,0,1,1,1,1,0,refactored objectmethodsguru to a static utility class refactored objectmethodsguru to a static utility class removed unused methods and associated tests istostring mockitomethod method isequalsmethod method method ishashcodemethod method method renamed istostring to istostringmethod relates to
1,0,0,1,1,1,0,0,changed error message in case initialization for mock injection fails if a filed is annotated with injectmocks and the type of a field is an enum inner class interface or local class the error message is now _mock injection failed on field fieldname cause the type abstractcollection is an abstract class_ openjdk build failed the others gone clearwow the native world exploded test buffer overflow detected usr lib jvm java openjdk amd bin java terminated backtrace lib x _ linux gnu libcso __fortify_fail x x fa e lib x _ linux gnu libcso x d x fa d usr lib jvm java openjdk amd jre lib amd libnetso java_java_net_inet addressimpl_getlocalhostname x a x fa c d x fa d b this seem to be an issue with travis itself from their thread the workaround in the travisyml doesnt work anymorecc raphw ha theres been a change a few days ago should use the hosts addon ymladdons hosts myshorthost hostname myshorthost aside from the help removal that i dont want removed the code christianschwarz you can rebase on master i may have pushed a working fix for the buffer overflow issue in bric aside from the help removal that i dont want removed the code looks goodthanks for reviewing if you dont mind i would like to have a short discussion on the error message inorder to help devs to fix the issue full error message cannot instantiate injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because the type configurationmanager is an interfaceexamples of correct usage of injectmocks injectmocks service service new service injectmocks service service also dont forget about mockitoannotationsinitmocks and dont forget about some mocks for injection line cannot instantiate injectmocks field named fieldname okay that line was replaced with something like injectmocks failed on field f cause the type innerclass is an inner non static class so far so good line you havent provided the instance at field declaration so i tried to construct the instance i would like to remove that line the dev added injectmocks in order to construct an instance do we really need to tell him what he did line however i failed because detailsgetmessage can be removed it is now included in the first line line examples of correct usage of injectmocks hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard impossible to express in an example if you have an idea i will add it line injectmocks service service new service ouch that hurts i didnt know that it works what do users expect to happen in this case big question imho mockito should fail here indicating that either injectmocks should be removed cause it have no effect or indicating that the field must be initialised with null leaved blank or is it over written after mockito set the field line injectmocks service service same as for line line also dont forget about mockitoannotationsinitmocks this line can be removed the user or rule runner didnt forget to call initmocks other wise he wont see this error message line and dont forget about some mocks for injection that is confusing we dont need mocked fields if the class has an no arg constructor
1,1,0,1,1,1,1,0,junit rules report unused stubs makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits lets merge this today this pr is a squash of plus some code changes per code review feedback i addressed code feedback subjectively and selectively
1,1,0,1,1,1,1,0,junit rules report unused stubs makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits lets merge this today this pr is a squash of plus some code changes per code review feedback i addressed code feedback subjectively and selectively
1,0,0,1,1,1,0,0,checkschecknotnull now throws iae instead of npe changes npe to iae see lgtm you can merge when travis passes
1,0,0,0,1,1,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes yayhighlights the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs removed stubbinglistener api it could not work to the thread safety levels we support in mockito see also closes if no other feedback if youre happy with change merge yourself
1,0,0,0,1,1,0,0,ensured that mockitojunitrunner is thread safe wrt unused stubs detection this pr concludes yayhighlights the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs removed stubbinglistener api it could not work to the thread safety levels we support in mockito see also closes if no other feedback if youre happy with change merge yourself
1,1,1,1,1,1,1,0,returns_deep_stubs may try to mock final classes with deep stubs it was possible for generic metadata to be lost unusedthrough nested invocations on non generic types this could cause returns_deep_stubs to try mocking final classes which would result in a classcastexception apparently my other pr wasnt quite enough to fully fix this problem edited by mockito team
1,0,0,0,1,1,0,0,moves arity interfaces of java helper answers to public api the java helper interfaces have been introduced in however the public additionalanswersanswer family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to answer in the orgmockitostubbing packageim however in favor of adding the incubating annotation on those apis and related objects thoughts some very small doc comments lgtm also with the incubating
1,0,0,0,0,1,0,0,from now on verification happens always call in other three should fix problems with and i am going to restart this build a couple of times to test the robustness it could take a while hopefully we have loopsin the meantime try this gist got a failed travis job the culprit seems to be orgmockitousageverificationverificationafterdelaytest shouldverifynormallywithspecifictimes i have not touched verificationafterdelaytest in this pr yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so yup another commit with verificationafterdelaytest changes take a look great thanks will be restarting these changes a couple of times too really nice to have deterministic results now im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant lukasz szewc also after adding the timeunit parameter to delayedexection could rebase your commits added one missing line is not really the most expressive message i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test added timeunit to constructor reworked one of test in verificationwithtimeouttest mentioned above rebased and pushed with forcetake a look
1,0,0,0,0,1,0,0,from now on verification happens always call in other three should fix problems with and i am going to restart this build a couple of times to test the robustness it could take a while hopefully we have loopsin the meantime try this gist got a failed travis job the culprit seems to be orgmockitousageverificationverificationafterdelaytest shouldverifynormallywithspecifictimes i have not touched verificationafterdelaytest in this pr yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so yup another commit with verificationafterdelaytest changes take a look great thanks will be restarting these changes a couple of times too really nice to have deterministic results now im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant lukasz szewc also after adding the timeunit parameter to delayedexection could rebase your commits added one missing line is not really the most expressive message i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test added timeunit to constructor reworked one of test in verificationwithtimeouttest mentioned above rebased and pushed with forcetake a look
0,0,0,0,0,1,0,0,updated the javadocs polishing the javadocs starting with this small pr issue updated since to instead added more docs around the verification collector
0,0,0,1,1,1,0,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument varargs by introducing a matcherapplicationstrategy this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches arg call and an other is used to perfrom the capturing argumentcaptor and argumentmatchers can now be mixed in varargs fixes no more npe when null is passed to an varargs added regression tests in varargstest are ignored cause they belong to other issues and fail currently reduced logic duplication the pr bric some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with at first i tried to retrieve the type argument from the class but this turned out to be more complex eg when the type argument is bound in an upper class or interface or additional type arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now other improvements can be made later sounds good can you open a new ticket so i can take look mockito core can be closed now other improvements can be made later sounds good can you open a new ticket so i can take lookat the moment this works quite well so no hurry especially given your above remark on mockito on master atm we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that christianschwarz i have seen an interesting problem with varargstest fail on master which is jdk only while the same test passes on release x which is compiled and run against jdk im not sure why at the moment this behavior is different plus my dev laptop is being for a few days so im limited in my debug right nowthis happened after a merge of release x to master df af b e cd bf c db ecafe i noticed that verify mock varargs isnull is compiled to invoke imethodsvarargs string string im not sure other jdks behave compile differently though one of the failing test can be fixed by adding the cast statement test public void shouldmatchvarargs_nullarrayarg { object argarray null mockvarargs argarray verify mock varargs object isnull otherwise it is linked against string } could it be that something went wrong with the merge regarding this pr christianschwarz actually the investigation continue see
0,0,0,1,1,1,0,0,unified logic of argument matching and capturing the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument varargs by introducing a matcherapplicationstrategy this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches arg call and an other is used to perfrom the capturing argumentcaptor and argumentmatchers can now be mixed in varargs fixes no more npe when null is passed to an varargs added regression tests in varargstest are ignored cause they belong to other issues and fail currently reduced logic duplication the pr bric some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with at first i tried to retrieve the type argument from the class but this turned out to be more complex eg when the type argument is bound in an upper class or interface or additional type arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now other improvements can be made later sounds good can you open a new ticket so i can take look mockito core can be closed now other improvements can be made later sounds good can you open a new ticket so i can take lookat the moment this works quite well so no hurry especially given your above remark on mockito on master atm we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that christianschwarz i have seen an interesting problem with varargstest fail on master which is jdk only while the same test passes on release x which is compiled and run against jdk im not sure why at the moment this behavior is different plus my dev laptop is being for a few days so im limited in my debug right nowthis happened after a merge of release x to master df af b e cd bf c db ecafe i noticed that verify mock varargs isnull is compiled to invoke imethodsvarargs string string im not sure other jdks behave compile differently though one of the failing test can be fixed by adding the cast statement test public void shouldmatchvarargs_nullarrayarg { object argarray null mockvarargs argarray verify mock varargs object isnull otherwise it is linked against string } could it be that something went wrong with the merge regarding this pr christianschwarz actually the investigation continue see
0,0,0,0,1,1,0,0,update travis configuration to also build on oraclejdk lets see if this actually works testing for theres a new build also shall we update jacoco snapshot theres a new buildi would rather wait for the official release and upgrade to that ok fair enough shalli merge this one yes
1,1,0,1,1,1,1,0,warns user to upgrade if java version is to low warns user to upgrade if java version is to lowalso took the opportunity to log other platform details if mock class cannot be created before merging not that automatic release system will release a rc some test for platform would be nice especially too see if the version number extraction works with all known formats eg feature b maintai ce _ ea b update _ b _ ea b does it work for other jvms like jrockit j or excelsior jet ok thanks for feedback ill update the code accordingly beautiful we can push and generate new rc or use the magic incantation in the commit message to prevent release and stack this change to next rc if there is need for yet another rc christianschwarz we dont care about those as we dont have report on those only oracle openjdk although i dont know about their version scheme bea now oracle jrockit discontinued last version is java and oracle migrated features in oracle jdk ibm j excelsior jet azul zing azul zulu based on openjdk bric what i wanted to say was the update version mechanism should be aware of version schemes other than the expected the current implementation throws an indexoutofboundsexception if the jvm_version is eg b _u or an numberformatexception if the jvm_version is _ ea b christianschwarz fantastic review christianschwarz yes no problem that was a valuable input i didnt want these exceptions to be thrown i updated the test case and i did some research as well for future cases like this wow really nice tests this
0,0,0,0,1,1,0,0,renamed failuredetecter to failure detector also renamed misspelled issussessful to issuccessful fixes thanks oliver
0,0,0,0,1,0,0,0,adds throwable to arity answers also improved javadoc all in the title this should lgtm restarted the build that was failing on an unrelated test
1,1,1,1,1,1,1,1,add missing copyright headers add missing copyrights using license gradle plugin updated only source files test files were skipped existing copyright headers were not modified unfortunately the plug in is not compiled for java i really would like to avoid as much as possible maintaining x too long however i suppose we can change the jdk that gradle use if this is a separate task in traviswhy a separate task because if gradle runs the under the code under another jdk we may miss specific jdk runtime behavior per we can use version and make it work on jdk good point lets do that instead dmitriyzaitsev could you amend b af e e e a e b a f d f with the working version thanks in advance dmitriyzaitsev by id like to say you have done a proper pull request thats very nice
1,0,0,0,0,1,0,0,implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in to gain back stability on the build
1,0,0,1,1,1,0,0,adds a warning for ibm j vms if mock generation fails related to this pr simply adds a warning for ibm j vms if the mock maker fails
1,1,0,1,1,1,1,0,only resolve instrumented method after validating that an instance is this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a method instance which requires using a hashmap which causes an infitite loop upon mocking the hash map type
0,0,0,1,1,1,1,0,introduce validable answers for early validation of stubbing overviewcustom answers are now more robust users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too javaclass mycustomanswer implements answer validableanswer { note extra validableanswer interface public object answer invocationonmock invocation { answer implementation } public void validatefor invocationonmock invocation { throw mockitoexception if answer cannot be applied to given invocation }} implementationwhile trying to i noticed that answersvalidator knew too much about other answers to fix the design issue i propose the following design introduce validableanswer in public api which is a single method interface that doesnt extends answer each answer that wants to be validated hence implement this interfacebenefit reduced visibility of some methods in these answers each new answer that want to be validated can just by implementing the new contractvalidating returned value of a mocks default answer had to be handled differently
0,0,0,0,0,1,1,0,improves exception message in case a matcher is used for a primitive parameter this should help for cases like npe can be raised by the jvm on the callsite of a matcher returning object like any the thing is that the jvm does several thing like to allows a type to match a signature like t any type inference with java cast and unboxing however any can only return null so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a invaliduseofmatchersexception raised after the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like anyint i love this change the description of the pr is really good i immediately was able to understand the use case mockito is great because we never stop improving the ux the exception messages and suchbig
1,0,0,1,1,1,0,0,test clean up according to discussions for rememberinglisteners according to issue we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in that build was failing for some reason not obvious and had merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr bric timvdlippe sorry for this new pr with the same code previously we were discussing in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge looks good to me thanks for the improvement
1,0,0,0,1,1,1,0,adds a matches pattern following discussion in it is sensible to add a mockito matcher that can take a pattern as an argumentthe usage is the same as matches string javawhen mockonearg matches patterncompile a z \\d\\d thenreturn although it allows to build more complex regex especially with regular expression flags mockito core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away mockito core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks bric yes exactly
0,0,0,0,0,1,0,0,junit rule strictness can be tweaked per test method see the design and rationale at please review tomorrow morning unless theres feedback thanks timvdlippe for review
0,0,0,0,1,1,0,0,backport release x changes to master fix for backport release x changes to master the fix for reported also for broken inlinebytebuddymockmakertest test with java its green anyone willing to approve provide further feedback lgtm
1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
0,0,0,0,1,1,1,0,should not throw npe when custom exception fillinstacktrace returns null wuwen can you rebase this commit on the latest release x also thanks for the contribution the build is failingthe reason is please export gh_token env variable first expression javalangsystemenv it values it gh_token timvdlippe that sound familiar however i believe this was a couple of weeks ago
1,1,0,1,1,0,1,0,jacaco synthetic fields are not anymore final in this internal assumed jacoco fields will always be static final obviously not jacoco changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion
1,0,0,0,1,0,0,0,argumentmatchers javadoc grammar improvement grammar issue in argumentmatchers this implementation is due static type safety imposed by java compilershould be this implementation is due to static type safety imposed by java compilerthis pr fixes issue
1,0,0,0,1,0,0,0,argumentmatchers grammar fix cherry pick pr to the x branchthis pr should on this branch too
0,0,0,1,1,0,0,0,spy annotation reports better error message if instance creation is impossible this simple piece of code prevents the spyannotationengine to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was null this should
1,0,0,0,0,1,0,0,update to byte buddy fixes bridge method resolution for generic types
1,1,0,0,1,1,0,0,a elements were missing the name attribute meaningful links probably never worked as expectedthe a elements were missing the name attribute so the browser couldnt find the matching part of the documentfor reference navigating to a fragment identifier for html documents and the text html mime type the following processing model must be followed to determine what the indicated part of the document is parse the url and let fragid be the component of the url if fragid is the empty string then the indicated part of the document is the top of the document if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here otherwise there is no indicated part of the document i am merging this one as this is very simple hm dont want a quick review i try to never self merge as it got me numerous times already the change is damn simple its just adding name attribute with a simple regexp
1,0,0,0,1,1,0,0,unified all number of invocations checker in numberofinvocationschecker this pr unifies the functionality of nongreedynumberofinvocationschecker numberofinvocationscheckerinorder and numberofinvocationschecker in static methods of the type numberofinvocationschecker this saves lines of code and increases readability on the call sides
1,0,0,1,1,1,0,0,simplified the creation of argumentsaredifferent exceptions relates to this pr simplifies the creation of argumentsaredifferent exceptions saving classes and lines of code no coverage uploaded for pull request base release x cbc f click here to learn what that means
1,1,0,1,1,1,1,0,refactored removefirstline to a static utility class relates to refactored removefirstline to a static utility classi would like to unifiy removefirstline decamelizer and stringjoiner to a new type stringutil they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts
1,1,0,1,1,1,1,0,support for return type void in doesnothinganswer this pr allows to use donothing for methods with return type javalangvoid like void methods to solve this invocationinfoisvoid checks now the return type for the pseudo type of the keyword void or void no coverage uploaded for pull request base
1,1,0,1,1,1,1,0,new feature enable mocking using constructor arguments motivation and design see to quote the requirement see in depth design in we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the mocksettingsuseconstrctor method as suggested in the alternative api comment in the issue and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment wow thank you for swift contribution i will review once i have a bandwidth apologies the previous push had a couple of failing tests due to a missed file ive updated it and it should work now merging
1,1,0,0,1,1,0,0,allow spying on interfaces so that it is convenient to work with java default methods merging
0,0,0,0,0,1,0,0,verifies acceptance test to prevent future regression added an acceptance test to verify this is going to fail until mockito updates to the next version of byte buddy that re that contains the following commit could you rebase on release x this test should pass now timvdlippe rebased on release x and tests are passing now thank you guys nice and clean change and makes mockito safer for our users
1,0,0,1,1,1,0,0,resolve ambiguous constructors with the current code introduced in mockito by commit a c calling mocksettingsuseconstructor with an argument list that would be applicable to more than one constructor would fail with an orgmockitointernalcreationinstanceinstantiationexception this behavior however is suboptimal as described in issue as it makes useconstructor less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if they are both applicable to the given argument list constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y ie paramxisassignablefrom paramy constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class public class someclass { someclass object o {} someclass string s {} }without this patch calling mock someclassclass withsettings useconstructor string would fail with this patch such a call would invoke the someclass string constructoras noted above this pr fixes issue merging
1,1,0,0,1,1,0,0,update javadoc about the mockito inline artifact this pr in the javadoc i write that the first version of mockito inline is this artifact was actually offered in version but or earlier it did not work due to the issue so i write like that
1,1,0,0,1,1,0,0,update javadoc about the mockito inline artifact this pr in the javadoc i write that the first version of mockito inline is this artifact was actually offered in version but or earlier it did not work due to the issue so i write like that
1,1,0,0,1,1,0,0,enabled continuous delivery via robust mockito release tools project continuous delivery pipeline almost implemented removed tons of release logic complexity now all that is a part of general purpose mockito release tools project the new release automation should be much easier to test does this also implement the logic to only publish a release once every x weeks does this also implement the logic to only publish a release once every x weeksit will be simpler let me finish off the documentation so that everything is clear good question i will be merging soon readmemd contains information about the releases more documentation will be provided but it should not blocking this pr more documentation on spanking new wiki page plan to merge today really excited for this change thanks for the great work szczepiq just merged this puppy ill keep an eye on the release automation things might be bumpy for the next week or so until the dust after this change drops down and all fallout is cleaned up thank you guys for patience more documentation and improvements i will duly provide in the meantime shoot feedback szczepiq does this also close szczepiq does this also close i suggest we leave open for now so that its a place for discussion btw thank you for updating thread with the status
0,0,0,1,1,1,1,0,validation in returnargumentat int in case of type erasure on the parameter the parameter type inference takes now the type of the actual instanceinto account to avoid type erasure issues in case the parameter isgenericsee also https githubcom mockito mockito issues issuecomment merging
1,0,0,1,1,1,0,0,add information about donothing method to cannotstubvo
1,1,0,1,1,1,0,1,interfaces only declare tostring implicitly and should therefore override it explicitly from the inline mock maker
1,1,0,0,1,1,0,0,updating documentation of verify feature to correct a s updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatimthe documentation presents the following example of the verify exact number of invocations feature using mock mockedlistadd once mockedlistadd twice mockedlistadd twice mockedlistadd three times mockedlistadd three times mockedlistadd three times following two verifications work exactly the same times is used by default verify mockedlist add once verify mockedlist times add once exact number of invocations verification verify mockedlist times add twice verify mockedlist times add three times verification using never never is an alias to times verify mockedlist never add never happened verification using atleast atmost verify mockedlist atleastonce add three times verify mockedlist atleast add five times verify mockedlist atmost add three times the last but one line says verify mockedlist atleast add five times this could be confusing to someone using these examples as it would result in a toolittleactualinvocations failure being reported by mockito this is because in the example the add method is never called with the string five times in order to have this example make sense in the way i think it should ive replaced the string five times with three times as suggested by szczepiq cheerstim cooke merging
1,1,0,1,1,1,1,0,improve and develop apis required for framework integrators mockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract in short limited changes to orgmockito types freedom to change orgmockitointernal public api changesthe full discussion on the use cases implementation options and decisions is in ticket new public method for creating mock creation settings object javamockitowithsettings name “my mock” build fooclass framework integrators can now provide custom mockhandler via mockmakergetmockhandler previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed public api considerations framework integrators may not provide custom implementation of invocationcontainer at this stage this part of api is accessible via public mockmakergetmockhandler getinvocationcontainer method there are no convincing use cases that exposing this new public api is needed merging
1,0,0,0,1,1,1,0,made it possible to delay the return of a mock or spy a cherry picked version of for the x branch yup in master there are not checkstyle verification thats because the backport wasnt finished yet havent had time to dive into the failing tests there merging the change to x
1,1,0,1,1,1,1,0,properly resolve visibility bridges resolve the method hierarchy by byte buddys method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect merging
1,0,0,1,0,1,0,0,enable stubonly on mock annotation since issue withsettings has a api stubonly which speed up mocked stub a lotsin my case stubonly huge amount of test overhead stacktrace and avoid invocation footprint list grow too large and cause oomhowever the api is not available with mock annotationi had to move tens of mock annotation from mock foo foo into mockitomock fooclass withsetting stubonly mock stubonlytrue public foo lightweight suggest adding the above api for convenience check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ merging
1,0,0,0,0,1,1,0,fix for thenthrow class fix for mockitothenthrow class now fails when the given throwable type is not declared on the stubbed method the build fails for jdk seem like an ci problem execution failed for task fetchallcontributors the build fails for jdk seem like an ci problem execution failed for task fetchallcontributorsi will look into that thank you merging
1,1,0,1,1,0,1,0,fix performance regression caused by use of method graph compiler in order to properly discover visibility bridges we have to run a full analysis of the method graph the compilation of this method graph is rather expensive and we require to cache a computed graph the caching is however non trivial as it references classes which might be unloaded in order to avoid a leak we cache classes using non strong referencesthis requires some real world experience to discover if this caching mechanism suffices merging
1,0,0,0,1,1,1,0,added new public api for spring boot use case not intended for merging yet submitted for visibility for design and rationale see for usage see verificationstartedlistenertest classthis is still experimental so refactorings error handling javadoc is missing merging
1,0,0,0,1,1,0,0,java ci build for mockito x summaryprovide java travis build to ensure java compatibility in at least tested use casessupport for java was improved in gradle x and that version is being used due to some issues with newer gradle versions some other configuration changes were required as well as jacoco version has been bump check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ merging
1,0,0,0,1,1,0,0,documentation issue added unit tests while working on new verification started listeners i found an instance of incorrect documentation i added unit tests and simplified the documentation currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use thank you for review
1,1,0,0,1,1,0,0,improve deprecated javadoc this pull request by improving the deprecated javadoc of mockitodebug mockitodebugger and mockitodebuggerprintinvocations object mocks by adding the additional information on how to retrieve an actual instance of the mockitodebugger interface
1,1,0,1,1,0,1,0,make override check more forgiving to accomondate kotlin compile patterns the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference merging
1,0,0,0,0,1,0,0,add regression test for issue regression that shows the issue of i am unable to reproduce this locally lets see what travis sayscloses thank you
1,0,0,1,1,1,0,0,mockitoextension for junit discussion of all thanks to the junit team sbrannen for that great api the implementation was straight forward and the docu is top notch not comparable to a junitrule or runner implementation one can feel the hard work the here provided mockitoextension allows to mock spy validate like the well known mockito junitrule runner this is still work in progress feel free to commentusage java extendwith mockitoextensionclass class junit test { mock private dependency mock test void checkmockcreation { when mockfoo thenreturn hello junit mockfoo verify mock foo }} possibly we need an annotation on class or method level to provide control of the strictness eg extendwith mockitoextensionclass mockitostrictness warn class junit test { mockitostrictness strict_stubs void testwithlocaldefinedstrictness { }} merging release x coverage
0,0,0,1,0,0,0,0,add checkreturnvalue to stubbing verification methods introduce a new annotation checkreturnvalue and add this to methods like when and verify such that static analysis can verify the value is actually used this makes sure developers can get warnings on build time instead of run time with our internal validatestate merging
1,0,0,1,1,1,0,0,remove several container classes and inline code remove several classes that were containers for code that is easier to be inlined they were only referenced once or never at all this makes it easier to reason about the code while also maintaining less code and classescloses merging
1,1,0,1,1,1,1,0,and improved check for self invocation better checks for recursive calls and guards internally used jdk types fixes merging
1,1,0,1,1,1,0,0,prevent class loading race condition allow singleton locking in context with class loading races fully agree will do soon merging
1,1,0,0,1,1,0,0,update doc for answerscalls_real_methods update the documentation for the answerscalls_real_methods according to and also included a note with recommendation not to use when thenreturn for partial mock hey seriybg this is a nice change sorry we have not reviewed earlier it must have slipped our radar continually improving documentation is absolutely important thank you for contributing
1,1,0,1,1,1,0,0,cleaner code for mockito users by better integration with static code checkers more checkreturnvalue builds on note that almost all non void orgmockitomockito methods are now annotated checkreturnvalue you could consider going the other way by annotating the class as a whole checkreturnvalue and adding canignorereturnvalue to the non void methods that form the complement context for this change within a company internal pr i found an unused mock someclass statement and thought itd be nice if mockito supported checkreturnvalue then i found but noticed that the mock methods werent annotated in fixing that i decided to go over the whole class for each method annotated in this pr i traced its logic most are side effect free while the remainder throw an exception in case of misuse the only non void method in orgmockitomockito i did not annotate is ignorestubs because it returns its input the reason i did not include these methods in was because there were no side effects checking them would therefore not required as it would be perfectly okay from a mockito perspective that these methods are invoked and then discarded the methods i annotated do have side effects and thus are harmful if you discard the return valuetherefore i am hesitant to accept this pr as to my knowledge these methods are pure and are not harmful for mockito to be invoked a lot of times invoking these methods many times may not be harmful in a functional sense but imho checkreturnvalue is more about establishing correctness ignoring the return value of any of these methods indicates a human error leading to cluttered tests in the best case and a false sense of security in the worst caselooking at guava that seems to be the way how they use the annotation for example it is applied to the whole package comgooglecommoncollect with some methods within that package annotated canignorereturnvalue none of those are pure i do understand that point of view however in that case we would need to update every public api that is non void to have this annotation which seems counter intuitiveanyways these are my cents paging mockito core to give their opinion \ \ in that case we would need to update every public api that is non void to have this annotation \ \ well a single annotation in package infojava takes care of that example dbut indeed lets see how others feel about it interesting discussion heres how i would summarize the decision point a benefit a chance of making our customers code cleaner because they could identify and remove dead code b downside hard to apply this strategy consistently we would have to review all public api and always remember to use those annotations when adding new apigiven that we already started using the annotations the downside b already applies merging the pr does not make it any worse hence the downside can be discounted and we only have the benefit im in favor of merging the prthank you stephan for tracing the public api methods and coming up with the pr timvdlippe the current master s last commit is e a ac cf af f aa d e e but git grep i prone doesnt show an error prone integration cant find another applicable branch using git log s prone i all either am i looking cross eyed or ah my brain was derping i was working on and thought i merged it but i did not so we have to rebase after that pr is merged sorry for the confusion no worries i see also targets the release x branch so i wont need to switch the target branch for this pr and indeed that pr contains a bunch of suppresswarnings checkreturnvalue this pr will almost certainly force the addition of a bunch more of those ive subscribed to the other pr and will rebase again once its
1,1,0,0,1,1,0,0,strictness configurable per mock stubbing today we have strict stubs feature a key enabler for cleaner tests and improved debuggability strict stubs dont work well with common stubbing pattern they also dont like when we call stubbed methods with unexpected arguments even though sometimes it is legit for more see solution java test public void demo { lenient method on mocksettings interface foo mock mockitomock fooclass withsettings lenient lenient method on mockito class mockitolenient when mockfoo thenreturn mockitolenient doreturn when mock foo } for more see public api changes new methods mockitolenient mocksettingslenient mockcreationsettingsislenient stubbinggetstrictness new interfaces basestubber extracted out from existing stubber interface so that we can reuse api with lenientstubber lenientstubber instance returned by mockitolenient other changes made orgmockitonotextensible annotation public so that we can use it in subpackages merging
1,0,0,1,1,1,1,0,extend mockitosession builder api to enable usage by testing frameworks the first commit in this pr in the additional commits ive taken the liberty to implement my proposals from add mockitosessionbuildername string to pass a name from the testing framework to the mockitosession add mockitosessionbuilderlogger mockitosessionlogger to customize the logger used for hints warnings produced when finishing mocking useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter add mockitosessionfinishmocking throwable to avoid potentially confusing warnings for failing tests add mockitosessionsetstrictness strictness to change the strictness of the current session there were two test cases requiring that each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the junitrule implementation to use it merging
1,0,0,0,1,1,0,0,update public api of invocationfactory needed for android static mocking a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior a callable that throws athrowable merging thanks for review
0,0,0,0,1,1,0,0,ensure isolation of stubbings compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this can we give an example of a test that breaks with this new behavior merging
1,0,0,0,1,1,0,0,include all the invocation in mock verification error message have changes the verify error message to include all the invocation instead of including just one undesired invocationpreviously we have message like wanted time at but was times undesired invocation at this pr changes it to wanted time at but was times at at to make the error message consistent the similar changes was made for too little invocations casethe message wanted times at but was times at changed to wanted times at but was times at at merging
1,0,0,1,1,1,0,0,different mocks are used for mock and injectmock in the same test class with junit extension fix mockitoextension which has init mocks with two identical test instances which cause the mock to be initialized and injected two times sadly this doesnt cover the case where we are using testinstance testinstancelifecycleper_class
0,1,1,1,1,0,0,0,resolve the correct protection domain for the codegen package when using reflection merging
1,1,0,1,1,1,0,1,performance improvements use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes also fixes javadoc warning merging
1,1,0,1,1,1,0,1,avoid circularity avoid endless loop during mock creation if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop described in comment it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk or older if we want to add such a test we can copy the test from https githubcom guenhter mockito final class kotlin problem if we want to add such a test we can copy the test from should be able to add this to the mockito kotlin subproject i suppose does it use the inline mock maker true of course added a test does that test really reproduce the issue that seems awfully simple yet we did not encounter it thus far 😮 merging
1,0,0,0,0,1,0,0,adding atmostonce rename threadverifiescontinuoslyinteractingmocktest and one todo hii would like to make a quick contribution on this projecti add atmostonce it seems not to be a big feature i just want to highlight the fact you have the function atleastonce but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring from hamcrestargumentmatcher merging
1,0,0,0,0,1,0,0,make mockitoextension constructor public it is possible to register an extension for automatic use using javas serviceloader mechanism projects may want to provide their own meta inf file to avoid tediously adding mockitoextension to tests since it is very common however serviceloader requires the class to have a no args public constructor so the current extension cannot be used with the serviceloader mechanism check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention fixes in the description _if relevant_ at least one commit should mention fixes _if relevant_ would be great if you could add a test for this not sure if that is possible it is not a blocking issue for me though added a test a bit heavyweight since it needs to be a separate project to avoid influencing others
1,0,0,0,1,1,0,0,correctly handle varargsmatcher check for hamcrestmatchers merging
1,1,0,1,1,1,0,1,mockito on java ea requires dnetbytebuddyexperimentaltrue system property to be set to let bytebuddy use asm api version asm _expermiental and use the same one in inlinebytecodegenerator merging
1,1,0,0,1,1,0,0,javadoc update ignorestubs to include strictness it updates ignorestubs docs to include strictness information this is ready to merge ill wait until current build is complete and merge it thank you
0,0,0,0,0,1,0,0,prevent stubonly from being verified this pr adds assertion to verification methods to prevent stub only mock from being verified verify verifynomoreinteractions inorder merging
1,0,0,0,1,1,1,0,exposed new api stubbinglookuplistener exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding merging
1,0,0,0,1,1,0,0,prevent premature garbage collection of mock objects if using one liner stubs the mock object may be premature cleaned up and returning the mock fails with an exception this occurs because there is no strong reference to the mock itselftherefore we need to maintain a strong reference to the mock until weve returned it while making sure that the gc can still cleanup the mock correctly when neededcause implementations of basestubbing are intended to be cleaned up after usage we can store a strong ref to the mock there getmock then uses the strong ref instead of the weak ref provided by the invocation after cleaning up the implementations of basestubbing there is no strong ref to the mock itself anymore except the one in the test class i tried some alternative solutions but i believe this is the only way it works bind last mock creation to mockingprogress does not work because of this when mock testclass class gettestclass thenreturn mock testclassclass getmock bind mock of last invocation for stubbing to mockingprogress does not work because of this when mock testclassclass getstuff thenreturn x thenreturn when mock testclassclass getstuff thenreturn xxx getmock getstuff getmock merging lgtm thanks for your improvementsonly passing the mock was my first take but i thought passing the invocationcontainerimpl is more type safe than just having object as parameter also the mock retrieval logic would be located in one central place but im very fine with the refactoring thank you
0,0,0,0,1,1,1,0,fix bug cce on smart not null answers this pr intends to for fix it the returnssmartnulls answer use now some reflection to find the correct return type instead of the javautilobject when the return type can be found it will start to retrieve empty values using the answer returnsmoreemptyvalues & returnsemptyvalues before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the answer will return a null instead of object mocki think it may be possible to improve this code any suggestion will be welcome merging
1,0,0,0,1,1,1,0,refactoring naming rule for sealed packages to better work with the java module system the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package private types merging
1,1,1,1,1,1,1,0,where multipleparentclassloader lacks of classloaders of superclasses the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy the problem of test case is that is not possible reflect a real osgi environment without use some test framework like pax exam the most complicate thing is do not pollute test dependency with and more dependencies if is not a problem i can try to create test case that verify if the multiparentclassloader contains more classloaders a job fails to install jdk other jobs are ok i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top most type this would effectively prevent mocking package private classes and methods for such types which worked until nowi just extended the multiple parent class loader in byte buddy to allow for collecting the most specific class loaders only after this i think we can add this change probably we would also need to include all class loaders of interface types for this to work universallyi am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type tree i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top most typei had a look to the implementation of multipleparentclassloader and it delegate to parents in the exact order they was added this means that if the classloader of the actual type the first added is able to load all classes other classloaders are not visited probably we would also need to include all class loaders of interface types for this to work universallyits already like that the actual classloader is built with a composition of classloader of actual type and the classloader of all interfaces the class implements my pr simply add classloaders from superclasses i am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type treei do not expect a hierarchy bigger than classloader are filtered at most we should ensure there are no duplicated in the list if not already this needs a rebase now merging
0,0,0,0,0,1,0,0,outer class mocks unavailable from inner class i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot merging
0,0,0,0,0,1,0,0,outer class mocks unavailable from inner class i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot merging
1,0,0,0,1,1,1,0,return null instead of causing a cce this solves a large number of edge cases where null will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes a previous pr resolved the sameissue with returnssmartnulls merging
1,0,0,0,0,1,1,0,with mocking of javautil classes i hope the test is correct at least it failed before and succeeds now merging
1,1,1,1,1,1,1,0,new api to clean up all inline mocks after test in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces a new method on mockmaker is a breaking change will give you a detailed review tomorrow that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito ie dont know what can be done and what cant its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it merging this is awesome thank you guys i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉 hi just to let you know i am using the new api already with v and for me it was breaking the strict test with following exception orgmockitoexceptionsmisusingnotamockexception argument passed to mockitomockingdetails should be a mock but is an instance of class cache$mockitomock$ at orgmockitointernalrunnersdefaultinternalrunner$ $ testfinished defaultinternalrunnerjava i had to move it to afterclass to mitigate the problem s you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api
1,0,0,0,1,1,1,0,fix strict stubbing profile serialization support when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem
0,0,0,0,1,1,0,0,verificationcollector to handle non matching args and other assertions this fix for widens the catch in verificationcollectorimpl so that it will catch any assertionerror rather than just mockitoassertionerror in this way any comparison failures such as the built in argument comparison when running under junit will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to verificationcollectorimpltest rename assertatleastonefailure to assertexactlyonefailure more accurate description of what it does change assertfail to assertjs assertbecauseexceptionwasnotthrown produces better diagnostics in the case of a failure merging
1,0,0,1,1,0,1,0,new public api invocationgetargumentsasmatchers new public api invocationgetargumentsasmatchers useful for advanced integrations such as mockito scala some internal refactorings that provide temporary help with mockito scala integration merging
0,0,0,0,1,1,0,0,report initialization failures per test method prior to this commit defaultinternalrunner threw an exception when mockitoannotationsinitmocks failed from the overridden withbefores method instead it now returns a statement that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version or beta is used insteadof reporting a class level error junit will now report a failure foreach test method in such test classesrelated issue junit team junit read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ merging
1,0,1,0,1,0,0,0,make mockitonotextensible service loadable this way error prone can find the plugin when mockito errorprone is added to the annotation processor classpath nb in this pr i chose to use google autoservice as is customary for error prone plugins if preferred i can instead introduce an explicit meta inf services comgoogleerrorpronebugpatternsbugchecker file timvdlippe sure will have a look at whats the simplest way to achieve this stephan were you able to take a look at this i wanted to fix the same in timvdlippe i considered several approaches and concluded that the best way forward would be to see whether how support for this kind of real full test can be added to error prones compilationtesthelper and bugcheckerrefactoringtesthelper classes the idea would be that they get another static factory method which relies on service loading rather than an explicitly provided checker class this would also benefit other non google ep users such as ubers nullaway then life happened so i didnt yet get to the point of actually trying that implementation note that even if it would work this pr would be blocked on those changes getting merged and released as part of error prone but i assume you could help getting the changes reviewed by the ep team so that leaves the question of timelines i can try but wont commit to spend some time on this later this week likely in the weekend alternatively if you agree with the suggested solution you could have a crack at an error prone pr and id be happy to be the first reviewerwrt whether this pr should be blocked on all that i have manually tested the changes in this pr so functionally we could just merge this for now the approach taken here is exactly what nullaway does but just merging is not in the spirit of the mockito project so i totally undestand not wanting to go that route lets merge it for now and hope we dont regress in the future
1,0,0,1,1,1,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests and implementation rebased on release x
1,0,0,1,1,1,0,0,rename toolittleactualinvocations rename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new namecheck list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ merging
1,1,0,0,1,1,0,0,fix typo in mockitojava javadoc i was confused and tried to look for verifynomoreinvocations when i came across this javadocshopefully this prevents further confusion
1,0,0,0,0,1,0,0,replaces objenesis references from stubbing classes with plugin equivalents this enables the ios mockito plugin to upgrade to v merging
1,1,0,1,1,1,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx merging
1,1,0,0,1,1,0,0,clarify default answer in api changes postponed to default answer has not been changed in oh travis is deeply unhappy i would need to investigate that please rebase this pr to fix the travis issue
1,1,0,0,1,1,0,0,minor bug fixes removed typofixes added missing tag to fix javadocsupersedes and closes merging
1,0,0,1,1,1,1,0,method generictypeextractorfindgenericinterface always returns first interface merging
0,0,0,0,1,1,0,0,clarify default strict stubbing behaviour in similar to as requested by timvdlippe in
1,0,0,0,1,1,0,0,close file handle to avoid a file handle leak fix a small file handle leak which pops up when running tests with file leak detector good catch this always gets me as the class name is file
1,0,0,0,1,1,0,0,close file handle to avoid a file handle leak fix a small file handle leak which pops up when running tests with file leak detector good catch this always gets me as the class name is file
1,1,0,0,1,1,0,0,fix typo in the wiki link check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention fixes in the description _if relevant_ at least one commit should mention fixes _if relevant_
0,0,0,0,0,1,0,0,revert remove unnecessary loop from injectingannotationengine reverts mockito mockito related to heres a pseudo code to describe the issues around this issue before while clazz objectclazz { val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } clazz clazzgetsuperclass } after val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } detailsbefore if the injectmocks field has a field that not listed in the constructor argument will fill by setter property injection at the nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the remove unnecessary loop from injectingannotationengine by lihmeh · pull request · mockito mockito · github at this time why travis fails this needs a rebase that should fix travis presumably merging
1,1,0,1,1,0,1,0,upgrade byte buddy to from release notes commits raphw byte buddy byte buddy byte buddy
1,1,0,0,1,1,0,0,add duration overloads add new javatimeduration based public apis to mockito after and timeout and deprecate the corresponding long based public apisplumb those duration instances through the internals of mockito merging
0,0,0,0,1,1,0,0,deprecate mockitohamcrest this class was used during the migration period from mockito andmockito but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrestin response to friendly ping on this pr i will submit this pr next week if there are no objections there were no objections so i am merging this sorry im late here i suggest we dont deprecate it the use case as documented in the javadoc is the following hamcrest integration is provided so that users can take advantage of existing hamcrest matchers that use case is still valid perhaps the docs need to be clearer to address for code that does not use hamcrest users should be following standard non hamcrest argthat apihope that helps for code that does not use hamcrest users should be following standard non hamcrest argthat apithe problem is that this project requires hamcrest as compile time dependency to be built this is a problem for users who do not want to use hamcrest but still build the source code as they cant use the pre built jars if we want to keep supporting hamcrest users with this api i would suggest a mockito hamcrest artifact that takes care of the integration that way those users who do not want to use hamcrest dont rely on it as wellwdyt im novice to testing because i have to wear many hats and i avoided getting into it like the plague in the past returning to spring development in my career and discovering mockito this year changed my integration testing life i rely heavily on googling stack overflow examples until it become memorized if ever i do it seems like there is a much larger documented wealth of knowledge on hamcrest on stack overflow maybe cause its been around a long time and so its easy to find solutions to basic challenges while someone new to mockito gets used to itfor example hasentry from this so helped me today like timvdlippes suggestion because it leverages giving your users the ability to tap into that knowledge solutions while slimming down the dependencies for the core mockito code basethanks for all your contributions in this area and letting us stand on your shoulders thanks for that response mansours i will look into introducing a mockito hamcrest artifact and figure out a way forward tomorrow i can revert this pr given the points raised by mockitoguy and make that work this is a problem for users who do not want to use hamcrest but still build the source code as they cant use the pre built jars can you elaborate this problem we use compileonly dependency for hamcrest just like we do for junit or opentest j this should not cause problems for consumers yes we are facing the same issues with junit and opentest j junit is not an issue atm as we are also using it but opentest j is currently an issuewe are not able to include jars as we require source code to be included and built for security analyses thus the inclusion of the dependencies during compile time does lead to problems when we want to build mockito in isolationi am currently investigating solutions for junit and opentest j and how that could be decoupled i went ahead with this pr as it was my understanding with mockito is that we wanted to remove our dependency of hamcrest therefore i assumed that deprecation was appropriate especially as there were no objections posted on this pr for almost weeks i understood that this was okayi will revert the pr for us to revisit but i would like to come to a decision on our hamcrest support and whether we want to support it or not at all when we come to a decision i would like to update our javadoc and wiki on that to clarify that for our users especially as there were no objections posted on this pr for almost weeks i understood that this was okayof course thank you for waiting weeks dont block on us yes we are facing the same issues with junit and opentest j junit is not an issue atm as we are also using it but opentest j is currently an issuecan you elaborate the problem is it a google mono repo use case i dont object reworking the artifacts i want understanding for me and others can you elaborate the problem is it a google mono repo use case i dont object reworking the artifacts i want understanding for me and others this is for every repository that includes third_party code that we need to have the original source code for security analyses that includes the mono repository as well as some other repositories that we havesince the hamcrest api is not type safe as it requires casting with object vs t as argument type we would like to move away from unsafe type casts the argumentmatcher interface does not inherit that problem but the older hamcrest api doesby having the hamcrest compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apii would personally say that while the hamcrest api was originally useful for defining reusable matchers the lack of type safety does more harm than good i have received good responses when i finished the migration of the argumentmatcher to be typed and it already caught bugs in our tests i think we should promote the type safe argumentmatcher and thus deprecate the old api but happy to disagree on that part and leave hamcrest compatibility in for example a separate artifact that we need to have the original source code for security analysesso the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis i still dont feel i fully understand this use case by having the hamcrest compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apithats a fair argument leave hamcrest compatibility in for example a separate artifactto keep backwards compatibility we would need mockito core mockito hamcrest are you thinking of reversing the dependency in future major version revert of this pr is in so the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis i still dont feel i fully understand this use case correct since jars can be built with any arbitrary code we prefer to not check in a jar as we cant be certain that it was built from the original source code thats why we check in the original source code and build that instead to keep backwards compatibility we would need mockito core mockito hamcrest are you thinking of reversing the dependency in future major versionyes but since maven does not allow a cyclic dependency we have to figure out what the possibilities are
0,0,0,0,1,1,0,0,guard against multiple evaluations of before statement some rules evaluate the base statement multiple times eg to executetests repeatedly the changes made in led to an exception in suchcases because the mockitolistener was registered multiple times nowwe only add the listener the first time the statement is evaluated inorder to restore the old behavior oh this fails a lot of tests 😢 could it be that testfinished needs the same treatment could it be that testfinished needs the same treatmentit does indeed merging
1,1,0,1,1,1,0,0,revert add duration overloads reverts mockito mockito merging
1,0,0,1,1,1,0,0,undetected unused stubbing when matching previous stubbed call merging
1,0,0,1,1,1,1,0,performance optimization by using methodgetparametercount where possible hias described in we could make use of methodgetparametercount in order to save some overhead from unnecessary cloning caused methodgetparametertypes as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph merging
1,0,0,0,1,1,1,0,basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for is caught with the following exception javalangillegalstateexception failed to install bundle mockito core jar at orgmockitoosgitestosgitestsetup osgitestjava snipped caused by orgosgiframeworkbundleexception error occurred installing a bundle at orgeclipseosgistoragestorageinstall storagejava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgmockitoosgitestosgitestsetup osgitestjava morecaused by javalangillegalargumentexception invalid range invalid format at orgosgiframeworkversionrange versionrangejava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestorageinstall storagejava morecaused by javautilnosuchelementexception at javautilstringtokenizernexttoken stringtokenizerjava at orgosgiframeworkversionrange versionrangejava more the osgi test project consists of three source sets a regular junit test source set with a single class osgitest starts an osgi framework installs mockito core byte buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework a source set testbundle thats built to an osgi bundle using the bundle task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle a source set otherbundle thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details the test source set only has compile dependencies on the osgi apis and junit ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used the test cases are run by loading classes from the test bundle that all implement runnable this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework the osgi bundles are built using the bnd gradle plugin instead of the deprecated osgi plugin in gradle the reason is both future proofing to not impede a migration to gradle in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains merging
1,0,0,0,1,1,1,0,basic test suite for osgi framework this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for is caught with the following exception javalangillegalstateexception failed to install bundle mockito core jar at orgmockitoosgitestosgitestsetup osgitestjava snipped caused by orgosgiframeworkbundleexception error occurred installing a bundle at orgeclipseosgistoragestorageinstall storagejava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle bundlecontextimpljava at orgmockitoosgitestosgitestsetup osgitestjava morecaused by javalangillegalargumentexception invalid range invalid format at orgosgiframeworkversionrange versionrangejava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder osgimanifestbuilderfactoryjava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestoragegetbuilder storagejava at orgeclipseosgistoragestorageinstall storagejava morecaused by javautilnosuchelementexception at javautilstringtokenizernexttoken stringtokenizerjava at orgosgiframeworkversionrange versionrangejava more the osgi test project consists of three source sets a regular junit test source set with a single class osgitest starts an osgi framework installs mockito core byte buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework a source set testbundle thats built to an osgi bundle using the bundle task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle a source set otherbundle thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details the test source set only has compile dependencies on the osgi apis and junit ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used the test cases are run by loading classes from the test bundle that all implement runnable this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework the osgi bundles are built using the bnd gradle plugin instead of the deprecated osgi plugin in gradle the reason is both future proofing to not impede a migration to gradle in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains merging
1,0,0,1,0,1,0,0,allow mockitosettings to be inherited read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ could you add a regression test in the junit jupiter test testsuiteive just amended the commit with a test
0,0,0,0,0,0,0,0,fix unnecessarystubbingexception javadoc
1,0,0,0,1,1,1,0,fix mocks throwing same instance with throwable class fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with dothrow class or thenthrow class this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass much like throwsexception then thenthrow class calls the swer answer with a new instance of throwsexceptionclass rather than thenthrow throwable similar for dothrow class dothrow throwable and doanswer answer timvdlippe just have a quick inquiry the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing check pr the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test or do i just delete the test file im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes
1,0,0,0,0,1,0,0,checkstyle error on windows windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env
1,0,0,0,1,0,0,0,update description of argumentmatcher javadoc for any the doc says thatany is an alias of anyobject and any javalangclass but in the note it says thatsince mockito any class is not anymore an alias of this methodthis is confusing so the alias in the doc should exclude any javalangclass to simply beany is an alias of anyobject also update the same issue of anyobject check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1,0,0,0,0,1,1,0,fix pattern matcher not matching to subregion issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment in this commit fixes that by using matcherfind
1,0,0,0,0,1,1,0,fix pattern matcher not matching to subregion issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment in this commit fixes that by using matcherfind
1,1,1,0,1,1,1,0,return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null merging
1,1,1,0,1,1,1,0,return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null merging
1,1,0,0,1,1,0,0,document using mock with method parameters although weve called it out in the junit extension we should alsomake sure its clear in the core documentation to make it more visiblewe can fully quality the test annotation to make clear that it has tobe with junit closes junit extension https javadocio doc orgmockito mockito junit jupiter latest org mockito junit jupiter mockitoextensionhtml merging
1,1,0,1,1,1,0,0,correctly handle mocks with limited life cycle in listeners due to the limited lifetime of static mocks they cannot be validated within a mockito session since they might have expired when the validation is applied this patch excludes static mocks from all validation to support static mocks in the regular session validation we would rather need to trigger the validation upon release of any static mock it only tests part of the issue for actually testing it we would need to run the junit tests with the inline mock maker and create subprojects for it i am going on a two week vacation tomorrow so i did not want to open that barrel of wine tonight but i validated the working manually if you have some time could you add additional subprojects i validated the runners manually however ah okay i got confused as the commit mentions that the issue is so thats why i thought we had test the whole scenario please go on vacation we can figure it out later 😄 merging
1,0,0,1,1,1,0,0,do not pass static mocks to regular listener callback does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks we have passed class objects to the listener to indicate a static mock the class object is of course itself not a regular mock and its cleaner to create a callback method of its own this way existing listeners remain logically backwards compatible including our own listener that is used within the junit runner we have only tested the rule i added a test for the runner too merging
1,1,0,1,1,1,0,0,only enable mocking of types right before instantiation to avoid circular interception of constructor creation
1,1,0,1,1,1,0,1,initializes classes prior to instrumentation to avoid uncontrolled code execution triggeres initializers explicitly merging
1,1,0,1,1,1,1,0,escape mock during method dispatch on mock to avoid premature garbage collection under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch to avoid this we escape the mock instance during the dispatch to make sure that the gc cannot collect the object indeed force pushed a new version just nowlets hope the jit stays dumb enough to avoid this error in the future i was really certain that the stack allocation of the mock object would avoid the allocation but if the entire mockito call stack gets inlined that does no longer apply worst case we need to make the mockito call stack deeper then the inlining heuristic
1,1,0,1,1,1,1,0,mock resolver plugin adds a plugin to allow for adding one or multiple mock resolvers this way instances that are provided to mockitos dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as springthis works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied if we ever find a more private appraoch this would however break springs mockito use and it is already broken with the inline mock makerby this spi spring could add an unproxy resolver to its mockito build up and make its proxied mocks compatible with mockito other frameworks could use the same approach if desired as this spi is genericcloses merging
1,1,0,1,1,1,1,1,do not exclude synthetic constructors from instrumentation byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic eg bridge methods for constructor instrumentation it is however crucial that no code is called during mock creation and that fields are copied during spy creation merging
1,0,0,1,1,1,0,0,argumentmatcher error messages use lambda class names merging
1,0,0,1,1,1,0,0,argumentmatcher error messages use lambda class names merging
1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself errorprone is catching actual issues i will work through them
1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself errorprone is catching actual issues i will work through them
1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself errorprone is catching actual issues i will work through them
0,0,0,0,1,1,0,0,fix reversed order of verify parameters for consistency the parameters of the methodmockedstaticverify verificationmode verification have been swapped tomockedstaticverify verification verificationmode as this order is already used inmockitoverify t verificationmode fixes check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ merging
0,0,0,0,1,1,0,0,javalangobject is now instrumented again seems like the object type does not ever need instrumentationtargetsremove objectclass in orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation set boolean was a bit over the top i e it does seem to break mocking of tostring when inherited from javalangobject i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully yeah good point i dont know why i ever added that
1,0,0,0,1,1,0,0,bugfix verify on a wrapped mock fails pr for verify on a wrapped mock fails with unfinishedverificationexception
1,1,0,1,1,1,1,0,do not omit stack frames of causing class this pr will fix this problems described in the main cause wasnt the hiderecursivecall method but tryinvoke methodin tryinvoke the original stacktrace will be passed through the configured filter after it has been modified hiderecursivecall when calling hiderecursivecall the second argument current is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch tryinvoke will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the instance object given to tryinvoke this offset will then be given to hiderecursivecall as current argument instead of using the stack trace lengthif there is no instance object null the length of the stack trace is used like before
1,0,0,1,1,1,0,0,but invoked here lists the invocation parameters supersedes and closes
1,1,0,1,1,1,1,0,include cause when fieldreader fails to access field simply passes the exception cause to the thrown mockitoexception merging
0,0,0,0,1,1,0,0,add missing parenthesis to javadoc example adds the missing parenthesis to the argumentmatcher javadoc example checklist read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_ merging
1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
1,1,1,1,1,1,1,0,use the parent classloader if the context classloader is a child of it this should only affect cases that previously would have thrown anexception there are some formatting issues that should be automatically if you run gradlew spotlessapply locally formatting issues fixed merging
0,0,0,1,0,1,1,0,undo parent for multipleparentsclassloader ea f c adf cea e b a inadvertently undid a change from bc be d fb dcd b ced e fc which breaks behavior under some classloaders that special case mockito classes use of an explicit parent with multipleparentsclassloader appears to be discouraged in the documentation alsofollowup for merging
1,1,1,1,1,1,1,0,check package privacy of method params this patch handles methods where an interface uses a package private type as a param or return value without it the generated mock class will produce abstractmethoderror since its methods do not actually override the methods of the interfacesfollowup on i have run this through googles internal tests and it doesnt break anything

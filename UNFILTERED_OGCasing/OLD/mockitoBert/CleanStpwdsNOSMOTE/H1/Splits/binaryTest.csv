Util,Network,Interpreter,i18n,Logic,Test,IO,Security,corpus
1,0,0,1,1,1,0,0,is caused by calling collectionssort with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type iterable integer number it gives iterable integer and iterable number but also an inconsistent integer number im not sure its possible to sort consistently with a stateless comparator so this change switches to a sortsupertypeslast method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy comparator that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original order
0,0,0,0,1,0,0,0,it should if user uses mockitoafter or mockitotimeout with negative values then friendly reminder exception with details will be thrown
1,0,0,0,1,1,0,0,follow up to
1,1,0,0,1,1,1,0,remove serializable validation
1,0,0,1,1,1,1,0,this pull request by introducing t getargument int and deprecating t getargumentat intclass in type invocationonmock this improves the readabilty of custom answers this string text invocationgetargumentat stringclass can be replaced string text invocationgetargument
1,0,0,0,1,1,0,0,fixes for more left though
1,0,0,0,1,1,1,0,while refactoring the class handyreturnvalues towards a static utility class i notices that it is not required at all therefore i decided to remove the type handyreturnvalues
1,0,0,1,0,1,0,0,refactored concurrent test in order to the implementation now uses an executor to perform async calls instead of extending thread and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after timeout
0,0,0,0,0,1,0,0,as mentioned in the bug report for adds a test which would catch this issue if it happened to regress in the future
0,0,0,0,0,1,0,0,polishing the javadocs starting with this small pr issue updated since to instead added more docs around the verification collector
1,0,0,0,0,1,0,0,new api for rationale see for code review history see java existing api rule public mockitorule mockito mockitojunitrule proposed improvements rule strictness strictnesslenient rule strictness strictnesswarn is the defaultrule strictness strictnessstrict_stubs mockito default what strict stubbing means improved debuggability the test fails early when code under test invokes stubbed method with different arguments cleaner tests without unnecessary stubbings the test fails when there are any unused stubs declared cleaner more dry tests dont repeat yourself if you use mockitoverifynomoreinteractions you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out szczepans article on linkedin https wwwlinkedincom pulse curious how get even cleaner tests new mockito features faber
1,1,0,1,1,1,1,0,this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a method instance which requires using a hashmap which causes an infitite loop upon mocking the hash map type
0,0,0,0,0,1,1,0,this should help for cases like npe can be raised by the jvm on the callsite of a matcher returning object like any the thing is that the jvm does several thing like to allows a type to match a signature like t any type inference with java cast and unboxing however any can only return null so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a invaliduseofmatchersexception raised after the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like anyint
1,1,0,1,1,1,1,0,fix stacktracefilter to support inline mocking add one test to stacktracefiltertest add stubbinglocationtest into inline subprojectthis pr
1,0,0,0,1,1,0,0,verifyzerointeractions no longer delegates to verifynomoreinteractions instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito please let me know what to change and where to look to make it more mockitoish
1,1,0,1,1,1,0,1,herefore override it explicitly from the inline mock maker
1,1,0,1,1,1,1,0,mockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract in short limited changes to orgmockito types freedom to change orgmockitointernal public api changesthe full discussion on the use cases implementation options and decisions is in ticket new public method for creating mock creation settings object javamockitowithsettings name “my mock” build fooclass framework integrators can now provide custom mockhandler via mockmakergetmockhandler previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed public api considerations framework integrators may not provide custom implementation of invocationcontainer at this stage this part of api is accessible via public mockmakergetmockhandler getinvocationcontainer method there are no convincing use cases that exposing this new public api is needed
1,0,0,0,0,1,1,0,fix for mockitothenthrow class now fails when the given throwable type is not declared on the stubbed method
1,0,0,0,0,1,0,0,regression that shows the issue of i am unable to reproduce this locally lets see what travis sayscloses
1,1,0,1,1,1,0,0,allow singleton locking in context with class loading races
1,0,0,1,1,1,1,0,the first commit in this pr in the additional commits ive taken the liberty to implement my proposals from add mockitosessionbuildername string to pass a name from the testing framework to the mockitosession add mockitosessionbuilderlogger mockitosessionlogger to customize the logger used for hints warnings produced when finishing mocking useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter add mockitosessionfinishmocking throwable to avoid potentially confusing warnings for failing tests add mockitosessionsetstrictness strictness to change the strictness of the current session there were two test cases requiring that each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the junitrule implementation to use it
1,0,0,0,1,1,0,0,a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior a callable that throws athrowable
0,0,0,0,1,1,0,0,compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this
0,0,0,0,1,1,0,0,compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal corner cases only possibly incorrect tests and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods javawhen mockfoo the swer { othermockbar } we need to ensure that mockfoo and othermockbar dont interfere prior to this bugfix this scenario resulted in various problems like stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see solutionthe solution is based on great pr by r smirnov huge thanks to r smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as documented mockito syntax caveat thank you r smirnov for persistence and getting this
1,1,0,1,1,1,1,0,this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest grep r e import org\mockito\internal\creation\bytebuddy\ ^\ $ src main does not return anythingoffers workaround for
0,0,0,0,1,0,1,0,…ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot
1,0,0,1,1,1,0,0,fix mockitoextension which has init mocks with two identical test instances which cause the mock to be initialized and injected two times
1,1,0,1,1,1,0,1,use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes also fixes javadoc warning
1,1,0,1,1,1,0,1,if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop described in comment it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk or older if we want to add such a test we can copy the test from https githubcom guenhter mockito final class kotlin problem
1,0,0,0,1,1,0,0,this pr adds stubbinglookupevent and stubbinglookupnotifier as a part of the issue
1,0,0,0,1,1,1,0,exposed new public api based on an internal api stubbinglookuplistener as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of onion skin apithis pr replaces very nice pr from marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr marchpig thank you for understanding
0,0,0,0,0,1,0,0,created a minimal test that reproduces bug with smart nulls and generics see issue
0,0,0,0,0,1,0,0,i opened issue a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression reported to be working in the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_ problem junitrule detects an unfinished mocking session when an inner class is detected fix if a mockitosession has been established for junitrule then use that and init mocks of the inner class tests within an inner class ensure mocks are accessible override outer class values when desired retain original values if not overwritten demonstrated with debechtejunit junit hierarchicalcontextrunner snapshot
1,1,1,1,1,1,1,0,in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and
1,1,1,1,1,1,1,0,in certain specific rare scenarios issue inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state only make sense in inline mocking javapublic class exampletest { after public void clearmocks { mockitoframework clearinlinemocks } test public void sometest { } } due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them and
1,0,0,0,1,1,1,0,when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem
0,0,0,0,1,1,0,0,this fix for widens the catch in verificationcollectorimpl so that it will catch any assertionerror rather than just mockitoassertionerror in this way any comparison failures such as the built in argument comparison when running under junit will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to verificationcollectorimpltest rename assertatleastonefailure to assertexactlyonefailure more accurate description of what it does change assertfail to assertjs assertbecauseexceptionwasnotthrown produces better diagnostics in the case of a failure
0,0,0,0,1,1,0,0,prior to this commit defaultinternalrunner threw an exception when mockitoannotationsinitmocks failed from the overridden withbefores method instead it now returns a statement that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version or beta is used insteadof reporting a class level error junit will now report a failure foreach test method in such test classesrelated issue junit team junit read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1,1,0,1,1,1,0,1,im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java
1,1,0,1,1,1,1,0,with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx
1,0,0,1,1,1,1,0,hias described in we could make use of methodgetparametercount in order to save some overhead from unnecessary cloning caused methodgetparametertypes as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph
1,0,0,0,0,1,1,0,issue talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument provided with an invocation to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas matchermatch see comment in this commit fixes that by using matcherfind
1,0,0,1,1,1,0,0,improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path
1,1,0,1,1,1,1,0,this pr will fix this problems described in the main cause wasnt the hiderecursivecall method but tryinvoke methodin tryinvoke the original stacktrace will be passed through the configured filter after it has been modified hiderecursivecall when calling hiderecursivecall the second argument current is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch tryinvoke will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the instance object given to tryinvoke this offset will then be given to hiderecursivecall as current argument instead of using the stack trace lengthif there is no instance object null the length of the stack trace is used like before

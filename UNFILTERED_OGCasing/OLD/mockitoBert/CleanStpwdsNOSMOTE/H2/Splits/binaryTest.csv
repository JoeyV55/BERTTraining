Util,Network,Interpreter,i18n,Logic,Test,IO,Security,corpus
1,0,0,0,1,1,0,0,argumentcaptorforclass is more friendly with generic types we modify the signature of argumentcaptorfromclass class to better express the type relationship between the argument and the return type there is no change to the behavior of the method this change is to allow expressions such as javaargumentcaptor captor argumentcaptorfromclass consumerclass to type check which is desirable as a convenience to users of argumentcaptor we also add two tests to document this extension to the api both of which fail to compile without this change to argumentcaptorfromclass these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile time properties of argumentcaptor not its behavior
1,0,0,1,1,1,1,0,better protection against incompatible returned value of default answer and get safely mock name fixes issue the value returned by the default answer is now validated to make sure there wont be a classcastexception if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a classcastexception when reporting a verification issue
1,0,0,1,1,0,0,0,a verify call example in captor javadoc
1,1,1,1,1,1,1,0,migrate fest assert code to assertj
1,1,0,0,1,1,0,0,typo in documentation very minor typo in documentation an extra at in the documentationbefore it reads annotating the junit test class with a runwith mockitojunitrunnerclass after it reads annotating the junit test class with a runwith mockitojunitrunnerclass https cloudentcom assets c f b e d b c f png
1,0,0,1,1,1,0,0,issue added support for generic arrays as return types solves by explicitly checking for return types that represent a generic array and by resolving for the arrays component type
1,0,0,0,1,1,0,0,reintroduce null check on mockutilismock will null check on mockutilismock was incorrectly removed after successive refactoring this pr reintroduces null check
1,1,0,0,1,1,1,0,remove validateserializable remove serializable validation
1,1,0,1,1,1,1,0,removed deprecated classes and methods removed deprecated classes and methods
0,0,0,1,1,1,1,0,vararg method call on mock object fails
0,0,0,0,0,1,1,0,enable some ignored tests of bridgemethodshitagaintest and detectingf… …inalmethodstestthis worked locally so lets see if this also works on the ci server
1,0,0,1,1,1,1,0,refactored mockutil to a static utility class
1,0,0,0,1,1,0,0,refactored allinvocationsfinder and verifiableinvocationsfinder to st… …atic utility classes
1,0,0,1,1,1,0,0,changed error message in case initialization for mock injection fails if a filed is annotated with injectmocks and the type of a field is an enum inner class interface or local class the error message is now _mock injection failed on field fieldname cause the type abstractcollection is an abstract class_
1,1,0,1,1,1,1,0,junit rules report unused stubs makes junit rules detect unused stubs introduces mockitolistener api see the use case in issue recreated pr with squashed commits
0,0,0,0,1,1,0,0,renamed failuredetecter to failure detector also renamed misspelled issussessful to issuccessful fixes
1,0,0,0,0,1,0,0,implements retry rule for flaky tests previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in to gain back stability on the build
1,0,0,1,1,1,0,0,test clean up according to discussions for rememberinglisteners according to issue we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in that build was failing for some reason not obvious and had merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr
1,0,0,0,1,1,0,0,new strict stubbing api mockitosession see proposed design at the code is reviewable especially new public api please give feedback more work is pendingcurrent status address bric feedback getter javadoc review documentation for consistency mockitosession mockitosessionbuilder strictness mockitohint potentialstubbingproblem unnecessarystubbingexception x mockitojunitrunner and subclasses x mockitosession x mockitorule x add update mentions in the main mockito class x add validate mockito usage should be very easy x try making rules runner use the session they already reuse the code they just dont use the api directly created to track this work x address timvdlippe feedback x create concurrent test multiple sessions active in different threads x non code change not blocking merge github tickets linked from source code should be better documented alternatively create ticket for tracking
1,0,0,0,1,0,0,0,argumentmatchers grammar fix cherry pick pr to the x branchthis pr should on this branch too
0,0,0,0,0,1,0,0,verifies acceptance test to prevent future regression added an acceptance test to verify
1,0,0,1,1,1,0,0,add information about donothing method to cannotstubvo…
1,0,0,0,1,1,0,0,documentation issue added unit tests while working on new verification started listeners i found an instance of incorrect documentation i added unit tests and simplified the documentation currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use
1,1,0,0,1,1,0,0,improve deprecated javadoc this pull request by improving the deprecated javadoc of mockitodebug mockitodebugger and mockitodebuggerprintinvocations object mocks by adding the additional information on how to retrieve an actual instance of the mockitodebugger interface
1,1,0,1,1,0,1,0,make override check more forgiving to accomondate kotlin compile patterns the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference
1,0,0,0,0,1,0,0,add regression test for issue regression that shows the issue of i am unable to reproduce this locally lets see what travis sayscloses
1,1,0,1,1,1,1,0,and improved check for self invocation better checks for recursive calls and guards internally used jdk types fixes
1,1,0,1,1,1,1,0,and improved check for self invocation better checks for recursive calls and guards internally used jdk types fixes
1,0,0,1,1,1,1,0,extend mockitosession builder api to enable usage by testing frameworks the first commit in this pr in the additional commits ive taken the liberty to implement my proposals from add mockitosessionbuildername string to pass a name from the testing framework to the mockitosession add mockitosessionbuilderlogger mockitosessionlogger to customize the logger used for hints warnings produced when finishing mocking useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter add mockitosessionfinishmocking throwable to avoid potentially confusing warnings for failing tests add mockitosessionsetstrictness strictness to change the strictness of the current session there were two test cases requiring that each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the junitrule implementation to use it
1,0,0,0,1,1,0,0,update public api of invocationfactory needed for android static mocking a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior a callable that throws athrowable
0,0,0,0,1,0,1,0,reduce the allocation rate for the typical use of locat… …ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot
1,0,0,1,1,1,0,0,different mocks are used for mock and injectmock in the same test class with junit extension fix mockitoextension which has init mocks with two identical test instances which cause the mock to be initialized and injected two times
1,0,0,0,0,1,0,0,make mockitoextension constructor public it is possible to register an extension for automatic use using javas serviceloader mechanism projects may want to provide their own meta inf file to avoid tediously adding mockitoextension to tests since it is very common however serviceloader requires the class to have a no args public constructor so the current extension cannot be used with the serviceloader mechanism check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention fixes in the description _if relevant_ at least one commit should mention fixes _if relevant_
0,0,0,0,1,1,1,0,fix bug cce on smart not null answers this pr intends to for fix it the returnssmartnulls answer use now some reflection to find the correct return type instead of the javautilobject when the return type can be found it will start to retrieve empty values using the answer returnsmoreemptyvalues & returnsemptyvalues before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the answer will return a null instead of object mocki think it may be possible to improve this code any suggestion will be welcome
1,0,0,0,1,1,1,0,refactoring naming rule for sealed packages to better work with the java module system the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package private types
1,0,0,1,1,1,0,0,show multiple invocations on argumentsaredifferent this is the reconciliation of with the tests and implementation rebased on release x
1,1,0,0,1,1,0,0,fix typo in mockitojava javadoc i was confused and tried to look for verifynomoreinvocations when i came across this javadocshopefully this prevents further confusion
1,1,0,1,1,1,1,0,verifynointeractions guarantees no interactions with mock with i provided a fix to and however that pr targeted master which eventually became old x and its code didnt make it into release x and should be reopenedi have back ported that pr to target release x verifyzerointeractions is marked as deprecated and a new verifynointeractions is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if when this code will ship javadocs contain a placeholder since xx
1,0,0,1,1,1,1,0,method generictypeextractorfindgenericinterface always … …returns first interface
0,0,0,0,0,1,0,0,revert remove unnecessary loop from injectingannotationengine reverts mockito mockito related to heres a pseudo code to describe the issues around this issue before while clazz objectclazz { val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } clazz clazzgetsuperclass } after val mocks aggregatespyormockfields clazzgetmockfields val fields aggregateinjectmocksfields clazz val ret tryconstructorinjection clazz fields mock if retfieldwasinitializedusingconstructorinjection { trysetterorpropertyinjection clazz fields mock } detailsbefore if the injectmocks field has a field that not listed in the constructor argument will fill by setter property injection at the nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the remove unnecessary loop from injectingannotationengine by lihmeh · pull request · mockito mockito · github at this time
1,1,0,0,1,1,0,0,add duration overloads add new javatimeduration based public apis to mockito after and timeout and deprecate the corresponding long based public apisplumb those duration instances through the internals of mockito
1,0,0,1,1,1,0,0,undetected unused stubbing when matching previous stubbed call
1,0,0,1,0,1,0,0,allow mockitosettings to be inherited read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
1,0,0,0,0,1,0,0,checkstyle error on windows windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env
1,1,1,0,1,1,1,0,return mock name from tostring method for deep stub mocks return mock name from tostring for deep stub mocks it was previously returning null
1,1,1,1,1,1,1,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone changes nosuchmethoderror comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements fixed nosuchmethoderror crash in hidingfield nosuchelementexception crash in restrictedapichecker differentnamebutsame unnecessaryoptionalget unnecessarymethodreference new checks truncated commits jcnewclass disableable false in external differentnamebutsame symbolislocal was renamed in jdk super method references in unnecessarymethodreference unnecessaryoptionalget findings if the receivers are identical visiblefortestingused finding additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
0,0,0,0,1,1,0,0,fix reversed order of verify parameters for consistency the parameters of the methodmockedstaticverify verificationmode verification have been swapped tomockedstaticverify verification verificationmode as this order is already used inmockitoverify t verificationmode fixes check list read the contributing guide pr should be motivated ie what does it fix why and if relevant how if possible relevant include an example in the description that could help all readers including project members to get a better picture of the change avoid other runtime dependencies meaningful commit history intention is important please rebase your commit history so that each commit is meaningful and help the people that will explore a change in years the pull request follows coding style mention in the description _if relevant_ at least one commit should mention fixes _if relevant_
0,0,0,0,1,1,0,0,javalangobject is now instrumented again seems like the object type does not ever need instrumentationtargetsremove objectclass in orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation set boolean was a bit over the top i e it does seem to break mocking of tostring when inherited from javalangobject i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully
1,0,0,1,1,1,0,0,bump versionserrorprone from to bumps versionserrorprone from to updates error_prone_core from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in updates error_prone_test_helpers from to release notes sourced from error prone everything in plus an error prone changes initial support for running on jdk ea builds supports for java languages features is incomplete for issues with java are welcome returnvalueignored checking of collection iterable and iterat inliner additional commits viewable in dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting dependabot rebase dependabot automerge start dependabot will merge this pr once ci passes on it as requested by timvdlippe dependabot automerge end dependabot commands and options you can trigger dependabot actions by commenting on this pr dependabot rebase will rebase this pr dependabot recreate will recreate this pr overwriting any edits that have been made to it dependabot merge will merge this pr after your ci passes on it dependabot squash and merge will squash and merge this pr after your ci passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this pr if it is closed dependabot close will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually dependabot ignore this major version will close this pr and stop dependabot creating any more for this major version unless you reopen the pr or upgrade to it yourself dependabot ignore this minor version will close this pr and stop dependabot creating any more for this minor version unless you reopen the pr or upgrade to it yourself dependabot ignore this dependency will close this pr and stop dependabot creating any more for this dependency unless you reopen the pr or upgrade to it yourself
0,0,0,1,0,1,1,0,undo parent for multipleparentsclassloader ea f c adf cea e b a inadvertently undid a change from bc be d fb dcd b ced e fc which breaks behavior under some classloaders that special case mockito classes use of an explicit parent with multipleparentsclassloader appears to be discouraged in the documentation alsofollowup for
